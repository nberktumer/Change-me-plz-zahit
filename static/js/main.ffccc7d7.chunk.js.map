{"version":3,"sources":["components/AddNodeDialog/AddNodeDialog.module.css","components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNode.module.css","components/ShapePanel/ShapePanel.tsx","components/ShapePanel/ShapeItem.tsx","models/ProgrammingLanguage.tsx","models/VariableEnums.tsx","config/Defaults.tsx","config/NodeColors.tsx","config/Rules.tsx","components/CodePreviewPanel/CodePreviewPanel.tsx","components/ProjectTreePanel/ProjectTreePanel.tsx","components/CanvasItems/Ports/PortFactory.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLocation.tsx","utils/Random.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLabel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortType.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortModel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPort.tsx","components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeModel.tsx","components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeWidget.tsx","components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeFactory.tsx","components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoModel.tsx","components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoWidget.tsx","components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoFactory.tsx","lang/index.tsx","lang/en.tsx","lang/tr.tsx","components/CanvasItems/Nodes/VariableNode/VariableNodeModel.tsx","components/AddNodeDialog/DialogBody/BaseDialogBody.tsx","components/AddNodeDialog/DialogBody/AddVariableDialogBody.tsx","components/AddNodeDialog/DialogBody/AddWhileDialogBody.tsx","components/AddNodeDialog/DialogBody/AddArithmeticDialogBody.tsx","components/AddNodeDialog/DialogBody/AddOutputDialogBody.tsx","components/AddNodeDialog/DialogBody/AddInputDialogBody.tsx","components/AddNodeDialog/AddNodeDialog.tsx","generator/code/CodeWriter.tsx","generator/flows/AssignmentFlow.tsx","generator/flows/ArithmeticFlow.tsx","generator/Func.tsx","generator/flows/InputFlow.tsx","generator/flows/OutputFlow.tsx","generator/flows/WhileFlow.tsx","generator/CodeGenerator.tsx","components/CanvasItems/Nodes/WhileNode/WhileNodeModel.tsx","models/Variable.tsx","models/Condition.tsx","components/CanvasItems/Nodes/InitialNode/InitialNodeModel.tsx","components/CanvasItems/Nodes/ArithmeticNode/ArithmeticNodeModel.tsx","components/CanvasItems/Nodes/InputNode/InputNodeModel.tsx","components/CanvasItems/Nodes/OutputNode/OutputNodeModel.tsx","generator/FlowModelJSON.tsx","pages/editor/Editor.tsx","serviceWorker.ts","index.tsx","pages/editor/Editor.module.css","components/ShapePanel/ShapePanel.module.css"],"names":["module","exports","addNodeDialogButtonContainer","addNodeDialogBody","rectangleNode","rectangleNode--selected","rectangleNodeTitle","rectangleNodeInfo","fa","rectangleNodeName","rectangleNodePorts","rectangleNodeIn","rectangleNodeOut","ShapePanel","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react_default","a","createElement","className","styles","tray","children","Component","defaultProps","ProgrammingLanguage","VariableType","ArithmeticOperationType","FlowType","ConditionOperation","ShapeItem","_React$Component","_this2","style","borderColor","color","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","trayItem","name","React","Defaults","PROGRAMMING_LANGUAGE","KOTLIN","NodeColors","IF","WHILE","VARIABLE","ARITHMETIC","FOR","INITIAL","Rules","CodePreviewPanel","esm","handleWidth","handleHeight","refreshRate","refreshMode","render","_ref","width","height","backgroundColor","lib_default","mode","theme","fontSize","wrapEnabled","code","setOptions","dragEnabled","readOnly","highlightActiveLine","useWorker","language","undefined","ProjectTreePanel","rc_tree_es","selectable","defaultExpandAll","defaultExpandedKeys","title","DefaultPortLocation","PortFactory","_AbstractPortFactory","type","cb","initialConfig","AbstractPortFactory","Random","replace","c","r","Math","random","toString","DefaultPortType","DefaultPortLabel","_BaseWidget","get","prototype","portType","location","LEFT","bem","port","react","main","node","getParent","label","getProps","BaseWidget","DefaultPortModel","_PortModel","arguments","length","id","onLinkChangedListener","links","object","engine","_","link","createLinkModel","setSourcePort","setTargetPort","keys","getLinks","getMaximumLinks","getNode","OUT","IN","LOOP","SCOPE","listener","DefaultLinkModel","addListener","targetPortChanged","sourcePort","canLinkToPort","entityRemoved","entity","getTargetPort","PortModel","DefaultPort","RectangleNodeModel","_NodeModel","nodeType","ports","portModel","addOnLinkChangedListener","UID","addPort","RIGHT","_len","Array","_key","_len2","_key2","values","getPortListByType","NodeModel","RectangleNodeWidget","DefaultPortLabel_DefaultPortLabel","assign","background","getPortListByLocation","generatePort","bind","RectangleNodeFactory","_SRD$AbstractNodeFact","diagramEngine","RectangleNodeWidget_RectangleNodeWidget","SRD","RectangleNodeWithInfoModel","_RectangleNodeModel","info","RectangleNodeWithInfoWidget","RectangleNodeWithInfoFactory","RectangleNodeWithInfoWidget_RectangleNodeWithInfoWidget","strings","LocalizedStrings","en","in","out","loop","scope","true","false","ifStatement","variable","assignment","arithmetic","while","switch","save","dismiss","variableName","dataType","variableType","firstVariable","secondVariable","select","operation","recurse","initialFlow","firstOperator","secondOperator","input","output","tr","VariableNodeModel","_RectangleNodeWithInf","addInPort","setMaximumLinks","Infinity","addOutPort","BaseDialogBody","_getPrototypeOf2","args","apply","concat","handleStringChange","callback","setState","defineProperty","target","onDataChanged","handleBooleanChange","val","checked","AddVariableDialogBody","_BaseDialogBody","isNull","index_es","inputProps","maxLength","onChange","margin","map","display","BOOLEAN","flexDirection","alignItems","justifyContent","alignContent","textAlign","flex","INT","disabled","STRING","control","AddWhileDialogBody","first","second","variables","filter","AddArithmeticDialogBody","operator1","operator2","AddOutputDialogBody","AddInputDialogBody","AddNodeDialog","bodyData","data","onSaveClick","onDismissClick","AddWhileDialogBody_AddWhileDialogBody","onBodyChanged","AddArithmeticDialogBody_AddArithmeticDialogBody","ASSIGNMENT","AddVariableDialogBody_AddVariableDialogBody","INPUT","AddInputDialogBody_AddInputDialogBody","OUTPUT","AddOutputDialogBody_AddOutputDialogBody","getDialogBody","aria-labelledby","renderDialogBody","Button_default","variant","onClick","onDismiss","onSave","CodeWriter","flows","Map","codes","scopeCount","mainFunctionLineIndex","spacing","variableSet","Set","loopStack","Stack","push","TERMINATION_ID","instance","clear","console","log","line","splice","createSpacing","str","lastIndex","last","writeLineToMainFunction","INITIAL_ID","createMainCode","func","returnTypeString","returnType","parameterString","parameters","forEach","index","writeLine","functionName","appendToLastLine","codeLines","top","removeFromStackIfEquals","flow","has","add","pop","i","OperatorType","AssignmentFlow","nextFlowId","content","contentString","variableSetCode","getInstance","addVariable","writeMainCodeFromFlow","nextFlow","AssignmentFlowContent","Func","Parameter","InputFlow","functionInvocation","functionLines","scanCode","writeFunction","InputFlowContent","OutputFlow","OutputFlowContent","ArithmeticFlow","operationCode","ADDITION","SUBTRACTION","MULTIPLICATION","DIVISION","operator1Code","operator2Code","CONSTANT","constantValue","functionCode","ArithmeticFlowContent","Operator","WhileFlow","nextScopeId","scopeId","conditionCode","conditions","condition","EQUALS","NOT_EQUALS","addToLoopStack","WhileFlowContent","CodeGenerator","flowJson","reset","setFlows","convertToFlowObjects","parse","createFunctionCode","generateMain","join","flowModels","baseFlowMap","set","assignmentFlowContent","inputFlowContent","outputFlowContent","arithmeticFlowContent","whileFlowContent","WhileNodeModel","conditionList","addLoopPort","addScopePort","Variable","Condition","InitialNodeModel","ArithmeticNodeModel","InputNodeModel","OutputNodeModel","FlowModel","Editor","activeModel","selected","initialNode","DiagramEngine","installDefaultFactories","registerNodeFactory","registerPortFactory","DiagramModel","setDiagramModel","getNodes","item","selectionChanged","addItemListener","assertThisInitialized","removeItemListener","generator","getDiagramModel","addNode","selectedStr","isModalOpen","newOperation","newItemPosition","x","y","generatedCode","generate","variableList","getData","includes","points","getRelativeMousePoint","onLinkChanged","var1","var2","op1","op2","forceUpdate","onModalClose","addItem","currentFlow","getNextFlow","flowModelList","generateFlowModel","_this3","App","AddNodeDialog_AddNodeDialog","onModalSaveClick","onModalDismissClick","onClose","open","es","orientation","minSize","ProjectTreePanel_ProjectTreePanel","ShapePanel_ShapePanel","ShapeItem_ShapeItem","paneContent","diagramLayer","onDrop","onDragOver","preventDefault","maxNumberPointsPerLink","allowLooseLinks","srdDemoCanvas","CodePreviewPanel_CodePreviewPanel","TYPESCRIPT","depth","getID","flowModel","currentFlowId","constructor","nodeModel","scopeFlow","getScopeFlow","isSelected","indexOf","newVariableList","Boolean","window","hostname","match","ReactDOM","BrowserRouter","Route","path","component","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffccc7d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNodeDialogButtonContainer\":\"AddNodeDialog_addNodeDialogButtonContainer__2f1L-\",\"addNodeDialogBody\":\"AddNodeDialog_addNodeDialogBody__3_BNm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangleNode\":\"RectangleNode_rectangleNode__3g8g2\",\"rectangleNode--selected\":\"RectangleNode_rectangleNode--selected__2z6Pg\",\"rectangleNodeTitle\":\"RectangleNode_rectangleNodeTitle__2qlL0\",\"rectangleNodeInfo\":\"RectangleNode_rectangleNodeInfo__2-vqb\",\"fa\":\"RectangleNode_fa__LWnSI\",\"rectangleNodeName\":\"RectangleNode_rectangleNodeName__1IwGt\",\"rectangleNodePorts\":\"RectangleNode_rectangleNodePorts__3ETKC\",\"rectangleNodeIn\":\"RectangleNode_rectangleNodeIn__HNdqc\",\"rectangleNodeOut\":\"RectangleNode_rectangleNodeOut__1w6-S\"};","import React, {Component} from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface IShapePanelProps {\n}\n\nexport interface IShapePanelState {\n}\n\nexport class ShapePanel extends Component<IShapePanelProps, IShapePanelState> {\n    static defaultProps: IShapePanelProps = {}\n\n    constructor(props: IShapePanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return <div className={styles.tray}>{this.props.children}</div>\n    }\n}","import React from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface IShapeItemProps {\n    model: any;\n    color?: string;\n    name: string;\n}\n\nexport interface IShapeItemState {\n}\n\nexport class ShapeItem extends React.Component<IShapeItemProps, IShapeItemState> {\n    constructor(props: IShapeItemProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div\n                style={{borderColor: this.props.color}}\n                draggable={true}\n                onDragStart={(event) => {\n                    event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model))\n                }}\n                className={styles.trayItem}>\n                {this.props.name}\n            </div>\n        )\n    }\n}\n","export enum ProgrammingLanguage {\n    TYPESCRIPT,\n    JAVASCRIPT,\n    JAVA,\n    KOTLIN,\n    SWIFT,\n    PHP,\n    C,\n    CPP,\n    CSHARP,\n    PYTHON,\n    LISP\n}\n","export enum VariableType {\n    INT = \"Int\",\n    STRING = \"String\",\n    BOOLEAN = \"Boolean\"\n}\n\nexport enum ArithmeticOperationType {\n    ADDITION = \"Addition\",\n    SUBTRACTION = \"Subtraction\",\n    MULTIPLICATION = \"Multiplication\",\n    DIVISION = \"Division\"\n}\n\nexport enum FlowType {\n    IF = \"If\",\n    WHILE = \"While\",\n    FOR = \"For\",\n    INPUT = \"Input\",\n    OUTPUT = \"Output\",\n    ARITHMETIC = \"Arithmetic\",\n    ASSIGNMENT = \"Assignment\"\n}\n\nexport enum ConditionOperation {\n    EQUALS = \"Equals\",\n    NOT_EQUALS = \"NotEquals\"\n}\n","import {ProgrammingLanguage} from \"../models\"\n\nexport const Defaults = {\n    PROGRAMMING_LANGUAGE: ProgrammingLanguage.KOTLIN\n}\n","export const NodeColors = {\n    IF: \"rgb(0, 192, 255)\",\n    WHILE: \"rgb(192, 0, 255)\",\n    VARIABLE: \"rgb(255, 192, 0)\",\n    ARITHMETIC: \"rgb(192, 255, 0)\",\n    FOR: \"rgb(255, 0, 192)\",\n    INITIAL: \"rgb(0, 255, 192)\"\n}\n","export const Rules = {\n    MAX_VAR_LENGTH: 30,\n}\n","import React, {Component} from \"react\"\nimport {Defaults} from \"../../config\"\nimport {ProgrammingLanguage} from \"../../models\"\nimport AceEditor from \"react-ace\"\nimport ReactResizeDetector from \"react-resize-detector\"\n\nimport \"brace/mode/java\"\nimport \"brace/mode/javascript\"\nimport \"brace/mode/typescript\"\nimport \"brace/theme/ambiance\"\nimport \"brace/theme/clouds_midnight\"\nimport \"brace/theme/dracula\"\nimport \"brace/theme/gruvbox\"\nimport \"brace/theme/idle_fingers\"\nimport \"brace/theme/kr_theme\"\nimport \"brace/theme/merbivore\"\nimport \"brace/theme/merbivore_soft\"\nimport \"brace/theme/tomorrow_night\"\nimport \"brace/theme/tomorrow_night_bright\"\nimport \"brace/theme/tomorrow_night_eighties\"\nimport \"brace/theme/twilight\"\nimport \"brace/theme/vibrant_ink\"\nimport \"brace/ext/beautify\"\nimport \"brace/ext/themelist\"\n\nexport interface ICodePreviewPanelProps {\n    language: ProgrammingLanguage,\n    code: string | undefined\n}\n\nexport interface ICodePreviewPanelState {\n}\n\nexport class CodePreviewPanel extends Component<ICodePreviewPanelProps, ICodePreviewPanelState> {\n    static defaultProps: ICodePreviewPanelProps = {\n        language: Defaults.PROGRAMMING_LANGUAGE,\n        code: undefined\n    }\n\n    constructor(props: ICodePreviewPanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <ReactResizeDetector\n                handleWidth\n                handleHeight\n                refreshRate={300}\n                refreshMode=\"throttle\"\n                render={({width, height}) =>\n                    <div style={{height: \"100%\", width: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow_night\"\n                            name=\"blah2\"\n                            fontSize={14}\n                            height={height + \"px\"}\n                            width={width + \"px\"}\n                            wrapEnabled\n                            value={this.props.code}\n                            setOptions={{\n                                dragEnabled: false,\n                                readOnly: true,\n                                highlightActiveLine: false,\n                                useWorker: false\n                            }}/>\n                    </div>\n                }/>\n        )\n\n    }\n}\n","import React, {Component} from \"react\"\nimport Tree, {TreeNode} from \"rc-tree\"\nimport \"rc-tree/assets/index.css\"\n\nexport interface IProjectTreePanelProps {\n}\n\nexport interface IProjectTreePanelState {\n}\n\nexport class ProjectTreePanel extends Component<IProjectTreePanelProps, IProjectTreePanelState> {\n    static defaultProps: IProjectTreePanelProps = {}\n\n    constructor(props: IProjectTreePanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{color: \"white\"}}>\n            <Tree\n                selectable={false}\n                defaultExpandAll={false}\n                defaultExpandedKeys={[\"p1\"]}>\n                <TreeNode title=\"parent 1\" key=\"p1\">\n                    <TreeNode key=\"p10\" title=\"leaf\"/>\n                    <TreeNode title=\"parent 1-1\" key=\"p11\">\n                        <TreeNode title=\"parent 2-1\" key=\"p21\">\n                            <TreeNode title=\"leaf\"/>\n                            <TreeNode title=\"leaf\"/>\n                        </TreeNode>\n                        <TreeNode key=\"p22\" title=\"leaf\"/>\n                    </TreeNode>\n                </TreeNode>\n            </Tree>\n        </div>\n    }\n}\n","import {AbstractPortFactory, PortModel} from \"nberktumer-react-diagrams\"\n\nexport class PortFactory extends AbstractPortFactory {\n    cb: (initialConfig?: any) => PortModel\n\n    constructor(type: string, cb: (initialConfig?: any) => PortModel) {\n        super(type)\n        this.cb = cb\n    }\n\n    getNewInstance(initialConfig?: any): PortModel {\n        return this.cb(initialConfig)\n    }\n}\n","export enum DefaultPortLocation {\n    LEFT,\n    RIGHT\n}\n","export class Random {\n    /**\n     * Generates a unique ID\n     * @returns {String}\n     */\n    static UID(): string {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0\n            const v = c === \"x\" ? r : (r & 0x3) | 0x8\n            return v.toString(16)\n        })\n    }\n}\n","import * as React from \"react\"\nimport {BaseWidget, BaseWidgetProps, PortWidget} from \"nberktumer-react-diagrams\"\nimport {DefaultPortModel} from \"./DefaultPortModel\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n    model: DefaultPortModel;\n}\n\nexport interface DefaultPortLabelState {\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n    constructor(props: DefaultPortLabelProps) {\n        super(\"srd-default-port\", props)\n    }\n\n    getClassName() {\n        return super.getClassName() + (this.props.model.portType.location === DefaultPortLocation.LEFT\n            ? this.bem(\"--in\") : this.bem(\"--out\"))\n    }\n\n    render() {\n        const port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name}/>\n        const label = <div className=\"name\">{this.props.model.label}</div>\n\n        return (\n            <div {...this.getProps()}>\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? port : label}\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? label : port}\n            </div>\n        )\n    }\n}\n","export enum DefaultPortType {\n    IN,\n    OUT,\n    LOOP,\n    SCOPE\n}","import * as _ from \"lodash\"\nimport {BaseEvent, BaseModel, DefaultLinkModel, DiagramEngine, LinkModel, PortModel} from \"nberktumer-react-diagrams\"\nimport {DefaultPort, DefaultPortType} from \"./index\"\n\nexport class DefaultPortModel extends PortModel {\n    portType: DefaultPort\n    label: string\n    onLinkChangedListener: () => void\n    links: { [id: string]: DefaultLinkModel }\n\n    constructor(portType: DefaultPort, name: string, label: string | null = null, id?: string) {\n        super(name, \"default\", id)\n        this.portType = portType\n        this.label = label || name\n        this.links = {}\n        this.onLinkChangedListener = () => {\n        }\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.portType = object.portType\n        this.label = object.label\n        this.links = object.links\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            portType: this.portType,\n            label: this.label,\n            links: this.links\n        })\n    }\n\n    link(port: PortModel): LinkModel {\n        const link = this.createLinkModel()\n        link.setSourcePort(this)\n        link.setTargetPort(port)\n        return link\n    }\n\n    canLinkToPort(port: DefaultPortModel): boolean {\n        if (Object.keys(port.getLinks()).length > port.getMaximumLinks() || Object.keys(this.getLinks()).length > port.getMaximumLinks())\n            return false\n\n        // Do not connect ports that are in the same node\n        if (port.getNode() === this.getNode())\n            return false\n\n        return (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.LOOP)\n            || (this.portType.type === DefaultPortType.SCOPE && port.portType.type === DefaultPortType.IN)\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n    }\n\n    createLinkModel(): LinkModel {\n        const link = new DefaultLinkModel()\n        link.addListener({\n            targetPortChanged(event: BaseEvent<LinkModel> & { port: PortModel | null }): void {\n                if (event.port != null && event.port instanceof DefaultPortModel && link.sourcePort != null && link.sourcePort.canLinkToPort(event.port)) {\n                    (event.port as DefaultPortModel).onLinkChangedListener()\n                }\n            },\n            entityRemoved(event: BaseEvent<BaseModel>): void {\n                const link = event.entity as DefaultLinkModel\n                if (link.getTargetPort() != null)\n                    (link.getTargetPort() as DefaultPortModel).onLinkChangedListener()\n            }\n        })\n        return link\n    }\n}\n","import {DefaultPortType} from \"./DefaultPortType\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport class DefaultPort {\n    type: DefaultPortType\n    location: DefaultPortLocation\n\n    constructor(type: DefaultPortType, location: DefaultPortLocation) {\n        this.type = type\n        this.location = location\n    }\n}\n","import {DiagramEngine, NodeModel} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Random} from \"../../../../../utils\"\nimport {DefaultPort, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../../../Ports/DefaultPort\"\nimport strings from \"../../../../../lang\"\n\nexport class RectangleNodeModel extends NodeModel {\n    name: string\n    color: string\n    ports: { [s: string]: DefaultPortModel }\n    onLinkChangedListener: () => void\n\n    constructor(name: string = \"Untitled\", color: string = \"rgb(0,192,255)\", nodeType: string = \"rectangle-node\") {\n        super(nodeType)\n        this.name = name\n        this.color = color\n        this.ports = {}\n        this.onLinkChangedListener = () => {\n        }\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n\n        _.map(this.ports, (portModel) => {\n            portModel.addOnLinkChangedListener(listener)\n        })\n    }\n\n    addInPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addOutPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.OUT, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addLoopPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.LOOP, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.name = object.name\n        this.color = object.color\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            name: this.name,\n            color: this.color\n        })\n    }\n\n    getPortListByType(...type: DefaultPortType[]): DefaultPortModel[] {\n        return _.filter(this.ports, (portModel) => {\n            return _.includes(type, portModel.portType.type)\n        })\n    }\n\n    getPortListByLocation(...location: DefaultPortLocation[]): DefaultPortModel[] {\n        return _.filter(this.ports, (portModel) => {\n            return _.includes(location, portModel.portType.location)\n        })\n    }\n\n    getNextFlow(): RectangleNodeModel | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.OUT)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as RectangleNodeModel\n        } else {\n            return null\n        }\n    }\n}\n","import * as React from \"react\"\nimport * as _ from \"lodash\"\nimport {BaseWidget, BaseWidgetProps} from \"nberktumer-react-diagrams\"\nimport {RectangleNodeModel} from \"./RectangleNodeModel\"\nimport styles from \"./RectangleNode.module.css\"\nimport {DefaultPortLabel, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../../../Ports/DefaultPort\"\n\nexport interface RectangleNodeWidgetProps extends BaseWidgetProps {\n    node: RectangleNodeModel;\n}\n\nexport interface RectangleNodeWidgetState {\n}\n\nexport class RectangleNodeWidget extends BaseWidget<RectangleNodeWidgetProps, RectangleNodeWidgetState> {\n    constructor(props: RectangleNodeWidgetProps) {\n        super(\"srd-default-node\", props)\n        this.state = {}\n    }\n\n    generatePort(port: DefaultPortModel) {\n        return <DefaultPortLabel model={port} key={port.id}/>\n    }\n\n    render() {\n        return (\n            <div {...this.getProps()} style={{background: this.props.node.color}}>\n                <div className={styles.rectangleNodeTitle}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.name}</div>\n                </div>\n                <div className={styles.rectangleNodePorts}>\n                    <div className={styles.rectangleNodeIn}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.LEFT), this.generatePort.bind(this))}\n                    </div>\n                    <div className={styles.rectangleNodeOut}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.RIGHT), this.generatePort.bind(this))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as SRD from \"nberktumer-react-diagrams\"\nimport * as React from \"react\"\nimport {RectangleNodeModel} from \"./RectangleNodeModel\"\nimport {RectangleNodeWidget} from \"./RectangleNodeWidget\"\n\nexport class RectangleNodeFactory extends SRD.AbstractNodeFactory {\n    constructor() {\n        super(\"rectangle-node\")\n    }\n\n    generateReactWidget(diagramEngine: SRD.DiagramEngine, node: RectangleNodeModel): JSX.Element {\n        return <RectangleNodeWidget node={node}/>\n    }\n\n    getNewInstance() {\n        return new RectangleNodeModel()\n    }\n}\n","import {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {RectangleNodeModel} from \"../RectangleNodeModel\"\n\nexport class RectangleNodeWithInfoModel extends RectangleNodeModel {\n    info: string\n\n    constructor(name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n        super(name, color, \"rectangle-node-with-info\")\n        this.info = \"\"\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.info = object.info\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            info: this.info\n        })\n    }\n}\n","import * as React from \"react\"\nimport * as _ from \"lodash\"\nimport {BaseWidget, BaseWidgetProps} from \"nberktumer-react-diagrams\"\nimport styles from \"../RectangleNode.module.css\"\nimport {RectangleNodeWithInfoModel} from \"./RectangleNodeWithInfoModel\"\nimport {DefaultPortLabel, DefaultPortLocation, DefaultPortModel} from \"../../../../Ports/DefaultPort\"\n\nexport interface RectangleNodeWithInfoWidgetProps extends BaseWidgetProps {\n    node: RectangleNodeWithInfoModel;\n}\n\nexport interface RectangleNodeWithInfoWidgetState {\n}\n\nexport class RectangleNodeWithInfoWidget extends BaseWidget<RectangleNodeWithInfoWidgetProps, RectangleNodeWithInfoWidgetState> {\n    constructor(props: RectangleNodeWithInfoWidgetProps) {\n        super(\"srd-default-node\", props)\n        this.state = {}\n    }\n\n    generatePort(port: DefaultPortModel) {\n        return <DefaultPortLabel model={port} key={port.id}/>\n    }\n\n    render() {\n        return (\n            <div {...this.getProps()} style={{background: this.props.node.color}}>\n                <div className={styles.rectangleNodeTitle}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.name}</div>\n                </div>\n                <div className={styles.rectangleNodeInfo}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.info}</div>\n                </div>\n                <div className={styles.rectangleNodePorts}>\n                    <div className={styles.rectangleNodeIn}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.LEFT), this.generatePort.bind(this))}\n                    </div>\n                    <div className={styles.rectangleNodeOut}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.RIGHT), this.generatePort.bind(this))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as SRD from \"nberktumer-react-diagrams\"\nimport * as React from \"react\"\nimport {RectangleNodeWithInfoModel} from \"./RectangleNodeWithInfoModel\"\nimport {RectangleNodeWithInfoWidget} from \"./RectangleNodeWithInfoWidget\"\n\nexport class RectangleNodeWithInfoFactory extends SRD.AbstractNodeFactory {\n    constructor() {\n        super(\"rectangle-node-with-info\")\n    }\n\n    generateReactWidget(diagramEngine: SRD.DiagramEngine, node: RectangleNodeWithInfoModel): JSX.Element {\n        return <RectangleNodeWithInfoWidget node={node}/>\n    }\n\n    getNewInstance() {\n        return new RectangleNodeWithInfoModel()\n    }\n}\n","import eng from \"./en\"\nimport tur from \"./tr\"\nimport LocalizedStrings from \"react-localization\"\n\nconst strings = new LocalizedStrings({\n    en: eng,\n    tr: tur\n});\n\nexport default strings\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    save: \"Save\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\"\n}\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    save: \"Save\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\"\n}\n","import {RectangleNodeWithInfoModel} from \"../BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoModel\"\nimport strings from \"../../../../lang\"\nimport {NodeColors} from \"../../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Variable} from \"../../../../models/Variable\"\n\nexport class VariableNodeModel extends RectangleNodeWithInfoModel {\n    variable: Variable\n\n    constructor(variable: Variable) {\n        super(strings.variable + \" (\" + variable.type + \")\", NodeColors.VARIABLE)\n\n        this.variable = variable\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n}\n","import React, {Component} from \"react\"\n\nexport interface BaseDialogBodyProps {\n    onDataChanged: (data: BaseDialogBodyState) => void\n}\n\nexport interface BaseDialogBodyState {\n    [index: string]: any\n}\n\nexport class BaseDialogBody<T extends BaseDialogBodyProps = BaseDialogBodyProps, U extends BaseDialogBodyState = BaseDialogBodyState> extends Component<T, U> {\n\n    handleStringChange = (key: string, callback?: (value: string) => void) => (event: any) => {\n        this.setState({[key]: event.target.value}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback != null)\n                callback(event.target.value)\n        })\n    }\n\n    handleBooleanChange = (key: string, callback?: (value: boolean) => void) => (event: any) => {\n        const val = event.target.checked\n        this.setState({[key]: val}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback != null)\n                callback(val)\n        })\n    }\n}\n","import React from \"react\"\nimport {Checkbox, FormControlLabel, MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseDialogBody, BaseDialogBodyProps} from \"./BaseDialogBody\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\n\nexport class AddVariableDialogBody extends BaseDialogBody {\n\n    constructor(props: BaseDialogBodyProps) {\n        super(props)\n\n        this.state = {\n            variableName: \"\",\n            variableType: \"\",\n            value: \"\",\n            isNull: false\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"variable-name-input\"\n                    label={strings.variableName}\n                    value={this.state.variableName}\n                    inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                    onChange={this.handleStringChange(\"variableName\")}\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.dataType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\", (value) => {\n                        this.setState({value: \"\"})\n                    })}\n                    margin=\"normal\">\n                    {Object.keys(VariableType).map((key: any) => (\n                        <MenuItem key={key} value={VariableType[key]}>\n                            {VariableType[key]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <div style={{display: this.state.variableType !== \"\" ? \"initial\" : \"none\"}}>\n                    <div\n                        style={{\n                            display: this.state.variableType !== VariableType.BOOLEAN ? \"flex\" : \"none\",\n                            flexDirection: \"row\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                            alignContent: \"center\",\n                            textAlign: \"center\"\n                        }}>\n                        <TextField\n                            style={{flex: 1}}\n                            id=\"value-input\"\n                            label={strings.value}\n                            value={this.state.isNull ? \"NULL\" : this.state.value}\n                            type={this.state.variableType === VariableType.INT ? \"number\" : \"text\"}\n                            onChange={this.handleStringChange(\"value\")}\n                            margin=\"normal\"\n                            disabled={this.state.isNull}\n                        />\n                        <FormControlLabel\n                            style={{display: this.state.variableType === VariableType.STRING ? \"inherit\" : \"none\"}}\n                            control={\n                                <Checkbox\n                                    checked={this.state.isNull}\n                                    onChange={this.handleBooleanChange(\"isNull\", (value: boolean) => {\n                                        this.setState({value: value ? \"NULL\" : \"\"})\n                                    })}\n                                    value=\"true\"\n                                    color=\"primary\"/>\n                            }\n                            label=\"NULL\"\n                        />\n                    </div>\n                    <TextField\n                        style={{display: this.state.variableType === VariableType.BOOLEAN ? \"flex\" : \"none\"}}\n                        id=\"boolean-value-input\"\n                        select\n                        label={strings.value}\n                        value={this.state.value}\n                        onChange={this.handleStringChange(\"value\")}\n                        margin=\"normal\">\n                        <MenuItem key={\"true\"} value={\"true\"}>\n                            True\n                        </MenuItem>\n                        <MenuItem key={\"false\"} value={\"false\"}>\n                            False\n                        </MenuItem>\n                    </TextField>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseDialogBody, BaseDialogBodyProps} from \"./BaseDialogBody\"\nimport {Variable} from \"../../../models/Variable\"\nimport {VariableType} from \"../../../models\"\nimport {ConditionOperation} from \"../../../models/VariableEnums\"\n\nexport interface WhileDialogBodyProps extends BaseDialogBodyProps {\n    variables: Variable[]\n}\n\nexport class AddWhileDialogBody extends BaseDialogBody<WhileDialogBodyProps> {\n\n    constructor(props: WhileDialogBodyProps) {\n        super(props)\n\n        this.state = {\n            variableType: \"\",\n            first: \"\",\n            second: \"\",\n            operation: \"\"\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.variableType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\")}\n                    margin=\"normal\">\n                    {Object.keys(VariableType).map((value: any) => (\n                        <MenuItem key={value} value={VariableType[value]}>\n                            {VariableType[value]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.firstVariable}\n                    value={this.state.first}\n                    onChange={this.handleStringChange(\"first\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === this.state.variableType\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.secondVariable}\n                    value={this.state.second}\n                    onChange={this.handleStringChange(\"second\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === this.state.variableType\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.operation}\n                    value={this.state.operation}\n                    onChange={this.handleStringChange(\"operation\")}\n                    margin=\"normal\">\n                    {Object.keys(ConditionOperation).map((value: any) => (\n                        <MenuItem key={value} value={ConditionOperation[value]}>\n                            {ConditionOperation[value]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseDialogBody, BaseDialogBodyProps} from \"./BaseDialogBody\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ArithmeticOperationType, VariableType} from \"../../../models\"\n\nexport interface AddArithmeticDialogBodyProps extends BaseDialogBodyProps {\n    variables: Variable[]\n}\n\nexport class AddArithmeticDialogBody extends BaseDialogBody<AddArithmeticDialogBodyProps> {\n\n    constructor(props: AddArithmeticDialogBodyProps) {\n        super(props)\n\n        this.state = {\n            variable: \"\",\n            operation: \"\",\n            operator1: \"\",\n            operator2: \"\"\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.variable}\n                    value={this.state.variable}\n                    onChange={this.handleStringChange(\"variable\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.operation}\n                    value={this.state.operation}\n                    onChange={this.handleStringChange(\"operation\")}\n                    margin=\"normal\">\n                    {Object.keys(ArithmeticOperationType).map((value: any) => (\n                        <MenuItem key={value} value={ArithmeticOperationType[value]}>\n                            {ArithmeticOperationType[value]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.firstOperator}\n                    value={this.state.operator1}\n                    onChange={this.handleStringChange(\"operator1\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.secondOperator}\n                    value={this.state.operator2}\n                    onChange={this.handleStringChange(\"operator2\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseDialogBody, BaseDialogBodyProps} from \"./BaseDialogBody\"\nimport {Variable} from \"../../../models/Variable\"\n\nexport interface AddOutputDialogBodyProps extends BaseDialogBodyProps {\n    variables: Variable[]\n}\n\nexport class AddOutputDialogBody extends BaseDialogBody<AddOutputDialogBodyProps> {\n\n    constructor(props: AddOutputDialogBodyProps) {\n        super(props)\n\n        this.state = {\n            variable: \"\"\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.variable}\n                    value={this.state.variable}\n                    onChange={this.handleStringChange(\"variable\")}\n                    margin=\"normal\">\n                    {this.props.variables.map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseDialogBody, BaseDialogBodyProps} from \"./BaseDialogBody\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\n\nexport class AddInputDialogBody extends BaseDialogBody {\n\n    constructor(props: BaseDialogBodyProps) {\n        super(props)\n\n        this.state = {\n            variableName: \"\",\n            variableType: \"\"\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"variable-name-input\"\n                    label={strings.variableName}\n                    value={this.state.variableName}\n                    inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                    onChange={this.handleStringChange(\"variableName\")}\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.dataType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\")}\n                    margin=\"normal\"\n                >\n                    {Object.keys(VariableType).map((key: any) => (\n                        <MenuItem key={key} value={VariableType[key]}>\n                            {VariableType[key]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import React, {Component} from \"react\"\nimport {Dialog, DialogTitle} from \"@material-ui/core\"\nimport {DialogProps} from \"@material-ui/core/Dialog\"\nimport Button from \"@material-ui/core/Button\"\nimport strings from \"../../lang\"\nimport styles from \"./AddNodeDialog.module.css\"\nimport {AddVariableDialogBody} from \"./DialogBody/AddVariableDialogBody\"\nimport {BaseDialogBodyState} from \"./DialogBody/BaseDialogBody\"\nimport {AddWhileDialogBody} from \"./DialogBody/AddWhileDialogBody\"\nimport {Variable} from \"../../models/Variable\"\nimport {FlowType} from \"../../models\"\nimport {AddArithmeticDialogBody} from \"./DialogBody/AddArithmeticDialogBody\"\nimport {AddOutputDialogBody} from \"./DialogBody/AddOutputDialogBody\"\nimport {AddInputDialogBody} from \"./DialogBody/AddInputDialogBody\"\n\nexport interface AddNodeDialogProps extends DialogProps {\n    type: FlowType | null,\n    onSaveClick: (data: BaseDialogBodyState | null) => void,\n    onDismissClick: () => void,\n    variables: Variable[]\n}\n\nexport interface AddNodeDialogState {\n    bodyData: BaseDialogBodyState | null\n}\n\nexport class AddNodeDialog extends Component<AddNodeDialogProps, AddNodeDialogState> {\n    static defaultProps = {\n        variables: []\n    }\n\n    constructor(props: AddNodeDialogProps) {\n        super(props)\n\n        this.state = {\n            bodyData: null\n        }\n    }\n\n    onBodyChanged(data: BaseDialogBodyState) {\n        this.setState({bodyData: data})\n    }\n\n    onSave() {\n        if (this.props.onSaveClick != null)\n            this.props.onSaveClick(this.state.bodyData)\n    }\n\n    onDismiss() {\n        if (this.props.onDismissClick != null)\n            this.props.onDismissClick()\n    }\n\n    getDialogBody() {\n        switch (this.props.type) {\n            case FlowType.WHILE:\n                return (<AddWhileDialogBody variables={this.props.variables}\n                                            onDataChanged={this.onBodyChanged.bind(this)}/>)\n            case FlowType.ARITHMETIC:\n                return (<AddArithmeticDialogBody variables={this.props.variables}\n                                                 onDataChanged={this.onBodyChanged.bind(this)}/>)\n            case FlowType.ASSIGNMENT:\n                return (<AddVariableDialogBody onDataChanged={this.onBodyChanged.bind(this)}/>)\n            case FlowType.INPUT:\n                return (<AddInputDialogBody onDataChanged={this.onBodyChanged.bind(this)}/>)\n            case FlowType.OUTPUT:\n                return (<AddOutputDialogBody variables={this.props.variables}\n                                             onDataChanged={this.onBodyChanged.bind(this)}/>)\n            default:\n                return (<div/>)\n        }\n    }\n\n    renderDialogBody() {\n        return (\n            <div className={styles.addNodeDialogBody}>\n                {this.getDialogBody()}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <Dialog aria-labelledby=\"simple-dialog-title\" {...this.props}>\n                <DialogTitle id=\"simple-dialog-title\">Set Properties</DialogTitle>\n                {this.renderDialogBody()}\n                <div className={styles.addNodeDialogButtonContainer}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.onDismiss.bind(this)}>\n                        {strings.dismiss}\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.onSave.bind(this)}>\n                        {strings.save}\n                    </Button>\n                </div>\n            </Dialog>\n        )\n    }\n}\n","import {BaseFlow} from \"../flows/BaseFlow\"\nimport {Func} from \"../Func\"\nimport {Stack} from \"stack-typescript\"\n\nexport class CodeWriter {\n    static INITIAL_ID = \"INITIAL_ID\"\n    static TERMINATION_ID = \"TERMINATION_ID\"\n\n    static getInstance(): CodeWriter {\n        return this.instance || (this.instance = new this())\n    }\n\n    private static instance: CodeWriter\n\n    flows: Map<string, BaseFlow> = new Map()\n    codes: string[] = []\n    scopeCount = 0\n    private mainFunctionLineIndex = 0\n    private spacing = \"\\t\"\n    private variableSet: Set<string> = new Set()\n    private loopStack: Stack<string> = new Stack()\n\n    private constructor() {\n        this.loopStack.push(CodeWriter.TERMINATION_ID)\n    }\n\n    reset() {\n        this.flows.clear()\n        this.variableSet.clear()\n        this.codes = []\n        this.scopeCount = 0\n        this.mainFunctionLineIndex = 0\n        this.loopStack = new Stack()\n        this.loopStack.push(CodeWriter.TERMINATION_ID)\n    }\n\n    setFlows(flows: Map<string, BaseFlow>) {\n        console.log(flows)\n        this.flows = flows\n    }\n\n    writeLineToMainFunction(line: string) {\n        this.codes.splice(this.mainFunctionLineIndex, 0, this.createSpacing() + line)\n        this.mainFunctionLineIndex++\n    }\n\n    writeLine(line: string) {\n        this.codes.push(this.createSpacing() + line)\n    }\n\n    appendToLastLine(str: string) {\n        const lastIndex = this.codes.length - 1\n        let last = this.codes[lastIndex]\n        last += str\n        this.codes[lastIndex] = last\n    }\n\n    generateMain() {\n        this.writeLineToMainFunction(`fun main(args: Array<String\\>) {`)\n        this.scopeCount++\n\n        const initialFlow = this.flows.get(CodeWriter.INITIAL_ID)\n        if (initialFlow !== undefined) {\n            initialFlow.createMainCode()\n        } else {\n            console.log(\"No initial defined please define it with \" + CodeWriter.INITIAL_ID + \"!\")\n        }\n\n        this.scopeCount--\n        this.writeLineToMainFunction(\"}\")\n        this.writeLineToMainFunction(\"\")\n    }\n\n    writeFunction(func: Func) {\n        let returnTypeString = \"\"\n        if (func.returnType === undefined) {\n            returnTypeString += \"\"\n        } else {\n            returnTypeString += \": \" + func.returnType\n        }\n\n        let parameterString = \"\"\n\n        func.parameters.forEach((value, index) => {\n            parameterString += `${value.name}: ${value.type}`\n            if (index !== func.parameters.length - 1) {\n                parameterString += \", \"\n            }\n        })\n\n        this.writeLine(`fun ${func.functionName}(${parameterString})${returnTypeString}`)\n        this.appendToLastLine(\" {\")\n        this.scopeCount++\n\n        func.codeLines.forEach((value) => {\n                this.writeLine(value)\n            }\n        )\n\n        this.scopeCount--\n        this.writeLine(\"}\")\n        this.writeLine(\"\")\n    }\n\n    writeMainCodeFromFlow(id: string) {\n        const top = this.loopStack.top\n\n        if (!this.removeFromStackIfEquals(id)) {\n            const flow = this.flows.get(id)\n            if (flow !== undefined) {\n                console.log(\"Code for id \" + id + \" is being created!\")\n                return flow.createMainCode()\n            }\n\n            console.log(\"Something went horribly wrong!\")\n        } else {\n            console.log(\"Top with id \" + top + \" is popped!\")\n        }\n    }\n\n    /**\n     * Returns false if the set already contains variable true otherwise\n     */\n\n    addVariable(name: string | undefined): boolean {\n        name = name === undefined ? \"\" : name\n\n        if (this.variableSet.has(name)) {\n            return false\n        }\n\n        this.variableSet.add(name)\n        return true\n    }\n\n    addToLoopStack(id: string) {\n        console.log(\"Pushed to stack \" + id + \"!\")\n        this.loopStack.push(id)\n    }\n\n    /**\n     * Returns true if top equals index and pops it returns false otherwise.\n     */\n    removeFromStackIfEquals(id: string): boolean {\n        if (this.loopStack.top === id) {\n            this.loopStack.pop()\n            return true\n        }\n\n        return false\n    }\n\n    private createSpacing(): string {\n        let spacing = \"\"\n        for (let i = 0; i < this.scopeCount; i++) {\n            spacing += this.spacing\n        }\n\n        return spacing\n    }\n\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType, VariableType} from \"../../models\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class AssignmentFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: AssignmentFlowContent | null\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: AssignmentFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        let contentString = \"\"\n        switch (this.content.variable.type) {\n            case VariableType.INT:\n                contentString = this.content.variable.value.toString()\n                break\n            case VariableType.STRING:\n                contentString = `\"${this.content.variable.value}\"`\n                break\n            default:\n                console.log(\"default...\")\n                break\n        }\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(this.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(`${variableSetCode}${this.content.variable.name} = ${contentString}`)\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `assignmentFlow${this.id}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class AssignmentFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {ArithmeticOperationType, FlowType, VariableType} from \"../../models\"\nimport {Func, Parameter} from \"../Func\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class ArithmeticFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: ArithmeticFlowContent | null\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: ArithmeticFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        let variableSetCode = \"\"\n\n        if (CodeWriter.getInstance().addVariable(this.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${this.content.variable.name} = ${this.functionInvocation()}`\n        )\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n        if (this.content == null)\n            return\n\n        const functionLines: string[] = []\n\n        const parameters: Parameter[] = []\n\n        if (this.content.operator1.type === OperatorType.VARIABLE) {\n            if (this.content.operator1.variableName != null) {\n                parameters.push(new Parameter(\n                    this.content.operator1.variableName,\n                    VariableType.INT.toString()))\n            }\n        }\n\n        if (this.content.operator2.type === OperatorType.VARIABLE) {\n            if (this.content.operator2.variableName != null) {\n                parameters.push(new Parameter(\n                    this.content.operator2.variableName,\n                    VariableType.INT.toString()))\n            }\n        }\n\n        let operationCode = \"\"\n        switch (this.content.operation) {\n            case ArithmeticOperationType.ADDITION:\n                operationCode = \"+\"\n                break\n            case ArithmeticOperationType.SUBTRACTION:\n                operationCode = \"-\"\n                break\n            case ArithmeticOperationType.MULTIPLICATION:\n                operationCode = \"*\"\n                break\n            case ArithmeticOperationType.DIVISION:\n                operationCode = \"/\"\n                break\n        }\n\n        let operator1Code = \"\"\n        let operator2Code = \"\"\n\n        switch (this.content.operator1.type) {\n            case OperatorType.CONSTANT:\n                operator1Code += this.content.operator1.constantValue\n                break\n            case OperatorType.VARIABLE:\n                operator1Code += this.content.operator1.variableName\n                break\n        }\n\n        switch (this.content.operator2.type) {\n            case OperatorType.CONSTANT:\n                operator2Code += this.content.operator2.constantValue\n                break\n            case OperatorType.VARIABLE:\n                operator2Code += this.content.operator2.variableName\n                break\n        }\n\n        functionLines.push(`return ${operator1Code} ${operationCode} ${operator2Code}`)\n\n        const func = new Func(\n            this.functionName(),\n            parameters,\n            VariableType.INT.toString(),\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n\n    }\n\n    functionInvocation(): string {\n        if (this.content == null)\n            return \"\"\n\n        let functionCode = `${this.functionName()}(`\n\n        switch (this.content.operator1.type) {\n            case OperatorType.CONSTANT:\n                break\n            case OperatorType.VARIABLE:\n                functionCode += this.content.operator1.variableName\n                break\n        }\n\n        switch (this.content.operator2.type) {\n            case OperatorType.CONSTANT:\n                break\n            case OperatorType.VARIABLE:\n                functionCode += `, ${this.content.operator2.variableName}`\n                break\n        }\n\n        functionCode += \")\"\n        return functionCode\n    }\n\n    functionName(): string {\n        return `arithmeticFlow${this.id}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class ArithmeticFlowContent {\n    variable: Variable\n    operation: ArithmeticOperationType\n    operator1: Operator\n    operator2: Operator\n\n    constructor(\n        variable: Variable,\n        operation: ArithmeticOperationType,\n        operator1: Operator,\n        operator2: Operator,\n    ) {\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n    }\n}\n\nexport class Operator {\n    type: OperatorType\n    variableName: string | undefined\n    constantValue: number\n\n    constructor(\n        type: OperatorType,\n        name: string | undefined,\n        value: number\n    ) {\n        this.type = type\n        this.variableName = name\n        this.constantValue = value\n    }\n}\n\nexport enum OperatorType {\n    CONSTANT = \"Constant\",\n    VARIABLE = \"Variable\"\n}\n","export class Func {\n    functionName: string\n    parameters: Parameter[]\n    returnType: string | undefined\n    codeLines: string[]\n\n    constructor(\n        functionName: string,\n        parameters: Parameter[],\n        returnType: string | undefined,\n        codeLines: string[]\n    ) {\n        this.functionName = functionName\n        this.parameters = parameters\n        this.returnType = returnType\n        this.codeLines = codeLines\n    }\n}\n\nexport class Parameter {\n    name: string\n    type: string\n\n    constructor(\n        name: string,\n        type: string\n    ) {\n        this.name = name;\n        this.type = type\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType, VariableType} from \"../../models/VariableEnums\"\nimport {Func, Parameter} from \"../Func\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class InputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: InputFlowContent | null\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: InputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `var ${this.content.variable.name} = ${this.functionInvocation()}`\n        )\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n        if (this.content == null)\n            return\n\n        const functionLines: string[] = []\n        functionLines.push(`println(\"Please enter value for ${this.content.variable.name}\")`)\n\n        let scanCode = \"\"\n        switch (this.content.variable.type) {\n            case VariableType.INT:\n                scanCode = \"readLine()!!.toInt()\"\n                break\n            case VariableType.STRING:\n                scanCode = \"readLine()\"\n                break\n            default:\n                break\n        }\n\n        functionLines.push(`return ${scanCode}`)\n\n        const parameters: Parameter[] = []\n\n        const func = new Func(\n            this.functionName(),\n            parameters,\n            this.content.variable.type.toString(),\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `inputFlow${this.id}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class InputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {Func, Parameter} from \"../Func\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\nimport {FlowType} from \"../../models\"\n\nexport class OutputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: OutputFlowContent | null\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: OutputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n    }\n\n    createMainCode(): void {\n        CodeWriter.getInstance().writeLineToMainFunction(this.functionInvocation())\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n        if (this.content == null || this.content.variable.name === undefined)\n            return\n\n        const functionLines: string[] = []\n        const parameters: Parameter[] = [\n            new Parameter(\n                this.content.variable.name,\n                this.content.variable.type.toString()\n            )\n        ]\n\n        const func = new Func(\n            this.functionName(),\n            parameters,\n            undefined,\n            functionLines\n        )\n\n        functionLines.push(`println(\"Value of ${this.content.variable.name} is \\${${this.content.variable.name}})\")`)\n        CodeWriter.getInstance().writeFunction(func)\n\n    }\n\n    functionInvocation(): string {\n        return this.content != null ? `${this.functionName()}(${this.content.variable.name})` : \"\"\n    }\n\n    functionName(): string {\n        return `outputFlow${this.id}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class OutputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Condition} from \"../../models/Condition\"\nimport {ConditionOperation, FlowType} from \"../../models/VariableEnums\"\n\nexport class WhileFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: WhileFlowContent | null\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: WhileFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n    }\n\n    createFunctionCode(): void {\n        //\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        const nextScopeId = this.content.scopeId\n\n        let conditionCode = \"\"\n        this.content.conditions.forEach((condition) => {\n            conditionCode += condition.first.name\n\n            if (condition.second !== null) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                }\n\n                conditionCode += \" \" + condition.second.name\n            }\n        })\n\n        CodeWriter.getInstance().writeLineToMainFunction(\"while(\" + conditionCode + \") {\")\n        CodeWriter.getInstance().scopeCount++\n\n        if (nextScopeId != null) {\n            CodeWriter.getInstance().addToLoopStack(this.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(nextScopeId)\n        }\n\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    functionInvocation(): string {\n        return \"\"\n    }\n\n    functionName(): string {\n        return \"\"\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n}\n\nexport class WhileFlowContent {\n    conditions: Condition[]\n    scopeId: string | null\n\n    constructor(\n        conditions: Condition[],\n        scopeId: string | null,\n    ) {\n        this.conditions = conditions\n        this.scopeId = scopeId\n    }\n\n}\n","import {CodeWriter} from \"./code/CodeWriter\";\nimport {BaseFlow} from \"./flows/BaseFlow\";\nimport {FlowModel} from \"./FlowModelJSON\";\nimport {AssignmentFlow} from \"./flows/AssignmentFlow\";\nimport {InputFlow} from \"./flows/InputFlow\";\nimport {OutputFlow} from \"./flows/OutputFlow\";\nimport {ArithmeticFlow} from \"./flows/ArithmeticFlow\";\nimport {WhileFlow} from \"./flows/WhileFlow\";\nimport {FlowType} from \"../models\";\n\nexport class CodeGenerator {\n\n    private readonly flowJson: string\n\n    constructor(flowJson: string) {\n        this.flowJson = flowJson\n    }\n\n    generate(): string {\n        CodeWriter.getInstance().reset()\n        CodeWriter.getInstance().setFlows(this.convertToFlowObjects(JSON.parse(this.flowJson)))\n\n        CodeWriter.getInstance().flows.forEach((value) => {\n            console.log(\"Creating function code\")\n            value.createFunctionCode()\n        })\n\n        CodeWriter.getInstance().generateMain()\n\n        return CodeWriter.getInstance().codes.join(\"\\n\")\n    }\n\n    private convertToFlowObjects(flowModels: FlowModel[]): Map<string, BaseFlow> {\n        const baseFlowMap = new Map<string, BaseFlow>()\n\n        flowModels.forEach((value) => {\n\n                switch (value.type) {\n                    case FlowType.ASSIGNMENT:\n                        baseFlowMap.set(value.id, new AssignmentFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.assignmentFlowContent\n                        ))\n                        break\n                    case FlowType.INPUT:\n                        baseFlowMap.set(value.id, new InputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.inputFlowContent\n                        ))\n                        break\n                    case FlowType.OUTPUT:\n                        baseFlowMap.set(value.id, new OutputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.outputFlowContent\n                        ))\n                        break\n                    case FlowType.ARITHMETIC:\n                        baseFlowMap.set(value.id, new ArithmeticFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.arithmeticFlowContent\n                        ))\n                        break\n                    case FlowType.WHILE:\n                        baseFlowMap.set(value.id, new WhileFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.whileFlowContent\n                        ))\n                        break\n                    /*\n                    case \"if\":\n                        baseFlowList.push(new IfFlow(\n                            value.id,\n                            value.type,\n                            value.ifFlowContent\n                        ))\n                        break\n                    case \"for\":\n                        baseFlowList.push(new ForFlow(\n                            value.id,\n                            value.type,\n                            value.forFlowContent\n                        ))\n                        break\n                     */\n\n                    default :\n                        break\n\n                }\n            }\n        )\n\n        return baseFlowMap\n    }\n}\n","import {RectangleNodeWithInfoModel} from \"../BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoModel\"\nimport strings from \"../../../../lang\"\nimport {NodeColors} from \"../../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Condition} from \"../../../../models/Condition\"\nimport {RectangleNodeModel} from \"../BaseNodes/RectangleNode/RectangleNodeModel\"\nimport {DefaultPortType} from \"../../Ports/DefaultPort\"\n\nexport class WhileNodeModel extends RectangleNodeWithInfoModel {\n    conditionList: Condition[] = []\n\n    constructor() {\n        super(strings.while, NodeColors.WHILE)\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addLoopPort(strings.loop).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n        this.addScopePort(strings.scope).setMaximumLinks(1)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.conditionList = object.conditionList\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            conditionList: this.conditionList\n        })\n    }\n\n    getScopeFlow(): RectangleNodeModel | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as RectangleNodeModel\n        } else {\n            return null\n        }\n    }\n}\n","import {VariableType} from \"./VariableEnums\";\n\nexport class Variable {\n\n    name: string | undefined\n    type: VariableType\n    value: any\n\n    constructor(name: string | undefined,\n                type: VariableType,\n                value: any) {\n        this.name = name\n        this.type = type\n        this.value = value\n    }\n\n}\n","import {ConditionOperation, VariableType} from \"./VariableEnums\"\nimport {Variable} from \"./Variable\"\nimport {Random} from \"../utils\"\n\nexport class Condition {\n    id: string = Random.UID()\n    variableType: VariableType\n    first: Variable\n    second: Variable\n    operation: ConditionOperation\n\n    constructor(\n        variableType: VariableType,\n        first: Variable,\n        second: Variable,\n        operation: ConditionOperation\n    ) {\n        this.variableType = variableType\n        this.first = first\n        this.second = second\n        this.operation = operation\n    }\n\n}\n","import strings from \"../../../../lang\"\nimport {NodeColors} from \"../../../../config\"\nimport {RectangleNodeModel} from \"../BaseNodes/RectangleNode/RectangleNodeModel\"\n\nexport class InitialNodeModel extends RectangleNodeModel {\n\n    constructor() {\n        super(strings.initialFlow, NodeColors.INITIAL)\n\n        this.addLoopPort(strings.recurse).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    // Prevent removing this item\n    remove(): void {\n        return\n    }\n}\n","import {RectangleNodeWithInfoModel} from \"../BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoModel\"\nimport strings from \"../../../../lang\"\nimport {NodeColors} from \"../../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport {Variable} from \"../../../../models/Variable\"\nimport {ArithmeticOperationType} from \"../../../../models\"\nimport {Operator} from \"../../../../generator/flows/ArithmeticFlow\"\nimport * as _ from \"lodash\"\n\nexport class ArithmeticNodeModel extends RectangleNodeWithInfoModel {\n    variable: Variable\n    operation: ArithmeticOperationType\n    operator1: Operator\n    operator2: Operator\n\n    constructor(variable: Variable, operation: ArithmeticOperationType, operator1: Operator, operator2: Operator) {\n        super(strings.arithmetic, NodeColors.ARITHMETIC)\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n        this.operation = object.operation\n        this.operator1 = object.operator1\n        this.operator2 = object.operator2\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable,\n            operation: this.operation,\n            operator1: this.operator1,\n            operator2: this.operator2\n        })\n    }\n}\n","import {RectangleNodeWithInfoModel} from \"../BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoModel\"\nimport strings from \"../../../../lang\"\nimport {NodeColors} from \"../../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Variable} from \"../../../../models/Variable\"\n\nexport class InputNodeModel extends RectangleNodeWithInfoModel {\n    variable: Variable\n\n    constructor(variable: Variable) {\n        super(strings.input, NodeColors.IF)\n\n        this.variable = variable\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n}\n","import {RectangleNodeWithInfoModel} from \"../BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoModel\"\nimport strings from \"../../../../lang\"\nimport {NodeColors} from \"../../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Variable} from \"../../../../models/Variable\"\n\nexport class OutputNodeModel extends RectangleNodeWithInfoModel {\n    variable: Variable\n\n    constructor(variable: Variable) {\n        super(strings.output, NodeColors.IF)\n\n        this.variable = variable\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n}\n","import {ArithmeticFlowContent} from \"./flows/ArithmeticFlow\"\nimport {OutputFlowContent} from \"./flows/OutputFlow\"\nimport {InputFlowContent} from \"./flows/InputFlow\"\nimport {AssignmentFlowContent} from \"./flows/AssignmentFlow\"\nimport {WhileFlowContent} from \"./flows/WhileFlow\"\nimport {FlowType} from \"../models\"\n\nexport class FlowModel {\n    type: FlowType\n    id: string\n    assignmentFlowContent: AssignmentFlowContent | null\n    inputFlowContent: InputFlowContent | null\n    outputFlowContent: OutputFlowContent | null\n    arithmeticFlowContent: ArithmeticFlowContent | null\n    whileFlowContent: WhileFlowContent | null\n    // forFlowContent: ForFlowContent,\n    // ifFlowContent: IfFlowContent,\n    nextFlowId: string | null\n\n    constructor(\n        type: FlowType,\n        id: string,\n        assignmentFlowContent: AssignmentFlowContent | null = null,\n        inputFlowContent: InputFlowContent | null = null,\n        outputFlowContent: OutputFlowContent | null = null,\n        arithmeticFlowContent: ArithmeticFlowContent | null = null,\n        whileFlowContent: WhileFlowContent | null = null,\n        nextFlowId: string | null\n        // forFlowContent: ForFlowContent,\n        // ifFlowContent: IfFlowContent,\n\n    ) {\n        this.type = type\n        this.id = id\n        this.assignmentFlowContent = assignmentFlowContent\n        this.inputFlowContent = inputFlowContent\n        this.outputFlowContent = outputFlowContent\n        this.arithmeticFlowContent = arithmeticFlowContent\n        this.whileFlowContent = whileFlowContent\n        this.nextFlowId = nextFlowId\n    }\n}\n","import React, {Component} from \"react\"\nimport styles from \"./Editor.module.css\"\nimport * as _ from \"lodash\"\nimport {ReflexContainer, ReflexElement, ReflexSplitter} from \"react-reflex\"\n    import {BaseEvent, BaseModel, DefaultNodeModel, DiagramEngine, DiagramModel, DiagramWidget} from \"nberktumer-react-diagrams\"\nimport {ShapePanel} from \"../../components/ShapePanel/ShapePanel\"\nimport {ShapeItem} from \"../../components/ShapePanel/ShapeItem\"\nimport {CodePreviewPanel} from \"../../components/CodePreviewPanel/CodePreviewPanel\"\nimport {FlowType, ProgrammingLanguage} from \"../../models\"\nimport {ProjectTreePanel} from \"../../components/ProjectTreePanel/ProjectTreePanel\"\nimport {PortFactory} from \"../../components/CanvasItems/Ports/PortFactory\"\nimport {RectangleNodeFactory} from \"../../components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeFactory\"\nimport {RectangleNodeWithInfoFactory} from \"../../components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeWithInfo/RectangleNodeWithInfoFactory\"\nimport {VariableNodeModel} from \"../../components/CanvasItems/Nodes/VariableNode/VariableNodeModel\"\nimport {AddNodeDialog} from \"../../components/AddNodeDialog/AddNodeDialog\"\nimport {BaseDialogBodyState} from \"../../components/AddNodeDialog/DialogBody/BaseDialogBody\"\nimport {CodeGenerator} from \"../../generator/CodeGenerator\"\nimport {\n    DefaultPort,\n    DefaultPortLocation,\n    DefaultPortModel,\n    DefaultPortType\n} from \"../../components/CanvasItems/Ports/DefaultPort\"\nimport {WhileNodeModel} from \"../../components/CanvasItems/Nodes/WhileNode/WhileNodeModel\"\nimport {Variable} from \"../../models/Variable\"\nimport {Condition} from \"../../models/Condition\"\nimport {InitialNodeModel} from \"../../components/CanvasItems/Nodes/InitialNode/InitialNodeModel\"\nimport {ArithmeticNodeModel} from \"../../components/CanvasItems/Nodes/ArithmeticNode/ArithmeticNodeModel\"\nimport {ArithmeticFlowContent, Operator, OperatorType} from \"../../generator/flows/ArithmeticFlow\"\nimport {InputNodeModel} from \"../../components/CanvasItems/Nodes/InputNode/InputNodeModel\"\nimport {OutputNodeModel} from \"../../components/CanvasItems/Nodes/OutputNode/OutputNodeModel\"\nimport {FlowModel} from \"../../generator/FlowModelJSON\"\nimport {AssignmentFlowContent} from \"../../generator/flows/AssignmentFlow\"\nimport {InputFlowContent} from \"../../generator/flows/InputFlow\"\nimport {OutputFlowContent} from \"../../generator/flows/OutputFlow\"\nimport {WhileFlowContent} from \"../../generator/flows/WhileFlow\"\nimport {RectangleNodeModel} from \"../../components/CanvasItems/Nodes/BaseNodes/RectangleNode/RectangleNodeModel\"\n\nexport interface IEditorProps {\n}\n\nexport interface IEditorState {\n    height: string | undefined,\n    width: string | undefined,\n    selectedStr: string,\n    isModalOpen: boolean,\n    newOperation: FlowType | null,\n    newItemPosition: { x: number, y: number },\n    generatedCode: string,\n    variableList: Variable[]\n}\n\nexport default class Editor extends Component<IEditorProps, IEditorState> {\n    private readonly activeModel: DiagramModel\n    private readonly diagramEngine: DiagramEngine\n    private readonly selected: string[] = []\n    private readonly initialNode: InitialNodeModel\n\n    constructor(props: any) {\n        super(props)\n\n        this.diagramEngine = new DiagramEngine()\n        this.diagramEngine.installDefaultFactories()\n\n        this.diagramEngine.registerNodeFactory(new RectangleNodeFactory())\n        this.diagramEngine.registerNodeFactory(new RectangleNodeWithInfoFactory())\n        this.diagramEngine.registerPortFactory(new PortFactory(\"default\", () => new DefaultPortModel(\n            new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), \"unknown\")))\n\n        this.activeModel = new DiagramModel()\n        this.diagramEngine.setDiagramModel(this.activeModel)\n\n        _.forEach(this.activeModel.getNodes(), (item) => {\n            item.addListener({\n                selectionChanged: this.addItemListener.bind(this)\n            })\n        })\n\n        this.initialNode = new InitialNodeModel()\n        this.initialNode.addListener({\n            selectionChanged: this.addItemListener.bind(this),\n            entityRemoved: this.removeItemListener.bind(this)\n        })\n\n        const generator = new CodeGenerator(\"[]\")\n\n        this.diagramEngine.getDiagramModel().addNode(this.initialNode)\n\n        this.state = {\n            height: \"1px\",\n            width: \"1px\",\n            selectedStr: \"Nothing is selected!\",\n            isModalOpen: false,\n            newOperation: null,\n            newItemPosition: {x: 0, y: 0},\n            generatedCode: generator.generate(),\n            variableList: []\n        }\n    }\n\n    onDrop(event: any): void {\n        const data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"))\n\n        if (!Object.values(FlowType).includes(data.type))\n            return\n\n        const points = this.diagramEngine.getRelativeMousePoint(event)\n\n        this.setState({\n            isModalOpen: true,\n            newOperation: data.type,\n            newItemPosition: points\n        })\n    }\n\n    addItem(data: BaseDialogBodyState): void {\n        let node = null\n\n        switch (this.state.newOperation) {\n            case FlowType.ASSIGNMENT: {\n                if (data.variableName === \"\" || data.variableType === \"\" || data.value === \"\")\n                    return\n\n                // data.isNull\n                const variable = new Variable(data.variableName, data.variableType, data.value)\n\n                node = new VariableNodeModel(variable)\n                node.addOnLinkChangedListener(() => this.onLinkChanged())\n                node.info = data.variableName + \" = \" + data.value\n\n                // Add the new variable to the variable list\n                this.state.variableList.push(variable)\n\n                break\n            }\n            case FlowType.ARITHMETIC: {\n                if (data.variable === \"\" || data.operation === \"\" || data.operator1 === \"\" || data.operator2 === \"\")\n                    return\n\n                const var1 = JSON.parse(data.operator1) as Variable\n                const var2 = JSON.parse(data.operator2) as Variable\n\n                const op1 = new Operator(OperatorType.VARIABLE, var1.name, var1.value)\n                const op2 = new Operator(OperatorType.VARIABLE, var2.name, var2.value)\n\n                node = new ArithmeticNodeModel(\n                    JSON.parse(data.variable),\n                    data.operation,\n                    op1,\n                    op2\n                )\n                node.addOnLinkChangedListener(() => this.onLinkChanged())\n                node.info = data.operation\n                break\n            }\n            case FlowType.WHILE: {\n                if (data.variableType === \"\" || data.first === \"\" || data.second === \"\" || data.operation === \"\")\n                    return\n\n                const condition = new Condition(data.variableType, JSON.parse(data.first), JSON.parse(data.second), data.operation)\n\n                node = new WhileNodeModel()\n                node.addOnLinkChangedListener(() => this.onLinkChanged())\n                node.conditionList.push(condition)\n                node.info = condition.first.name + \" \" + condition.operation + \" \" + condition.second.name\n                break\n            }\n            case FlowType.INPUT: {\n                if (data.variableName === \"\" || data.variableType === \"\")\n                    return\n\n                const variable = new Variable(data.variableName, data.variableType, null)\n\n                node = new InputNodeModel(variable)\n                node.addOnLinkChangedListener(() => this.onLinkChanged())\n                node.info = data.variableName\n\n                // Add the new variable to the variable list\n                this.state.variableList.push(variable)\n                break\n            }\n            case FlowType.OUTPUT: {\n                if (data.variable === \"\")\n                    return\n\n                node = new OutputNodeModel(JSON.parse(data.variable))\n                node.addOnLinkChangedListener(() => this.onLinkChanged())\n                node.info = node.variable.name === undefined ? \"\" : node.variable.name\n                break\n            }\n            default:\n                return\n        }\n\n        node.x = this.state.newItemPosition.x\n        node.y = this.state.newItemPosition.y\n\n        node.addListener({\n            selectionChanged: this.addItemListener.bind(this),\n            entityRemoved: this.removeItemListener.bind(this)\n        })\n\n        this.diagramEngine.getDiagramModel().addNode(node)\n        this.forceUpdate()\n    }\n\n    onModalSaveClick(data: BaseDialogBodyState | null) {\n        this.onModalClose()\n        if (data != null)\n            this.addItem(data)\n    }\n\n    onModalDismissClick() {\n        this.onModalClose()\n    }\n\n    onModalClose() {\n        this.setState({\n            isModalOpen: false,\n            newOperation: null\n        })\n    }\n\n    onLinkChanged() {\n        const currentFlow = this.initialNode.getNextFlow()\n        // clear the code preview and return if the initial node link has deleted\n        if (currentFlow == null) {\n            const generator = new CodeGenerator(\"[]\")\n            this.setState({generatedCode: generator.generate()})\n        } else {\n            const flowModelList: FlowModel[] = []\n            this.generateFlowModel(currentFlow, flowModelList, 0)\n\n            const generator = new CodeGenerator(JSON.stringify(flowModelList))\n            this.setState({generatedCode: generator.generate()})\n        }\n    }\n\n    render() {\n        return (\n            <div className={styles.App}>\n                <AddNodeDialog onSaveClick={this.onModalSaveClick.bind(this)}\n                               onDismissClick={this.onModalDismissClick.bind(this)}\n                               onClose={this.onModalClose.bind(this)}\n                               aria-labelledby=\"simple-dialog-title\"\n                               variables={this.state.variableList}\n                               open={this.state.isModalOpen}\n                               type={this.state.newOperation}/>\n\n                <ReflexContainer orientation=\"vertical\">\n                    <ReflexElement minSize={250}>\n                        <ReflexContainer orientation=\"horizontal\" style={{height: \"100vh\"}}>\n                            <ReflexElement className=\"left-pane\" flex={0.35} minSize={200}>\n                                <div style={{width: \"100%\", height: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                                    <ProjectTreePanel/>\n                                </div>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement className=\"left-pane\" minSize={200}>\n                                <ShapePanel>\n                                    {Object.values(FlowType).map((value) => (\n                                        <ShapeItem key={value} model={{type: value}} name={value}/>\n                                    ))}\n                                </ShapePanel>\n                            </ReflexElement>\n                        </ReflexContainer>\n                    </ReflexElement>\n\n                    <ReflexSplitter/>\n\n                    <ReflexElement className=\"middle-pane\" flex={0.55} minSize={250}>\n                        <div className={styles.paneContent}>\n                            <div\n                                className={styles.diagramLayer}\n                                onDrop={(event) => this.onDrop(event)}\n                                onDragOver={(event) => event.preventDefault()}>\n\n                                <DiagramWidget\n                                    maxNumberPointsPerLink={0}\n                                    allowLooseLinks={false}\n                                    className={styles.srdDemoCanvas}\n                                    diagramEngine={this.diagramEngine}/>\n                            </div>\n                        </div>\n                    </ReflexElement>\n\n                    <ReflexSplitter/>\n\n                    <ReflexElement minSize={250}>\n                        <ReflexContainer orientation=\"horizontal\" style={{height: \"100vh\"}}>\n                            <ReflexElement className=\"right-pane\" flex={0.5} minSize={200}>\n                                <div\n                                    style={{\n                                        width: \"100%\",\n                                        height: \"100%\",\n                                        backgroundColor: \"#1d1f21\",\n                                        color: \"white\"\n                                    }}>\n                                    {this.state.selectedStr}\n                                </div>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement className=\"right-pane\" minSize={100}>\n                                <CodePreviewPanel code={this.state.generatedCode}\n                                                  language={ProgrammingLanguage.TYPESCRIPT}/>\n                            </ReflexElement>\n                        </ReflexContainer>\n                    </ReflexElement>\n                </ReflexContainer>\n            </div>\n        )\n    }\n\n    private generateFlowModel(currentFlow: RectangleNodeModel | null, flowModelList: FlowModel[], depth: number, scopeId: string | null = null) {\n        if (currentFlow == null || (scopeId != null && currentFlow.getID() === scopeId))\n            return\n\n        let flowModel\n        const currentFlowId = depth === 0 ? \"INITIAL_ID\" : currentFlow.getID()\n        const nextFlow = currentFlow.getNextFlow()\n        const nextFlowId = nextFlow == null ? null : nextFlow.getID()\n\n        switch (currentFlow.constructor) {\n            case VariableNodeModel: {\n                const nodeModel = currentFlow as VariableNodeModel\n                flowModel = new FlowModel(\n                    FlowType.ASSIGNMENT,\n                    currentFlowId,\n                    new AssignmentFlowContent(nodeModel.variable),\n                    null,\n                    null,\n                    null,\n                    null,\n                    nextFlowId\n                )\n                break\n            }\n            case ArithmeticNodeModel: {\n                const nodeModel = currentFlow as ArithmeticNodeModel\n                flowModel = new FlowModel(\n                    FlowType.ARITHMETIC,\n                    currentFlowId,\n                    null,\n                    null,\n                    null,\n                    new ArithmeticFlowContent(\n                        nodeModel.variable,\n                        nodeModel.operation,\n                        nodeModel.operator1,\n                        nodeModel.operator2\n                    ),\n                    null,\n                    nextFlowId\n                )\n                break\n            }\n            case WhileNodeModel: {\n                const nodeModel = currentFlow as WhileNodeModel\n                const scopeFlow = nodeModel.getScopeFlow()\n\n                this.generateFlowModel(scopeFlow, flowModelList, depth++, nodeModel.getID())\n\n                flowModel = new FlowModel(\n                    FlowType.WHILE,\n                    currentFlowId,\n                    null,\n                    null,\n                    null,\n                    null,\n                    new WhileFlowContent(\n                        nodeModel.conditionList,\n                        scopeFlow == null ? null : scopeFlow.getID()\n                    ),\n                    nextFlowId\n                )\n                break\n            }\n            case InputNodeModel: {\n                const nodeModel = currentFlow as InputNodeModel\n                flowModel = new FlowModel(\n                    FlowType.INPUT,\n                    currentFlowId,\n                    null,\n                    new InputFlowContent(nodeModel.variable),\n                    null,\n                    null,\n                    null,\n                    nextFlowId\n                )\n                break\n            }\n            case OutputNodeModel: {\n                const nodeModel = currentFlow as OutputNodeModel\n                flowModel = new FlowModel(\n                    FlowType.OUTPUT,\n                    currentFlowId,\n                    null,\n                    null,\n                    new OutputFlowContent(nodeModel.variable),\n                    null,\n                    null,\n                    nextFlowId\n                )\n                break\n            }\n            default:\n                break\n        }\n\n        if (flowModel !== undefined)\n            flowModelList.push(flowModel)\n        this.generateFlowModel(currentFlow.getNextFlow(), flowModelList, depth + 1, scopeId)\n    }\n\n    private addItemListener(item: any) {\n        if (item.isSelected && this.selected.indexOf((item.entity as DefaultNodeModel).name) === -1) {\n            this.selected.push((item.entity as DefaultNodeModel).name)\n            this.setState({\n                selectedStr: this.selected.join(\", \") +\n                    (this.selected.length === 1 ? \" is \" : \" are \") + \"selected.\"\n            })\n        } else if (!item.isSelected) {\n            const index = this.selected.indexOf((item.entity as DefaultNodeModel).name)\n            this.selected.splice(index, 1)\n\n            if (this.selected.length === 0) {\n                this.setState({selectedStr: \"Nothing is selected!\"})\n            } else {\n                this.setState({\n                    selectedStr: this.selected.join(\", \") +\n                        (this.selected.length === 1 ? \" is \" : \" are \") + \"selected.\"\n                })\n            }\n        }\n    }\n\n    private removeItemListener(event: BaseEvent<BaseModel>) {\n        if (event.entity instanceof VariableNodeModel || event.entity instanceof InputNodeModel) {\n            const newVariableList = this.state.variableList.filter((value) => {\n                return value.name !== (event.entity as VariableNodeModel).variable.name\n            })\n\n            this.setState({variableList: newVariableList})\n        }\n\n        const index = this.selected.indexOf((event.entity as DefaultNodeModel).name)\n        this.selected.splice(index, 1)\n\n        if (this.selected.length === 0) {\n            this.setState({selectedStr: \"Nothing is selected!\"})\n        } else {\n            this.setState({\n                selectedStr: this.selected.join(\", \") +\n                    (this.selected.length === 1 ? \" is \" : \" are \") + \"selected.\"\n            })\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            )\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {Editor} from \"./pages\"\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\nimport \"./index.css\"\nimport \"nberktumer-react-diagrams/dist/style.min.css\"\nimport \"react-reflex/styles.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render((\n    <Router>\n        <div>\n            <Route path=\"/\" component={Editor} exact/>\n        </div>\n    </Router>\n), document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Editor_App__3tFom\",\"paneContent\":\"Editor_paneContent__eMkRK\",\"diagramLayer\":\"Editor_diagramLayer__3EbQu\",\"srdDemoCanvas\":\"Editor_srdDemoCanvas__1q77O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tray\":\"ShapePanel_tray__HYIa9\",\"trayItem\":\"ShapePanel_trayItem__24yED\"};"],"sourceRoot":""}