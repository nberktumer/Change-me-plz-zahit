{"version":3,"sources":["components/AddNodeDialog/AddNodeDialog.module.css","components/CanvasPanel/CanvasPanel.module.css","components/CanvasItems/Nodes/BaseFlow/BaseFlow.module.css","components/ShapePanel/ShapePanel.tsx","components/ShapePanel/ShapeItem.tsx","models/ProgrammingLanguage.tsx","models/VariableEnums.tsx","config/Defaults.tsx","config/NodeColors.tsx","config/Rules.tsx","components/CodePreviewPanel/CodePreviewPanel.tsx","components/ProjectTreePanel/ProjectTreePanel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLocation.tsx","lang/index.tsx","lang/en.tsx","lang/tr.tsx","components/Flows/Base/BaseFlowNodeGenerator.tsx","models/Variable.tsx","utils/Random.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLabel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortType.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortModel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPort.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowNode.tsx","components/CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode.tsx","components/Flows/Base/BaseVariableFlowNode.tsx","components/Flows/Input/InputFlowNode.tsx","components/Flows/Input/InputFlowNodeGenerator.tsx","models/Condition.tsx","components/Flows/While/WhileFlowNode.tsx","components/Flows/While/WhileFlowNodeGenerator.tsx","components/Flows/Output/OutputFlowNode.tsx","components/Flows/Output/OutputFlowNodeGenerator.tsx","components/Flows/Arithmetic/ArithmeticFlowNode.tsx","components/Flows/Arithmetic/ArithmeticFlowNodeGenerator.tsx","components/Flows/Assignment/AssignmentFlowNode.tsx","components/Flows/Assignment/AssignmentFlowNodeGenerator.tsx","components/Flows/Initial/InitialFlowNode.tsx","components/Flows/Initial/InitialFlowNodeGenerator.tsx","components/Flows/FlowNodeFactory.tsx","components/Flows/Base/BaseProperties.tsx","components/Flows/While/WhileProperties.tsx","generator/Func.tsx","generator/code/CodeWriter.tsx","generator/flows/ArithmeticFlow.tsx","components/Flows/Arithmetic/ArithmeticProperties.tsx","components/Flows/Assignment/AssignmentProperties.tsx","components/Flows/Input/InputProperties.tsx","components/Flows/Output/OutputProperties.tsx","components/Flows/FlowPropertiesFactory.tsx","components/Flows/Base/BaseFlowModelGenerator.tsx","generator/FlowModelJSON.tsx","generator/flows/WhileFlow.tsx","components/Flows/While/WhileFlowModelGenerator.tsx","generator/flows/InputFlow.tsx","components/Flows/Input/InputFlowModelGenerator.tsx","generator/flows/OutputFlow.tsx","components/Flows/Output/OutputFlowModelGenerator.tsx","components/Flows/Arithmetic/ArithmeticFlowModelGenerator.tsx","generator/flows/AssignmentFlow.tsx","components/Flows/Assignment/AssignmentFlowModelGenerator.tsx","components/Flows/Initial/InitialFlowModelGenerator.ts","components/Flows/FlowModelFactory.tsx","components/Flows/FlowModelGenerator.tsx","components/AddNodeDialog/AddNodeDialog.tsx","generator/flows/InitialFlow.tsx","generator/CodeGenerator.tsx","components/CanvasItems/Ports/PortFactory.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowWidget.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowFactory.tsx","components/CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowWidget.tsx","components/CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowFactory.tsx","components/CanvasPanel/CanvasPanel.tsx","pages/editor/Editor.tsx","serviceWorker.ts","index.tsx","components/ShapePanel/ShapePanel.module.css","pages/editor/Editor.module.css"],"names":["module","exports","addNodeDialogButtonContainer","addNodeDialogBody","diagramLayer","srdDemoCanvas","rectangleNode","rectangleNode--selected","rectangleNodeTitle","rectangleNodeInfo","fa","rectangleNodeName","rectangleNodePorts","rectangleNodeIn","rectangleNodeOut","ShapePanel","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react_default","a","createElement","className","styles","tray","children","Component","defaultProps","ProgrammingLanguage","VariableType","ArithmeticOperationType","FlowType","ConditionOperation","ShapeItem","_React$Component","_this2","style","borderColor","color","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","trayItem","name","React","Defaults","PROGRAMMING_LANGUAGE","KOTLIN","NodeColors","IF","WHILE","VARIABLE","ARITHMETIC","FOR","INITIAL","Rules","CodePreviewPanel","esm","handleWidth","handleHeight","refreshRate","refreshMode","render","_ref","width","height","backgroundColor","lib_default","mode","theme","fontSize","wrapEnabled","code","setOptions","dragEnabled","readOnly","highlightActiveLine","useWorker","language","undefined","ProjectTreePanel","rc_tree_es","selectable","defaultExpandAll","defaultExpandedKeys","title","DefaultPortLocation","strings","LocalizedStrings","en","in","out","loop","scope","true","false","ifStatement","variable","assignment","arithmetic","while","switch","save","dismiss","variableName","dataType","variableType","firstVariable","secondVariable","select","operation","recurse","initialFlow","firstOperator","secondOperator","input","output","tr","BaseFlowNodeGenerator","Variable","type","Random","replace","c","r","Math","random","toString","DefaultPortType","DefaultPortLabel","_BaseWidget","get","prototype","portType","location","LEFT","bem","port","react","main","node","getParent","label","getProps","BaseWidget","DefaultPortModel","_PortModel","arguments","length","id","onLinkChangedListener","links","object","engine","_","link","createLinkModel","setSourcePort","setTargetPort","keys","getLinks","getMaximumLinks","getNode","OUT","IN","LOOP","SCOPE","listener","DefaultLinkModel","addListener","targetPortChanged","sourcePort","canLinkToPort","entityRemoved","entity","getTargetPort","PortModel","DefaultPort","BaseFlowNode","_NodeModel","flowType","nodeType","ports","data","FlowNodeFactory","update","portModel","addOnLinkChangedListener","UID","addPort","RIGHT","_len","Array","_key","_len2","_key2","values","getPortListByType","NodeModel","BaseInfoFlowNode","_BaseFlowNode","info","BaseVariableFlowNode","_BaseInfoFlowNode","BOOLEAN","InputFlowNode","_BaseVariableFlowNode","INPUT","setVariable","addInPort","setMaximumLinks","Infinity","addOutPort","InputFlowNodeGenerator","_BaseFlowNodeGenerato","apply","Condition","first","second","WhileFlowNode","conditionList","addScopePort","condition","push","map","concat","join","filter","cond","WhileFlowNodeGenerator","parse","removeAllConditions","addCondition","whileNode","OutputFlowNode","OUTPUT","OutputFlowNodeGenerator","ArithmeticFlowNode","operator1","operator2","setOperation","setOperator1","setOperator2","getOperator1","getOperation","getOperator2","getVariable","ArithmeticFlowNodeGenerator","op1","op2","AssignmentFlowNode","ASSIGNMENT","AssignmentFlowNodeGenerator","InitialFlowNode","addLoopPort","InitialFlowNodeGenerator","create","console","log","BaseProperties","_getPrototypeOf2","args","handleStringChange","callback","setState","defineProperty","target","onDataChanged","handleBooleanChange","val","checked","WhileProperties","_BaseProperties","index_es","onChange","margin","variables","Func","functionName","parameters","returnType","codeLines","Parameter","CodeWriter","flowIncrementalId","flows","Map","codes","scopeCount","mainFunctionLineIndex","spacing","variableSet","Set","loopStack","Stack","TERMINATION_ID","instance","clear","line","splice","createSpacing","str","lastIndex","last","writeLineToMainFunction","INITIAL_ID","createMainCode","func","returnTypeString","parameterString","forEach","index","writeLine","appendToLastLine","top","removeFromStackIfEquals","flow","has","add","pop","i","OperatorType","ArithmeticFlow","nextFlowId","content","functionCallName","getInstance","variableSetCode","addVariable","functionInvocation","writeMainCodeFromFlow","nextFlow","functionLines","INT","operationCode","ADDITION","SUBTRACTION","MULTIPLICATION","DIVISION","operator1Code","operator2Code","CONSTANT","constantValue","writeFunction","functionCode","ArithmeticFlowContent","Operator","ArithmeticProperties","AssignmentProperties","isNull","inputProps","maxLength","display","flexDirection","alignItems","justifyContent","alignContent","textAlign","flex","disabled","STRING","control","InputProperties","OutputProperties","FlowPropertiesFactory","WhileProperties_WhileProperties","bind","ArithmeticProperties_ArithmeticProperties","AssignmentProperties_AssignmentProperties","InputProperties_InputProperties","OutputProperties_OutputProperties","BaseFlowModelGenerator","FlowModel","assignmentFlowContent","inputFlowContent","outputFlowContent","arithmeticFlowContent","whileFlowContent","WhileFlow","nextScopeId","scopeId","conditionCode","conditions","EQUALS","NOT_EQUALS","addToLoopStack","WhileFlowContent","WhileFlowModelGenerator","_BaseFlowModelGenerat","whileFlow","getNextFlow","getID","scopeFlow","getScopeFlow","scopeFlowId","InputFlow","scanCode","InputFlowContent","InputFlowModelGenerator","inputFlow","OutputFlow","OutputFlowContent","OutputFlowModelGenerator","outputFlow","ArithmeticFlowModelGenerator","arithmeticFlow","AssignmentFlow","contentString","AssignmentFlowContent","AssignmentFlowModelGenerator","assignmentFlow","InitialFlowModelGenerator","FlowModelFactory","baseFlow","generate","FlowModelGenerator","flowModelList","generateFlowModel","currentFlow","flowModel","AddNodeDialog","bodyData","onSaveClick","onDismissClick","assign","aria-labelledby","onBodyChanged","Button_default","variant","onClick","onDismiss","onSave","InitialFlow","CodeGenerator","flowJson","reset","setFlows","convertToFlowObjects","createFunctionCode","generateMain","flowModels","baseFlowMap","set","PortFactory","_AbstractPortFactory","cb","initialConfig","AbstractPortFactory","BaseFlowWidget","DefaultPortLabel_DefaultPortLabel","background","getPortListByLocation","generatePort","BaseFlowFactory","_SRD$AbstractNodeFact","diagramEngine","BaseFlowWidget_BaseFlowWidget","SRD","BaseInfoFlowWidget","BaseInfoFlowFactory","BaseInfoFlowWidget_BaseInfoFlowWidget","CanvasPanel","activeModel","initialNode","DiagramEngine","installDefaultFactories","registerNodeFactory","registerPortFactory","DiagramModel","setDiagramModel","getNodes","item","selectionChanged","onSectionChanged","assertThisInitialized","onEntityRemoved","x","window","innerWidth","y","innerHeight","getDiagramModel","addNode","position","onDiagramChanged","onItemAdded","forceUpdate","onDrop","onDragOver","preventDefault","maxNumberPointsPerLink","allowLooseLinks","getData","includes","points","getRelativeMousePoint","Editor","canvasPanel","createRef","generator","isModalOpen","flowPosition","generatedCode","variableList","properties","selectedItem","onModalClose","current","addItem","newVariableList","selectedItems","diagramModel","getSelectedItems","isSelected","updateNode","App","AddNodeDialog_AddNodeDialog","onModalSaveClick","onModalDismissClick","onClose","open","es","orientation","minSize","ProjectTreePanel_ProjectTreePanel","ShapePanel_ShapePanel","ShapeItem_ShapeItem","paneContent","CanvasPanel_CanvasPanel","ref","onCanvasDrop","onSelectionChanged","propertiesPanel","CodePreviewPanel_CodePreviewPanel","Boolean","hostname","match","ReactDOM","BrowserRouter","basename","Route","path","component","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ba55c99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNodeDialogButtonContainer\":\"AddNodeDialog_addNodeDialogButtonContainer__3szSl\",\"addNodeDialogBody\":\"AddNodeDialog_addNodeDialogBody__3ZweO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"diagramLayer\":\"CanvasPanel_diagramLayer__3iv1-\",\"srdDemoCanvas\":\"CanvasPanel_srdDemoCanvas__xJXSV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangleNode\":\"BaseFlow_rectangleNode__EIYU5\",\"rectangleNode--selected\":\"BaseFlow_rectangleNode--selected__2MMEv\",\"rectangleNodeTitle\":\"BaseFlow_rectangleNodeTitle__238Sh\",\"rectangleNodeInfo\":\"BaseFlow_rectangleNodeInfo__3ldf_\",\"fa\":\"BaseFlow_fa__1eaxR\",\"rectangleNodeName\":\"BaseFlow_rectangleNodeName__wyv7X\",\"rectangleNodePorts\":\"BaseFlow_rectangleNodePorts__3irq9\",\"rectangleNodeIn\":\"BaseFlow_rectangleNodeIn__3DCF9\",\"rectangleNodeOut\":\"BaseFlow_rectangleNodeOut__3UMAk\"};","import React, {Component} from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface ShapePanelProps {\n}\n\nexport interface ShapePanelState {\n}\n\nexport class ShapePanel extends Component<ShapePanelProps, ShapePanelState> {\n    static defaultProps: ShapePanelProps = {}\n\n    constructor(props: ShapePanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return <div className={styles.tray}>{this.props.children}</div>\n    }\n}\n","import React from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface IShapeItemProps {\n    model: any;\n    color?: string;\n    name: string;\n}\n\nexport interface IShapeItemState {\n}\n\nexport class ShapeItem extends React.Component<IShapeItemProps, IShapeItemState> {\n    constructor(props: IShapeItemProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div\n                style={{borderColor: this.props.color}}\n                draggable={true}\n                onDragStart={(event) => {\n                    event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model))\n                }}\n                className={styles.trayItem}>\n                {this.props.name}\n            </div>\n        )\n    }\n}\n","export enum ProgrammingLanguage {\n    TYPESCRIPT,\n    JAVASCRIPT,\n    JAVA,\n    KOTLIN,\n    SWIFT,\n    PHP,\n    C,\n    CPP,\n    CSHARP,\n    PYTHON,\n    LISP\n}\n","export enum VariableType {\n    INT = \"Int\",\n    STRING = \"String\",\n    BOOLEAN = \"Boolean\"\n}\n\nexport enum ArithmeticOperationType {\n    ADDITION = \"Addition\",\n    SUBTRACTION = \"Subtraction\",\n    MULTIPLICATION = \"Multiplication\",\n    DIVISION = \"Division\"\n}\n\nexport enum FlowType {\n    INITIAL = \"Initial\",\n    IF = \"If\",\n    WHILE = \"While\",\n    FOR = \"For\",\n    INPUT = \"Input\",\n    OUTPUT = \"Output\",\n    ARITHMETIC = \"Arithmetic\",\n    ASSIGNMENT = \"Assignment\"\n}\n\nexport enum ConditionOperation {\n    EQUALS = \"Equals\",\n    NOT_EQUALS = \"NotEquals\"\n}\n","import {ProgrammingLanguage} from \"../models\"\n\nexport const Defaults = {\n    PROGRAMMING_LANGUAGE: ProgrammingLanguage.KOTLIN\n}\n","export const NodeColors = {\n    IF: \"rgb(0, 192, 255)\",\n    WHILE: \"rgb(192, 0, 255)\",\n    VARIABLE: \"rgb(255, 192, 0)\",\n    ARITHMETIC: \"rgb(192, 255, 0)\",\n    FOR: \"rgb(255, 0, 192)\",\n    INITIAL: \"rgb(0, 255, 192)\"\n}\n","export const Rules = {\n    MAX_VAR_LENGTH: 30,\n}\n","import React, {Component} from \"react\"\nimport {Defaults} from \"../../config\"\nimport {ProgrammingLanguage} from \"../../models\"\nimport AceEditor from \"react-ace\"\nimport ReactResizeDetector from \"react-resize-detector\"\n\nimport \"brace/mode/java\"\nimport \"brace/mode/javascript\"\nimport \"brace/mode/typescript\"\nimport \"brace/theme/ambiance\"\nimport \"brace/theme/clouds_midnight\"\nimport \"brace/theme/dracula\"\nimport \"brace/theme/gruvbox\"\nimport \"brace/theme/idle_fingers\"\nimport \"brace/theme/kr_theme\"\nimport \"brace/theme/merbivore\"\nimport \"brace/theme/merbivore_soft\"\nimport \"brace/theme/tomorrow_night\"\nimport \"brace/theme/tomorrow_night_bright\"\nimport \"brace/theme/tomorrow_night_eighties\"\nimport \"brace/theme/twilight\"\nimport \"brace/theme/vibrant_ink\"\nimport \"brace/ext/beautify\"\nimport \"brace/ext/themelist\"\n\nexport interface ICodePreviewPanelProps {\n    language: ProgrammingLanguage,\n    code: string | undefined\n}\n\nexport interface ICodePreviewPanelState {\n}\n\nexport class CodePreviewPanel extends Component<ICodePreviewPanelProps, ICodePreviewPanelState> {\n    static defaultProps: ICodePreviewPanelProps = {\n        language: Defaults.PROGRAMMING_LANGUAGE,\n        code: undefined\n    }\n\n    constructor(props: ICodePreviewPanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <ReactResizeDetector\n                handleWidth\n                handleHeight\n                refreshRate={300}\n                refreshMode=\"throttle\"\n                render={({width, height}) =>\n                    <div style={{height: \"100%\", width: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow_night\"\n                            name=\"blah2\"\n                            fontSize={14}\n                            height={height + \"px\"}\n                            width={width + \"px\"}\n                            wrapEnabled\n                            value={this.props.code}\n                            setOptions={{\n                                dragEnabled: false,\n                                readOnly: true,\n                                highlightActiveLine: false,\n                                useWorker: false\n                            }}/>\n                    </div>\n                }/>\n        )\n\n    }\n}\n","import React, {Component} from \"react\"\nimport Tree, {TreeNode} from \"rc-tree\"\nimport \"rc-tree/assets/index.css\"\n\nexport interface IProjectTreePanelProps {\n}\n\nexport interface IProjectTreePanelState {\n}\n\nexport class ProjectTreePanel extends Component<IProjectTreePanelProps, IProjectTreePanelState> {\n    static defaultProps: IProjectTreePanelProps = {}\n\n    constructor(props: IProjectTreePanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{color: \"white\"}}>\n            <Tree\n                selectable={false}\n                defaultExpandAll={false}\n                defaultExpandedKeys={[\"p1\"]}>\n                <TreeNode title=\"parent 1\" key=\"p1\">\n                    <TreeNode key=\"p10\" title=\"leaf\"/>\n                    <TreeNode title=\"parent 1-1\" key=\"p11\">\n                        <TreeNode title=\"parent 2-1\" key=\"p21\">\n                            <TreeNode title=\"leaf\"/>\n                            <TreeNode title=\"leaf\"/>\n                        </TreeNode>\n                        <TreeNode key=\"p22\" title=\"leaf\"/>\n                    </TreeNode>\n                </TreeNode>\n            </Tree>\n        </div>\n    }\n}\n","export enum DefaultPortLocation {\n    LEFT,\n    RIGHT\n}\n","import eng from \"./en\"\nimport tur from \"./tr\"\nimport LocalizedStrings from \"react-localization\"\n\nconst strings = new LocalizedStrings({\n    en: eng,\n    tr: tur\n});\n\nexport default strings\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    save: \"Save\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\"\n}\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    save: \"Save\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\"\n}\n","import {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"./BaseProperties\"\nimport {InputFlowNode} from \"../Input/InputFlowNode\"\n\nexport abstract class BaseFlowNodeGenerator {\n    abstract create(data?: BasePropertiesState, node?: BaseFlowNode): BaseFlowNode | null\n}\n","import {VariableType} from \"./VariableEnums\";\n\nexport class Variable {\n\n    name: string | undefined\n    type: VariableType\n    value: any\n\n    constructor(name: string | undefined,\n                type: VariableType,\n                value: any) {\n        this.name = name\n        this.type = type\n        this.value = value\n    }\n\n}\n","export class Random {\n    /**\n     * Generates a unique ID\n     * @returns {String}\n     */\n    static UID(): string {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0\n            const v = c === \"x\" ? r : (r & 0x3) | 0x8\n            return v.toString(16)\n        })\n    }\n}\n","import * as React from \"react\"\nimport {BaseWidget, BaseWidgetProps, PortWidget} from \"nberktumer-react-diagrams\"\nimport {DefaultPortModel} from \"./DefaultPortModel\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n    model: DefaultPortModel;\n}\n\nexport interface DefaultPortLabelState {\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n    constructor(props: DefaultPortLabelProps) {\n        super(\"srd-default-port\", props)\n    }\n\n    getClassName() {\n        return super.getClassName() + (this.props.model.portType.location === DefaultPortLocation.LEFT\n            ? this.bem(\"--in\") : this.bem(\"--out\"))\n    }\n\n    render() {\n        const port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name}/>\n        const label = <div className=\"name\">{this.props.model.label}</div>\n\n        return (\n            <div {...this.getProps()}>\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? port : label}\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? label : port}\n            </div>\n        )\n    }\n}\n","export enum DefaultPortType {\n    IN,\n    OUT,\n    LOOP,\n    SCOPE\n}","import * as _ from \"lodash\"\nimport {BaseEvent, BaseModel, DefaultLinkModel, DiagramEngine, LinkModel, PortModel} from \"nberktumer-react-diagrams\"\nimport {DefaultPort, DefaultPortType} from \"./index\"\n\nexport class DefaultPortModel extends PortModel {\n    portType: DefaultPort\n    label: string\n    onLinkChangedListener: () => void\n    links: { [id: string]: DefaultLinkModel }\n\n    constructor(portType: DefaultPort, name: string, label: string | null = null, id?: string) {\n        super(name, \"default\", id)\n        this.portType = portType\n        this.label = label || name\n        this.links = {}\n        this.onLinkChangedListener = () => {\n        }\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.portType = object.portType\n        this.label = object.label\n        this.links = object.links\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            portType: this.portType,\n            label: this.label,\n            links: this.links\n        })\n    }\n\n    link(port: PortModel): LinkModel {\n        const link = this.createLinkModel()\n        link.setSourcePort(this)\n        link.setTargetPort(port)\n        return link\n    }\n\n    canLinkToPort(port: DefaultPortModel): boolean {\n        if (Object.keys(port.getLinks()).length > port.getMaximumLinks() || Object.keys(this.getLinks()).length > this.getMaximumLinks())\n            return false\n\n        // Do not connect ports that are in the same node\n        if (port.getNode() === this.getNode())\n            return false\n\n        return (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.LOOP)\n            || (this.portType.type === DefaultPortType.SCOPE && port.portType.type === DefaultPortType.IN)\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n    }\n\n    createLinkModel(): LinkModel {\n        const link = new DefaultLinkModel()\n        link.addListener({\n            targetPortChanged(event: BaseEvent<LinkModel> & { port: PortModel | null }): void {\n                if (event.port != null && event.port instanceof DefaultPortModel && link.sourcePort != null && link.sourcePort.canLinkToPort(event.port)) {\n                    (event.port as DefaultPortModel).onLinkChangedListener()\n                }\n            },\n            entityRemoved(event: BaseEvent<BaseModel>): void {\n                const link = event.entity as DefaultLinkModel\n                if (link.getTargetPort() != null)\n                    (link.getTargetPort() as DefaultPortModel).onLinkChangedListener()\n            }\n        })\n        return link\n    }\n}\n","import {DefaultPortType} from \"./DefaultPortType\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport class DefaultPort {\n    type: DefaultPortType\n    location: DefaultPortLocation\n\n    constructor(type: DefaultPortType, location: DefaultPortLocation) {\n        this.type = type\n        this.location = location\n    }\n}\n","import {DiagramEngine, NodeModel} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Random} from \"../../../../utils\"\nimport {DefaultPort, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../../Ports/DefaultPort\"\nimport {FlowType} from \"../../../../models\"\nimport {BasePropertiesState} from \"../../../Flows/Base/BaseProperties\"\nimport {FlowNodeFactory} from \"../../../Flows\"\n\nexport class BaseFlowNode extends NodeModel {\n    name: string\n    color: string\n    ports: { [s: string]: DefaultPortModel }\n    onLinkChangedListener: () => void\n    flowType: FlowType | undefined\n\n    constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\", nodeType: string = \"base-flow\") {\n        super(nodeType)\n        this.name = name\n        this.color = color\n        this.ports = {}\n        this.onLinkChangedListener = () => {\n        }\n        this.flowType = flowType\n    }\n\n    updateNode(data: BasePropertiesState) {\n        FlowNodeFactory.update(this, data)\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n\n        _.map(this.ports, (portModel) => {\n            portModel.addOnLinkChangedListener(listener)\n        })\n    }\n\n    addInPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addOutPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.OUT, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addLoopPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.LOOP, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.name = object.name\n        this.color = object.color\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            name: this.name,\n            color: this.color\n        })\n    }\n\n    getPortListByType(...type: DefaultPortType[]): DefaultPortModel[] {\n        return _.filter(this.ports, (portModel) => {\n            return _.includes(type, portModel.portType.type)\n        })\n    }\n\n    getPortListByLocation(...location: DefaultPortLocation[]): DefaultPortModel[] {\n        return _.filter(this.ports, (portModel) => {\n            return _.includes(location, portModel.portType.location)\n        })\n    }\n\n    getNextFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.OUT)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {BaseFlowNode} from \"../BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../../models\"\n\nexport class BaseInfoFlowNode extends BaseFlowNode {\n    info: string | undefined\n\n    constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n        super(flowType, name, color, \"base-info-flow\")\n        this.info = \"\"\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.info = object.info\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            info: this.info\n        })\n    }\n}\n","import {Variable} from \"../../../models/Variable\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport {FlowType, VariableType} from \"../../../models\"\n\nexport abstract class BaseVariableFlowNode extends BaseInfoFlowNode {\n    protected constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n        super(flowType, name, color)\n\n        this.variable = new Variable(\"\", VariableType.BOOLEAN, \"\")\n    }\n\n    private variable: Variable\n\n    getVariable(): Variable {\n        return this.variable\n    }\n\n    setVariable(variable: Variable) {\n        this.variable = variable\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class InputFlowNode extends BaseVariableFlowNode {\n    constructor(variable: Variable) {\n        super(FlowType.INPUT, strings.input, NodeColors.IF)\n\n        this.setVariable(variable)\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.info = variable.name\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {InputFlowNode} from \"./InputFlowNode\"\n\nexport class InputFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: InputFlowNode): BaseFlowNode | null {\n        if (!data || data.variableName === \"\" || data.variableType === \"\")\n            return null\n\n        const variable = new Variable(data.variableName, data.variableType, null)\n\n        if (node !== undefined) {\n            node.setVariable(variable)\n            return node\n        } else {\n            return new InputFlowNode(variable)\n        }\n    }\n}\n","import {ConditionOperation, VariableType} from \"./VariableEnums\"\nimport {Variable} from \"./Variable\"\nimport {Random} from \"../utils\"\n\nexport class Condition {\n    id: string = Random.UID()\n    variableType: VariableType\n    first: Variable\n    second: Variable\n    operation: ConditionOperation\n\n    constructor(\n        variableType: VariableType,\n        first: Variable,\n        second: Variable,\n        operation: ConditionOperation\n    ) {\n        this.variableType = variableType\n        this.first = first\n        this.second = second\n        this.operation = operation\n    }\n\n}\n","import {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Condition} from \"../../../models/Condition\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {DefaultPortType} from \"../../CanvasItems/Ports/DefaultPort\"\nimport {FlowType} from \"../../../models\"\n\nexport class WhileFlowNode extends BaseInfoFlowNode {\n    conditionList: Condition[] = []\n\n    constructor() {\n        super(FlowType.WHILE, strings.while, NodeColors.WHILE)\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n        this.addScopePort(strings.scope).setMaximumLinks(1)\n    }\n\n    addCondition(condition: Condition) {\n        this.conditionList.push(condition)\n\n        this.info = this.conditionList.map((condition) => {\n            return `${condition.first.name} ${condition.operation} ${condition.second.name}`\n        }).join(\"\\n\")\n    }\n\n    removeAllConditions() {\n        this.conditionList = []\n        this.info = \"\"\n    }\n\n    removeCondition(condition: Condition) {\n        this.conditionList = this.conditionList.filter((cond) => cond != condition)\n\n        this.info = this.conditionList.map((condition) => {\n            return `${condition.first.name} ${condition.operation} ${condition.second.name}`\n        }).join(\"\\n\")\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.conditionList = object.conditionList\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            conditionList: this.conditionList\n        })\n    }\n\n    getScopeFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Condition} from \"../../../models/Condition\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\n\nexport class WhileFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: WhileFlowNode): BaseFlowNode | null {\n        if (!data || data.variableType === \"\" || data.first === \"\" || data.second === \"\" || data.operation === \"\")\n            return null\n\n        const condition = new Condition(data.variableType, JSON.parse(data.first), JSON.parse(data.second), data.operation)\n\n        if (node !== undefined) {\n            node.removeAllConditions()\n            node.addCondition(condition)\n            return node\n        } else {\n            const whileNode = new WhileFlowNode()\n            whileNode.addCondition(condition)\n            return whileNode\n        }\n    }\n}\n","import {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Variable} from \"../../../models/Variable\"\nimport {FlowType} from \"../../../models\"\n\nexport class OutputFlowNode extends BaseInfoFlowNode {\n    private variable: Variable\n\n    constructor(variable: Variable) {\n        super(FlowType.OUTPUT, strings.output, NodeColors.IF)\n\n        this.variable = variable\n        this.setVariable(variable)\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    getVariable() {\n        return this.variable\n    }\n\n    setVariable(variable: Variable) {\n        this.variable = variable\n        this.info = variable.name\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\n\nexport class OutputFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: OutputFlowNode): BaseFlowNode | null {\n        if (!data || data.variable === \"\")\n            return null\n\n        if (node !== undefined) {\n            node.setVariable(JSON.parse(data.variable))\n            return node\n        } else {\n            return new OutputFlowNode(JSON.parse(data.variable))\n        }\n    }\n}\n","import {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ArithmeticOperationType, FlowType} from \"../../../models\"\nimport {Operator} from \"../../../generator/flows/ArithmeticFlow\"\nimport * as _ from \"lodash\"\n\nexport class ArithmeticFlowNode extends BaseInfoFlowNode {\n    private variable: Variable\n    private operation: ArithmeticOperationType\n    private operator1: Operator\n    private operator2: Operator\n\n    constructor(variable: Variable, operation: ArithmeticOperationType, operator1: Operator, operator2: Operator) {\n        super(FlowType.ARITHMETIC, strings.arithmetic, NodeColors.ARITHMETIC)\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n\n        this.setVariable(variable)\n        this.setOperation(operation)\n        this.setOperator1(operator1)\n        this.setOperator2(operator2)\n    }\n\n    getVariable(): Variable {\n        return this.variable\n    }\n\n    setVariable(value: Variable) {\n        this.variable = value\n        this.info = `${value.name} = ${this.getOperator1().variableName} ${this.getOperation()} ${this.getOperator2().variableName}`\n    }\n\n    getOperation(): ArithmeticOperationType {\n        return this.operation\n    }\n\n    setOperation(value: ArithmeticOperationType) {\n        this.operation = value\n        this.info = `${this.getVariable().name} = ${this.getOperator1().variableName} ${value} ${this.getOperator2().variableName}`\n    }\n\n    getOperator1(): Operator {\n        return this.operator1\n    }\n\n    setOperator1(value: Operator) {\n        this.operator1 = value\n        this.info = `${this.getVariable().name} = ${value.variableName} ${this.getOperation()} ${this.getOperator2().variableName}`\n    }\n\n    getOperator2(): Operator {\n        return this.operator2\n    }\n\n    setOperator2(value: Operator) {\n        this.operator2 = value\n        this.info = `${this.getVariable().name} = ${this.getOperator1().variableName} ${this.getOperation()} ${value.variableName}`\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n        this.operation = object.operation\n        this.operator1 = object.operator1\n        this.operator2 = object.operator2\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable,\n            operation: this.operation,\n            operator1: this.operator1,\n            operator2: this.operator2\n        })\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Operator} from \"../../../generator/flows/ArithmeticFlow\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\n\nexport class ArithmeticFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: ArithmeticFlowNode): BaseFlowNode | null {\n        if (!data || data.variable === \"\" || data.operation === \"\" || data.operator1 === \"\" || data.operator2 === \"\")\n            return null\n\n        const op1 = JSON.parse(data.operator1) as Operator\n        const op2 = JSON.parse(data.operator2) as Operator\n\n        if (node !== undefined) {\n            node.setVariable(JSON.parse(data.variable))\n            node.setOperation(data.operation)\n            node.setOperator1(op1)\n            node.setOperator2(op2)\n            return node\n        } else {\n            return new ArithmeticFlowNode(\n                JSON.parse(data.variable),\n                data.operation,\n                op1,\n                op2\n            )\n        }\n\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class AssignmentFlowNode extends BaseVariableFlowNode {\n\n    constructor(variable: Variable) {\n        super(FlowType.ASSIGNMENT, strings.variable + \" (\" + variable.type + \")\", NodeColors.VARIABLE)\n\n        this.setVariable(variable)\n\n        this.addInPort(strings.in).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.info = `${variable.name} = ${variable.value}`\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\n\nexport class AssignmentFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: AssignmentFlowNode): BaseFlowNode | null {\n        if (!data || data.variableName === \"\" || data.variableType === \"\" || data.value === \"\")\n            return null\n\n        // data.isNull\n        const variable = new Variable(data.variableName, data.variableType, data.value)\n\n        if (node !== undefined) {\n            node.setVariable(variable)\n            return node\n        } else {\n            return new AssignmentFlowNode(variable)\n        }\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class InitialFlowNode extends BaseFlowNode {\n\n    constructor() {\n        super(FlowType.INITIAL, strings.initialFlow, NodeColors.INITIAL)\n\n        this.addLoopPort(strings.recurse).setMaximumLinks(Infinity)\n        this.addOutPort(strings.out).setMaximumLinks(1)\n    }\n\n    // Prevent removing this item\n    remove(): void {\n        return\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {InitialFlowNode} from \"./InitialFlowNode\"\n\nexport class InitialFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: InitialFlowNode): BaseFlowNode | null {\n        return new InitialFlowNode()\n    }\n}\n","import {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../models\"\nimport {BasePropertiesState} from \"./Base/BaseProperties\"\nimport {InputFlowNodeGenerator} from \"./Input/InputFlowNodeGenerator\"\nimport {WhileFlowNodeGenerator} from \"./While/WhileFlowNodeGenerator\"\nimport {OutputFlowNodeGenerator} from \"./Output/OutputFlowNodeGenerator\"\nimport {ArithmeticFlowNodeGenerator} from \"./Arithmetic/ArithmeticFlowNodeGenerator\"\nimport {AssignmentFlowNodeGenerator} from \"./Assignment/AssignmentFlowNodeGenerator\"\nimport {InitialFlowNodeGenerator} from \"./Initial/InitialFlowNodeGenerator\"\nimport {InputFlowNode} from \"./Input/InputFlowNode\"\nimport {InitialFlowNode} from \"./Initial/InitialFlowNode\"\nimport {WhileFlowNode} from \"./While/WhileFlowNode\"\nimport {AssignmentFlowNode} from \"./Assignment/AssignmentFlowNode\"\nimport {ArithmeticFlowNode} from \"./Arithmetic/ArithmeticFlowNode\"\nimport {OutputFlowNode} from \"./Output/OutputFlowNode\"\n\nexport class FlowNodeFactory {\n    private constructor() {\n    }\n\n    static create(type: FlowType, data?: BasePropertiesState): BaseFlowNode | null {\n        switch (type) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().create(data)\n            case FlowType.IF:\n                return null // TODO\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().create(data)\n            case FlowType.FOR:\n                return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().create(data)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().create(data)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().create(data)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().create(data)\n            default:\n                return null\n        }\n    }\n\n    static update(node: BaseFlowNode, data?: BasePropertiesState): BaseFlowNode | null {\n        console.log(node.flowType)\n        switch (node.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().create(data, node as InitialFlowNode)\n            case FlowType.IF:\n                return null // TODO\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().create(data, node as WhileFlowNode)\n            case FlowType.FOR:\n                return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().create(data, node as InputFlowNode)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().create(data, node as OutputFlowNode)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().create(data, node as ArithmeticFlowNode)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().create(data, node as AssignmentFlowNode)\n            default:\n                return null\n        }\n    }\n}\n","import React, {Component} from \"react\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport interface BasePropertiesProps {\n    onDataChanged: (data: BasePropertiesState) => void\n    node?: BaseFlowNode\n}\n\nexport interface BasePropertiesState {\n    [index: string]: any\n}\n\nexport abstract class BaseProperties<T extends BasePropertiesProps = BasePropertiesProps, U extends BasePropertiesState = BasePropertiesState> extends Component<T, U> {\n\n    handleStringChange = (key: string, callback?: (value: string) => void) => (event: any) => {\n        this.setState({[key]: event.target.value}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback != null)\n                callback(event.target.value)\n        })\n    }\n\n    handleBooleanChange = (key: string, callback?: (value: boolean) => void) => (event: any) => {\n        const val = event.target.checked\n        this.setState({[key]: val}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback != null)\n                callback(val)\n        })\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {VariableType} from \"../../../models\"\nimport {ConditionOperation} from \"../../../models/VariableEnums\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\n\nexport interface WhilePropertiesProps extends BasePropertiesProps {\n    variables: Variable[]\n}\n\nexport class WhileProperties extends BaseProperties<WhilePropertiesProps> {\n\n    constructor(props: WhilePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as WhileFlowNode\n\n            // TODO: Change this to handle all conditions\n            this.state = {\n                variableType: node.conditionList[0].variableType,\n                first: node.conditionList[0].first,\n                second: node.conditionList[0].second,\n                operation: node.conditionList[0].operation\n            }\n        } else {\n            this.state = {\n                variableType: \"\",\n                first: \"\",\n                second: \"\",\n                operation: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.variableType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\")}\n                    margin=\"normal\">\n                    {Object.keys(VariableType).map((value: any) => (\n                        <MenuItem key={value} value={VariableType[value]}>\n                            {VariableType[value]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.firstVariable}\n                    value={this.state.first}\n                    onChange={this.handleStringChange(\"first\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === this.state.variableType\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.secondVariable}\n                    value={this.state.second}\n                    onChange={this.handleStringChange(\"second\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === this.state.variableType\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.operation}\n                    value={this.state.operation}\n                    onChange={this.handleStringChange(\"operation\")}\n                    margin=\"normal\">\n                    {Object.keys(ConditionOperation).map((value: any) => (\n                        <MenuItem key={value} value={ConditionOperation[value]}>\n                            {ConditionOperation[value]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","export class Func {\n    functionName: string\n    parameters: Parameter[]\n    returnType: string | undefined\n    codeLines: string[]\n\n    constructor(\n        functionName: string,\n        parameters: Parameter[],\n        returnType: string | undefined,\n        codeLines: string[]\n    ) {\n        this.functionName = functionName\n        this.parameters = parameters\n        this.returnType = returnType\n        this.codeLines = codeLines\n    }\n}\n\nexport class Parameter {\n    name: string\n    type: string\n\n    constructor(\n        name: string,\n        type: string\n    ) {\n        this.name = name;\n        this.type = type\n    }\n}\n","import {BaseFlow} from \"../flows/BaseFlow\"\nimport {Func} from \"../Func\"\nimport {Stack} from \"stack-typescript\"\n\nexport class CodeWriter {\n    static INITIAL_ID = \"INITIAL_ID\"\n    static TERMINATION_ID = \"TERMINATION_ID\"\n\n    static getInstance(): CodeWriter {\n        return this.instance || (this.instance = new this())\n    }\n\n    private static instance: CodeWriter\n\n    flowIncrementalId = 0\n    flows: Map<string, BaseFlow> = new Map()\n    codes: string[] = []\n    scopeCount = 0\n    private mainFunctionLineIndex = 0\n    private spacing = \"\\t\"\n    private variableSet: Set<string> = new Set()\n    private loopStack: Stack<string> = new Stack()\n\n    private constructor() {\n        this.loopStack.push(CodeWriter.TERMINATION_ID)\n    }\n\n    reset() {\n        this.flowIncrementalId = 0\n        this.flows.clear()\n        this.variableSet.clear()\n        this.codes = []\n        this.scopeCount = 0\n        this.mainFunctionLineIndex = 0\n        this.loopStack = new Stack()\n        this.loopStack.push(CodeWriter.TERMINATION_ID)\n    }\n\n    setFlows(flows: Map<string, BaseFlow>) {\n        console.log(flows)\n        this.flows = flows\n    }\n\n    writeLineToMainFunction(line: string) {\n        this.codes.splice(this.mainFunctionLineIndex, 0, this.createSpacing() + line)\n        this.mainFunctionLineIndex++\n    }\n\n    writeLine(line: string) {\n        this.codes.push(this.createSpacing() + line)\n    }\n\n    appendToLastLine(str: string) {\n        const lastIndex = this.codes.length - 1\n        let last = this.codes[lastIndex]\n        last += str\n        this.codes[lastIndex] = last\n    }\n\n    generateMain() {\n        this.writeLineToMainFunction(`fun main(args: Array<String\\>) {`)\n        this.scopeCount++\n\n        const initialFlow = this.flows.get(CodeWriter.INITIAL_ID)\n        if (initialFlow !== undefined) {\n            initialFlow.createMainCode()\n        } else {\n            console.log(\"No initial defined please define it with \" + CodeWriter.INITIAL_ID + \"!\")\n        }\n\n        this.scopeCount--\n        this.writeLineToMainFunction(\"}\")\n        this.writeLineToMainFunction(\"\")\n    }\n\n    writeFunction(func: Func) {\n        let returnTypeString = \"\"\n        if (func.returnType === undefined) {\n            returnTypeString += \"\"\n        } else {\n            returnTypeString += \": \" + func.returnType\n        }\n\n        let parameterString = \"\"\n\n        func.parameters.forEach((value, index) => {\n            parameterString += `${value.name}: ${value.type}`\n            if (index !== func.parameters.length - 1) {\n                parameterString += \", \"\n            }\n        })\n\n        this.writeLine(`fun ${func.functionName}(${parameterString})${returnTypeString}`)\n        this.appendToLastLine(\" {\")\n        this.scopeCount++\n\n        func.codeLines.forEach((value) => {\n                this.writeLine(value)\n            }\n        )\n\n        this.scopeCount--\n        this.writeLine(\"}\")\n        this.writeLine(\"\")\n    }\n\n    writeMainCodeFromFlow(id: string) {\n        const top = this.loopStack.top\n\n        if (!this.removeFromStackIfEquals(id)) {\n            const flow = this.flows.get(id)\n            if (flow !== undefined) {\n                console.log(\"Code for id \" + id + \" is being created!\")\n                return flow.createMainCode()\n            }\n\n            console.log(\"Something went horribly wrong!\")\n        } else {\n            console.log(\"Top with id \" + top + \" is popped!\")\n        }\n    }\n\n    /**\n     * Returns false if the set already contains variable true otherwise\n     */\n\n    addVariable(name: string | undefined): boolean {\n        name = name === undefined ? \"\" : name\n\n        console.log(\"Adding variable : \" + name + \" isContained: \" + this.variableSet.has(name))\n        if (this.variableSet.has(name)) {\n            return false\n        }\n\n        this.variableSet.add(name)\n        return true\n    }\n\n    addToLoopStack(id: string) {\n        console.log(\"Pushed to stack \" + id + \"!\")\n        this.loopStack.push(id)\n    }\n\n    /**\n     * Returns true if top equals index and pops it returns false otherwise.\n     */\n    removeFromStackIfEquals(id: string): boolean {\n        if (this.loopStack.top === id) {\n            this.loopStack.pop()\n            return true\n        }\n\n        return false\n    }\n\n    private createSpacing(): string {\n        let spacing = \"\"\n        for (let i = 0; i < this.scopeCount; i++) {\n            spacing += this.spacing\n        }\n\n        return spacing\n    }\n\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {ArithmeticOperationType, FlowType, VariableType} from \"../../models\"\nimport {Func, Parameter} from \"../Func\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class ArithmeticFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: ArithmeticFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: ArithmeticFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        let variableSetCode = \"\"\n\n        if (CodeWriter.getInstance().addVariable(this.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${this.content.variable.name} = ${this.functionInvocation()}`\n        )\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n        if (this.content == null)\n            return\n\n        const functionLines: string[] = []\n\n        const parameters: Parameter[] = []\n\n        if (this.content.operator1.type === OperatorType.VARIABLE) {\n            if (this.content.operator1.variableName != null) {\n                parameters.push(new Parameter(\n                    this.content.operator1.variableName,\n                    VariableType.INT.toString()))\n            }\n        }\n\n        if (this.content.operator2.type === OperatorType.VARIABLE) {\n            if (this.content.operator2.variableName != null) {\n                parameters.push(new Parameter(\n                    this.content.operator2.variableName,\n                    VariableType.INT.toString()))\n            }\n        }\n\n        let operationCode = \"\"\n        switch (this.content.operation) {\n            case ArithmeticOperationType.ADDITION:\n                operationCode = \"+\"\n                break\n            case ArithmeticOperationType.SUBTRACTION:\n                operationCode = \"-\"\n                break\n            case ArithmeticOperationType.MULTIPLICATION:\n                operationCode = \"*\"\n                break\n            case ArithmeticOperationType.DIVISION:\n                operationCode = \"/\"\n                break\n        }\n\n        let operator1Code = \"\"\n        let operator2Code = \"\"\n\n        switch (this.content.operator1.type) {\n            case OperatorType.CONSTANT:\n                operator1Code += this.content.operator1.constantValue\n                break\n            case OperatorType.VARIABLE:\n                operator1Code += this.content.operator1.variableName\n                break\n        }\n\n        switch (this.content.operator2.type) {\n            case OperatorType.CONSTANT:\n                operator2Code += this.content.operator2.constantValue\n                break\n            case OperatorType.VARIABLE:\n                operator2Code += this.content.operator2.variableName\n                break\n        }\n\n        functionLines.push(`return ${operator1Code} ${operationCode} ${operator2Code}`)\n\n        const func = new Func(\n            this.functionName(),\n            parameters,\n            VariableType.INT.toString(),\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n\n    }\n\n    functionInvocation(): string {\n        if (this.content == null)\n            return \"\"\n\n        let functionCode = `${this.functionName()}(`\n\n        switch (this.content.operator1.type) {\n            case OperatorType.CONSTANT:\n                break\n            case OperatorType.VARIABLE:\n                functionCode += this.content.operator1.variableName\n                break\n        }\n\n        switch (this.content.operator2.type) {\n            case OperatorType.CONSTANT:\n                break\n            case OperatorType.VARIABLE:\n                functionCode += `, ${this.content.operator2.variableName}`\n                break\n        }\n\n        functionCode += \")\"\n        return functionCode\n    }\n\n    functionName(): string {\n        return `arithmeticFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class ArithmeticFlowContent {\n    variable: Variable\n    operation: ArithmeticOperationType\n    operator1: Operator\n    operator2: Operator\n\n    constructor(\n        variable: Variable,\n        operation: ArithmeticOperationType,\n        operator1: Operator,\n        operator2: Operator,\n    ) {\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n    }\n}\n\nexport class Operator {\n    type: OperatorType\n    variableName: string | undefined\n    constantValue: number\n\n    constructor(\n        type: OperatorType,\n        name: string | undefined,\n        value: number\n    ) {\n        this.type = type\n        this.variableName = name\n        this.constantValue = value\n    }\n}\n\nexport enum OperatorType {\n    CONSTANT = \"Constant\",\n    VARIABLE = \"Variable\"\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ArithmeticOperationType, VariableType} from \"../../../models\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport {Operator, OperatorType} from \"../../../generator/flows/ArithmeticFlow\"\n\nexport interface ArithmeticPropertiesProps extends BasePropertiesProps {\n    variables: Variable[]\n}\n\nexport class ArithmeticProperties extends BaseProperties<ArithmeticPropertiesProps> {\n\n    constructor(props: ArithmeticPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as ArithmeticFlowNode\n\n            this.state = {\n                variable: JSON.stringify(node.getVariable()),\n                operation: node.getOperation(),\n                operator1: JSON.stringify(node.getOperator1()),\n                operator2: JSON.stringify(node.getOperator2())\n            }\n        } else {\n            this.state = {\n                variable: \"\",\n                operation: \"\",\n                operator1: \"\",\n                operator2: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.variable}\n                    value={this.state.variable}\n                    onChange={this.handleStringChange(\"variable\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.operation}\n                    value={this.state.operation}\n                    onChange={this.handleStringChange(\"operation\")}\n                    margin=\"normal\">\n                    {Object.keys(ArithmeticOperationType).map((value: any) => (\n                        <MenuItem key={value} value={ArithmeticOperationType[value]}>\n                            {ArithmeticOperationType[value]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.firstOperator}\n                    value={this.state.operator1}\n                    onChange={this.handleStringChange(\"operator1\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(new Operator(OperatorType.VARIABLE, value.name, value.value))}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.secondOperator}\n                    value={this.state.operator2}\n                    onChange={this.handleStringChange(\"operator2\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(new Operator(OperatorType.VARIABLE, value.name, value.value))}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {Checkbox, FormControlLabel, MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\n\nexport class AssignmentProperties extends BaseProperties {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n        \n        if (props.node !== undefined) {\n            const node = props.node as AssignmentFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                variableType: node.getVariable().type,\n                value: node.getVariable().value,\n                isNull: node.getVariable().value === \"NULL\"\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                variableType: \"\",\n                value: \"\",\n                isNull: false\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"variable-name-input\"\n                    label={strings.variableName}\n                    value={this.state.variableName}\n                    inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                    onChange={this.handleStringChange(\"variableName\")}\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.dataType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\", (value) => {\n                        this.setState({value: \"\"})\n                    })}\n                    margin=\"normal\">\n                    {Object.keys(VariableType).map((key: any) => (\n                        <MenuItem key={key} value={VariableType[key]}>\n                            {VariableType[key]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <div style={{display: this.state.variableType !== \"\" ? \"initial\" : \"none\"}}>\n                    <div\n                        style={{\n                            display: this.state.variableType !== VariableType.BOOLEAN ? \"flex\" : \"none\",\n                            flexDirection: \"row\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                            alignContent: \"center\",\n                            textAlign: \"center\"\n                        }}>\n                        <TextField\n                            style={{flex: 1}}\n                            id=\"value-input\"\n                            label={strings.value}\n                            value={this.state.isNull ? \"NULL\" : this.state.value}\n                            type={this.state.variableType === VariableType.INT ? \"number\" : \"text\"}\n                            onChange={this.handleStringChange(\"value\")}\n                            margin=\"normal\"\n                            disabled={this.state.isNull}\n                        />\n                        <FormControlLabel\n                            style={{display: this.state.variableType === VariableType.STRING ? \"inherit\" : \"none\"}}\n                            control={\n                                <Checkbox\n                                    checked={this.state.isNull}\n                                    onChange={this.handleBooleanChange(\"isNull\", (value: boolean) => {\n                                        this.setState({value: value ? \"NULL\" : \"\"})\n                                    })}\n                                    value=\"true\"\n                                    color=\"primary\"/>\n                            }\n                            label=\"NULL\"\n                        />\n                    </div>\n                    <TextField\n                        style={{display: this.state.variableType === VariableType.BOOLEAN ? \"flex\" : \"none\"}}\n                        id=\"boolean-value-input\"\n                        select\n                        label={strings.value}\n                        value={this.state.value}\n                        onChange={this.handleStringChange(\"value\")}\n                        margin=\"normal\">\n                        <MenuItem key={\"true\"} value={\"true\"}>\n                            True\n                        </MenuItem>\n                        <MenuItem key={\"false\"} value={\"false\"}>\n                            False\n                        </MenuItem>\n                    </TextField>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {InputFlowNode} from \"./InputFlowNode\"\n\nexport class InputProperties extends BaseProperties {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as InputFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                variableType: node.getVariable().type\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                variableType: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"variable-name-input\"\n                    label={strings.variableName}\n                    value={this.state.variableName}\n                    inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                    onChange={this.handleStringChange(\"variableName\")}\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.dataType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\")}\n                    margin=\"normal\">\n                    {Object.keys(VariableType).map((key: any) => (\n                        <MenuItem key={key} value={VariableType[key]}>\n                            {VariableType[key]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\n\nexport interface OutputPropertiesProps extends BasePropertiesProps {\n    variables: Variable[]\n}\n\nexport class OutputProperties extends BaseProperties<OutputPropertiesProps> {\n\n    constructor(props: OutputPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as OutputFlowNode\n\n            this.state = {\n                variable: node.getVariable().name\n            }\n        } else {\n            this.state = {\n                variable: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.variable}\n                    value={this.state.variable}\n                    onChange={this.handleStringChange(\"variable\")}\n                    margin=\"normal\">\n                    {this.props.variables.map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import {FlowType} from \"../../models\"\nimport {BasePropertiesState} from \"./Base/BaseProperties\"\nimport {Variable} from \"../../models/Variable\"\nimport {WhileProperties} from \"./While/WhileProperties\"\nimport {ArithmeticProperties} from \"./Arithmetic/ArithmeticProperties\"\nimport {AssignmentProperties} from \"./Assignment/AssignmentProperties\"\nimport {InputProperties} from \"./Input/InputProperties\"\nimport {OutputProperties} from \"./Output/OutputProperties\"\nimport React from \"react\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport class FlowPropertiesFactory {\n    private constructor() {\n    }\n\n    static create(type: FlowType | null | undefined, variables: Variable[], onDataChanged: (data: BasePropertiesState) => void, node?: BaseFlowNode): JSX.Element {\n        switch (type) {\n            case FlowType.WHILE:\n                return (<WhileProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ARITHMETIC:\n                return (<ArithmeticProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ASSIGNMENT:\n                return (<AssignmentProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.INPUT:\n                return (<InputProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.OUTPUT:\n                return (<OutputProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            default:\n                return (<div/>)\n        }\n    }\n}\n","import {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport abstract class BaseFlowModelGenerator {\n    abstract generate(flow: BaseFlowNode): FlowModel\n}\n","import {ArithmeticFlowContent} from \"./flows/ArithmeticFlow\"\nimport {OutputFlowContent} from \"./flows/OutputFlow\"\nimport {InputFlowContent} from \"./flows/InputFlow\"\nimport {AssignmentFlowContent} from \"./flows/AssignmentFlow\"\nimport {WhileFlowContent} from \"./flows/WhileFlow\"\nimport {FlowType} from \"../models\"\n\nexport class FlowModel {\n    type: FlowType\n    id: string\n    assignmentFlowContent: AssignmentFlowContent | null\n    inputFlowContent: InputFlowContent | null\n    outputFlowContent: OutputFlowContent | null\n    arithmeticFlowContent: ArithmeticFlowContent | null\n    whileFlowContent: WhileFlowContent | null\n    // forFlowContent: ForFlowContent,\n    // ifFlowContent: IfFlowContent,\n    nextFlowId: string | null\n\n    constructor(\n        type: FlowType,\n        id: string,\n        assignmentFlowContent: AssignmentFlowContent | null = null,\n        inputFlowContent: InputFlowContent | null = null,\n        outputFlowContent: OutputFlowContent | null = null,\n        arithmeticFlowContent: ArithmeticFlowContent | null = null,\n        whileFlowContent: WhileFlowContent | null = null,\n        nextFlowId: string | null\n        // forFlowContent: ForFlowContent,\n        // ifFlowContent: IfFlowContent,\n\n    ) {\n        this.type = type\n        this.id = id\n        this.assignmentFlowContent = assignmentFlowContent\n        this.inputFlowContent = inputFlowContent\n        this.outputFlowContent = outputFlowContent\n        this.arithmeticFlowContent = arithmeticFlowContent\n        this.whileFlowContent = whileFlowContent\n        this.nextFlowId = nextFlowId\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Condition} from \"../../models/Condition\"\nimport {ConditionOperation, FlowType} from \"../../models/VariableEnums\"\n\nexport class WhileFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: WhileFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: WhileFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    createFunctionCode(): void {\n        //\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        const nextScopeId = this.content.scopeId\n\n        let conditionCode = \"\"\n        this.content.conditions.forEach((condition) => {\n            conditionCode += condition.first.name\n\n            if (condition.second !== null) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                }\n\n                conditionCode += \" \" + condition.second.name\n            }\n        })\n\n        CodeWriter.getInstance().writeLineToMainFunction(\"while(\" + conditionCode + \") {\")\n        CodeWriter.getInstance().scopeCount++\n\n        if (nextScopeId != null) {\n            CodeWriter.getInstance().addToLoopStack(this.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(nextScopeId)\n        }\n\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    functionInvocation(): string {\n        return \"\"\n    }\n\n    functionName(): string {\n        return \"\"\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n}\n\nexport class WhileFlowContent {\n    conditions: Condition[]\n    scopeId: string | null\n\n    constructor(\n        conditions: Condition[],\n        scopeId: string | null,\n    ) {\n        this.conditions = conditions\n        this.scopeId = scopeId\n    }\n\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\nimport {WhileFlowContent} from \"../../../generator/flows/WhileFlow\"\n\nexport class WhileFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const whileFlow = flow as WhileFlowNode\n\n        const nextFlow = whileFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n        const scopeFlow = whileFlow.getScopeFlow()\n        const scopeFlowId = scopeFlow ? scopeFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.WHILE,\n            whileFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            new WhileFlowContent(\n                whileFlow.conditionList,\n                scopeFlowId\n            ),\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType, VariableType} from \"../../models/VariableEnums\"\nimport {Func, Parameter} from \"../Func\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class InputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: InputFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: InputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(this.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${this.content.variable.name} = ${this.functionInvocation()}`\n        )\n\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n        if (this.content == null)\n            return\n\n        const functionLines: string[] = []\n        functionLines.push(`println(\"Please enter value for ${this.content.variable.name}\")`)\n\n        let scanCode = \"\"\n        switch (this.content.variable.type) {\n            case VariableType.INT:\n                scanCode = \"readLine()!!.toInt()\"\n                break\n            case VariableType.STRING:\n                scanCode = \"readLine()\"\n                break\n            default:\n                break\n        }\n\n        functionLines.push(`return ${scanCode}`)\n\n        const parameters: Parameter[] = []\n\n        const func = new Func(\n            this.functionName(),\n            parameters,\n            this.content.variable.type.toString(),\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `inputFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class InputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {InputFlowNode} from \"./InputFlowNode\"\nimport {InputFlowContent} from \"../../../generator/flows/InputFlow\"\n\nexport class InputFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const inputFlow = flow as InputFlowNode\n\n        const nextFlow = inputFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.INPUT,\n            inputFlow.getID(),\n            null,\n            new InputFlowContent(inputFlow.getVariable()),\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {Func, Parameter} from \"../Func\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\nimport {FlowType} from \"../../models\"\n\nexport class OutputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: OutputFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: OutputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    createMainCode(): void {\n        CodeWriter.getInstance().writeLineToMainFunction(this.functionInvocation())\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n        if (this.content == null || this.content.variable.name === undefined)\n            return\n\n        const functionLines: string[] = []\n        const parameters: Parameter[] = [\n            new Parameter(\n                this.content.variable.name,\n                this.content.variable.type.toString()\n            )\n        ]\n\n        const func = new Func(\n            this.functionName(),\n            parameters,\n            undefined,\n            functionLines\n        )\n\n        functionLines.push(`println(\"Value of ${this.content.variable.name} is \\${${this.content.variable.name}}\")`)\n        CodeWriter.getInstance().writeFunction(func)\n\n    }\n\n    functionInvocation(): string {\n        return this.content != null ? `${this.functionName()}(${this.content.variable.name})` : \"\"\n    }\n\n    functionName(): string {\n        return `outputFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class OutputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\nimport {OutputFlowContent} from \"../../../generator/flows/OutputFlow\"\n\nexport class OutputFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const outputFlow = flow as OutputFlowNode\n\n        const nextFlow = outputFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.OUTPUT,\n            outputFlow.getID(),\n            null,\n            null,\n            new OutputFlowContent(outputFlow.getVariable()),\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport {ArithmeticFlowContent} from \"../../../generator/flows/ArithmeticFlow\"\n\nexport class ArithmeticFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const arithmeticFlow = flow as ArithmeticFlowNode\n\n        const nextFlow = arithmeticFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.ARITHMETIC,\n            arithmeticFlow.getID(),\n            null,\n            null,\n            null,\n            new ArithmeticFlowContent(\n                arithmeticFlow.getVariable(),\n                arithmeticFlow.getOperation(),\n                arithmeticFlow.getOperator1(),\n                arithmeticFlow.getOperator2()\n            ),\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType, VariableType} from \"../../models\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class AssignmentFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: AssignmentFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: AssignmentFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    createMainCode(): void {\n        if (this.content == null)\n            return\n\n        let contentString = \"\"\n        switch (this.content.variable.type) {\n            case VariableType.INT:\n                contentString = this.content.variable.value.toString()\n                break\n            case VariableType.STRING:\n                contentString = `\"${this.content.variable.value}\"`\n                break\n            default:\n                console.log(\"default...\")\n                break\n        }\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(this.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(`${variableSetCode}${this.content.variable.name} = ${contentString}`)\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    createFunctionCode(): void {\n\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `assignmentFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class AssignmentFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {AssignmentFlowContent} from \"../../../generator/flows/AssignmentFlow\"\n\nexport class AssignmentFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const assignmentFlow = flow as AssignmentFlowNode\n\n        const nextFlow = assignmentFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.ASSIGNMENT,\n            assignmentFlow.getID(),\n            new AssignmentFlowContent(assignmentFlow.getVariable()),\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {InitialFlowNode} from \"./InitialFlowNode\"\n\nexport class InitialFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const initialFlow = flow as InitialFlowNode\n\n        const nextFlow = initialFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.INITIAL,\n            flow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {FlowType} from \"../../models\"\nimport {FlowModel} from \"../../generator/FlowModelJSON\"\nimport {WhileFlowModelGenerator} from \"./While/WhileFlowModelGenerator\"\nimport {InputFlowModelGenerator} from \"./Input/InputFlowModelGenerator\"\nimport {OutputFlowModelGenerator} from \"./Output/OutputFlowModelGenerator\"\nimport {ArithmeticFlowModelGenerator} from \"./Arithmetic/ArithmeticFlowModelGenerator\"\nimport {AssignmentFlowModelGenerator} from \"./Assignment/AssignmentFlowModelGenerator\"\nimport {InitialFlowModelGenerator} from \"./Initial/InitialFlowModelGenerator\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport class FlowModelFactory {\n    private constructor() {\n    }\n\n    static create(baseFlow: BaseFlowNode): FlowModel | null {\n        switch (baseFlow.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowModelGenerator().generate(baseFlow)\n            case FlowType.IF:\n                return null // TODO\n            case FlowType.WHILE:\n                return new WhileFlowModelGenerator().generate(baseFlow)\n            case FlowType.FOR:\n                return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowModelGenerator().generate(baseFlow)\n            case FlowType.OUTPUT:\n                return new OutputFlowModelGenerator().generate(baseFlow)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowModelGenerator().generate(baseFlow)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowModelGenerator().generate(baseFlow)\n            default:\n                return null\n        }\n    }\n}\n","import {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowModel} from \"../../generator/FlowModelJSON\"\nimport {FlowModelFactory} from \"./FlowModelFactory\"\nimport {FlowType} from \"../../models\"\nimport {WhileFlowNode} from \"./While/WhileFlowNode\"\nimport * as _ from \"lodash\"\n\nexport class FlowModelGenerator {\n\n    private constructor() {\n    }\n\n    static generate(initialFlow: BaseFlowNode | null): FlowModel[] {\n        const flowModelList: FlowModel[] = []\n\n        this.generateFlowModel(initialFlow, flowModelList)\n\n        return flowModelList\n    }\n\n    private static generateFlowModel(currentFlow: BaseFlowNode | null, flowModelList: FlowModel[], scopeId: string | null = null) {\n        if (currentFlow == null || (scopeId != null && currentFlow.getID() === scopeId))\n            return\n\n        // Check if the node has been visited before\n        if (_.includes(flowModelList.map((flow) => flow.id), currentFlow.getID()))\n            return\n\n        switch (currentFlow.flowType) {\n            case FlowType.WHILE:\n                this.generateFlowModel((currentFlow as WhileFlowNode).getScopeFlow(), flowModelList, currentFlow.getID())\n                break\n        }\n\n        const flowModel = FlowModelFactory.create(currentFlow)\n        if (flowModel)\n            flowModelList.push(flowModel)\n\n        this.generateFlowModel(currentFlow.getNextFlow(), flowModelList, scopeId)\n    }\n}\n","import React, {Component} from \"react\"\nimport {Dialog, DialogTitle} from \"@material-ui/core\"\nimport {DialogProps} from \"@material-ui/core/Dialog\"\nimport Button from \"@material-ui/core/Button\"\nimport strings from \"../../lang\"\nimport styles from \"./AddNodeDialog.module.css\"\nimport {BasePropertiesState} from \"../Flows/Base/BaseProperties\"\nimport {Variable} from \"../../models/Variable\"\nimport {FlowType} from \"../../models\"\nimport {FlowPropertiesFactory} from \"../Flows\"\n\nexport interface AddNodeDialogProps extends DialogProps {\n    onSaveClick: (data: BasePropertiesState | null) => void,\n    onDismissClick: () => void,\n    type: FlowType | null,\n    variables: Variable[]\n}\n\nexport interface AddNodeDialogState {\n    bodyData: BasePropertiesState | null\n}\n\nexport class AddNodeDialog extends Component<AddNodeDialogProps, AddNodeDialogState> {\n    static defaultProps = {\n        variables: []\n    }\n\n    constructor(props: AddNodeDialogProps) {\n        super(props)\n\n        this.state = {\n            bodyData: null\n        }\n    }\n\n    onBodyChanged(data: BasePropertiesState) {\n        this.setState({bodyData: data})\n    }\n\n    onSave() {\n        if (this.props.onSaveClick != null)\n            this.props.onSaveClick(this.state.bodyData)\n    }\n\n    onDismiss() {\n        if (this.props.onDismissClick != null)\n            this.props.onDismissClick()\n    }\n\n    render() {\n        return (\n            <Dialog aria-labelledby=\"simple-dialog-title\" {...this.props}>\n                <DialogTitle id=\"simple-dialog-title\">Set Properties</DialogTitle>\n                <div className={styles.addNodeDialogBody}>\n                    {FlowPropertiesFactory.create(this.props.type, this.props.variables, this.onBodyChanged.bind(this))}\n                </div>\n                <div className={styles.addNodeDialogButtonContainer}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.onDismiss.bind(this)}>\n                        {strings.dismiss}\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.onSave.bind(this)}>\n                        {strings.save}\n                    </Button>\n                </div>\n            </Dialog>\n        )\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\";\nimport {FlowType} from \"../../models\";\nimport {CodeWriter} from \"../code/CodeWriter\";\n\nexport class InitialFlow implements BaseFlow {\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.functionCallName = \"\"\n    }\n\n    createFunctionCode(): void {\n    }\n\n    createMainCode(): void {\n        CodeWriter.getInstance().writeMainCodeFromFlow(this.nextFlow())\n    }\n\n    functionInvocation(): string {\n        return \"\";\n    }\n\n    functionName(): string {\n        return \"\";\n    }\n\n    hasExternalDependencies(): boolean {\n        return false;\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n}\n","import {CodeWriter} from \"./code/CodeWriter\";\nimport {BaseFlow} from \"./flows/BaseFlow\";\nimport {FlowModel} from \"./FlowModelJSON\";\nimport {AssignmentFlow} from \"./flows/AssignmentFlow\";\nimport {InputFlow} from \"./flows/InputFlow\";\nimport {OutputFlow} from \"./flows/OutputFlow\";\nimport {ArithmeticFlow} from \"./flows/ArithmeticFlow\";\nimport {WhileFlow} from \"./flows/WhileFlow\";\nimport {FlowType} from \"../models\";\nimport {InitialFlow} from \"./flows/InitialFlow\";\n\nexport class CodeGenerator {\n\n    private readonly flowJson: string\n\n    constructor(flowJson: string) {\n        this.flowJson = flowJson\n    }\n\n    generate(): string {\n        CodeWriter.getInstance().reset()\n        CodeWriter.getInstance().setFlows(this.convertToFlowObjects(JSON.parse(this.flowJson)))\n\n        CodeWriter.getInstance().flows.forEach((value) => {\n            console.log(\"Creating function code\")\n            value.createFunctionCode()\n        })\n\n        CodeWriter.getInstance().generateMain()\n\n        return CodeWriter.getInstance().codes.join(\"\\n\")\n    }\n\n    private convertToFlowObjects(flowModels: FlowModel[]): Map<string, BaseFlow> {\n        const baseFlowMap = new Map<string, BaseFlow>()\n\n        flowModels.forEach((value) => {\n\n                switch (value.type) {\n                    case FlowType.INITIAL:\n                        baseFlowMap.set(CodeWriter.INITIAL_ID, new InitialFlow(\n                            CodeWriter.INITIAL_ID,\n                            value.nextFlowId,\n                            value.type\n                        ))\n                        break\n                    case FlowType.ASSIGNMENT:\n                        baseFlowMap.set(value.id, new AssignmentFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.assignmentFlowContent\n                        ))\n                        break\n                    case FlowType.INPUT:\n                        baseFlowMap.set(value.id, new InputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.inputFlowContent\n                        ))\n                        break\n                    case FlowType.OUTPUT:\n                        baseFlowMap.set(value.id, new OutputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.outputFlowContent\n                        ))\n                        break\n                    case FlowType.ARITHMETIC:\n                        baseFlowMap.set(value.id, new ArithmeticFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.arithmeticFlowContent\n                        ))\n                        break\n                    case FlowType.WHILE:\n                        baseFlowMap.set(value.id, new WhileFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.whileFlowContent\n                        ))\n                        break\n                    /*\n                    case \"if\":\n                        baseFlowList.push(new IfFlow(\n                            value.id,\n                            value.type,\n                            value.ifFlowContent\n                        ))\n                        break\n                    case \"for\":\n                        baseFlowList.push(new ForFlow(\n                            value.id,\n                            value.type,\n                            value.forFlowContent\n                        ))\n                        break\n                     */\n\n                    default :\n                        break\n\n                }\n            }\n        )\n\n        return baseFlowMap\n    }\n}\n","import {AbstractPortFactory, PortModel} from \"nberktumer-react-diagrams\"\n\nexport class PortFactory extends AbstractPortFactory {\n    cb: (initialConfig?: any) => PortModel\n\n    constructor(type: string, cb: (initialConfig?: any) => PortModel) {\n        super(type)\n        this.cb = cb\n    }\n\n    getNewInstance(initialConfig?: any): PortModel {\n        return this.cb(initialConfig)\n    }\n}\n","import * as React from \"react\"\nimport * as _ from \"lodash\"\nimport {BaseWidget, BaseWidgetProps} from \"nberktumer-react-diagrams\"\nimport {BaseFlowNode} from \"./BaseFlowNode\"\nimport styles from \"./BaseFlow.module.css\"\nimport {DefaultPortLabel, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../../Ports/DefaultPort\"\n\nexport interface RectangleNodeWidgetProps extends BaseWidgetProps {\n    node: BaseFlowNode;\n}\n\nexport interface RectangleNodeWidgetState {\n}\n\nexport class BaseFlowWidget extends BaseWidget<RectangleNodeWidgetProps, RectangleNodeWidgetState> {\n    constructor(props: RectangleNodeWidgetProps) {\n        super(\"srd-default-node\", props)\n        this.state = {}\n    }\n\n    generatePort(port: DefaultPortModel) {\n        return <DefaultPortLabel model={port} key={port.id}/>\n    }\n\n    render() {\n        return (\n            <div {...this.getProps()} style={{background: this.props.node.color}}>\n                <div className={styles.rectangleNodeTitle}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.name}</div>\n                </div>\n                <div className={styles.rectangleNodePorts}>\n                    <div className={styles.rectangleNodeIn}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.LEFT), this.generatePort.bind(this))}\n                    </div>\n                    <div className={styles.rectangleNodeOut}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.RIGHT), this.generatePort.bind(this))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as SRD from \"nberktumer-react-diagrams\"\nimport * as React from \"react\"\nimport {BaseFlowNode} from \"./BaseFlowNode\"\nimport {BaseFlowWidget} from \"./BaseFlowWidget\"\n\nexport class BaseFlowFactory extends SRD.AbstractNodeFactory {\n    constructor() {\n        super(\"base-flow\")\n    }\n\n    generateReactWidget(diagramEngine: SRD.DiagramEngine, node: BaseFlowNode): JSX.Element {\n        return <BaseFlowWidget node={node}/>\n    }\n\n    getNewInstance() {\n        return new BaseFlowNode()\n    }\n}\n","import * as React from \"react\"\nimport * as _ from \"lodash\"\nimport {BaseWidget, BaseWidgetProps} from \"nberktumer-react-diagrams\"\nimport styles from \"../BaseFlow/BaseFlow.module.css\"\nimport {BaseInfoFlowNode} from \"./BaseInfoFlowNode\"\nimport {DefaultPortLabel, DefaultPortLocation, DefaultPortModel} from \"../../Ports/DefaultPort\"\n\nexport interface RectangleNodeWithInfoWidgetProps extends BaseWidgetProps {\n    node: BaseInfoFlowNode;\n}\n\nexport interface RectangleNodeWithInfoWidgetState {\n}\n\nexport class BaseInfoFlowWidget extends BaseWidget<RectangleNodeWithInfoWidgetProps, RectangleNodeWithInfoWidgetState> {\n    constructor(props: RectangleNodeWithInfoWidgetProps) {\n        super(\"srd-default-node\", props)\n        this.state = {}\n    }\n\n    generatePort(port: DefaultPortModel) {\n        return <DefaultPortLabel model={port} key={port.id}/>\n    }\n\n    render() {\n        return (\n            <div {...this.getProps()} style={{background: this.props.node.color}}>\n                <div className={styles.rectangleNodeTitle}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.name}</div>\n                </div>\n                <div className={styles.rectangleNodeInfo}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.info}</div>\n                </div>\n                <div className={styles.rectangleNodePorts}>\n                    <div className={styles.rectangleNodeIn}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.LEFT), this.generatePort.bind(this))}\n                    </div>\n                    <div className={styles.rectangleNodeOut}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.RIGHT), this.generatePort.bind(this))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as SRD from \"nberktumer-react-diagrams\"\nimport * as React from \"react\"\nimport {BaseInfoFlowNode} from \"./BaseInfoFlowNode\"\nimport {BaseInfoFlowWidget} from \"./BaseInfoFlowWidget\"\n\nexport class BaseInfoFlowFactory extends SRD.AbstractNodeFactory {\n    constructor() {\n        super(\"base-info-flow\")\n    }\n\n    generateReactWidget(diagramEngine: SRD.DiagramEngine, node: BaseInfoFlowNode): JSX.Element {\n        return <BaseInfoFlowWidget node={node}/>\n    }\n\n    getNewInstance() {\n        return new BaseInfoFlowNode()\n    }\n}\n","import React, {Component} from \"react\"\nimport styles from \"./CanvasPanel.module.css\"\nimport * as _ from \"lodash\"\nimport {BaseEvent, BaseModel, DiagramEngine, DiagramModel, DiagramWidget} from \"nberktumer-react-diagrams\"\nimport {FlowType} from \"../../models\"\nimport {PortFactory} from \"../CanvasItems/Ports/PortFactory\"\nimport {BaseFlowFactory} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowFactory\"\nimport {BaseInfoFlowFactory} from \"../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowFactory\"\nimport {BasePropertiesState} from \"../Flows/Base/BaseProperties\"\nimport {DefaultPort, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../CanvasItems/Ports/DefaultPort\"\nimport {Variable} from \"../../models/Variable\"\nimport {InitialFlowNode} from \"../Flows/Initial/InitialFlowNode\"\nimport {FlowNodeFactory} from \"../Flows\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport interface CanvasPanelProps {\n    variableList: Variable[]\n    onDrop: (type: FlowType, position: { x: number, y: number }) => void,\n    onDiagramChanged: () => void,\n    onSectionChanged: (event: BaseEvent<BaseModel> & { isSelected: boolean }) => void,\n    onEntityRemoved: (event: BaseEvent<BaseModel>) => void,\n    onItemAdded: (flow: BaseFlowNode) => void\n}\n\nexport interface CanvasPanelState {\n}\n\nexport default class CanvasPanel extends Component<CanvasPanelProps, CanvasPanelState> {\n    activeModel: DiagramModel\n    diagramEngine: DiagramEngine\n    initialNode: InitialFlowNode\n\n    constructor(props: CanvasPanelProps) {\n        super(props)\n\n        this.diagramEngine = new DiagramEngine()\n        this.diagramEngine.installDefaultFactories()\n\n        this.diagramEngine.registerNodeFactory(new BaseFlowFactory())\n        this.diagramEngine.registerNodeFactory(new BaseInfoFlowFactory())\n        this.diagramEngine.registerPortFactory(new PortFactory(\"default\", () => new DefaultPortModel(\n            new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), \"unknown\")))\n\n        this.activeModel = new DiagramModel()\n        this.diagramEngine.setDiagramModel(this.activeModel)\n\n        _.forEach(this.activeModel.getNodes(), (item) => {\n            item.addListener({\n                selectionChanged: this.props.onSectionChanged.bind(this),\n                entityRemoved: this.props.onEntityRemoved.bind(this)\n            })\n        })\n\n        this.initialNode = FlowNodeFactory.create(FlowType.INITIAL, undefined) as InitialFlowNode\n        this.initialNode.addListener({\n            selectionChanged: this.props.onSectionChanged.bind(this),\n            entityRemoved: this.props.onEntityRemoved.bind(this)\n        })\n\n        this.initialNode.x = window.innerWidth * 0.1\n        this.initialNode.y = window.innerHeight * 0.4\n\n        this.diagramEngine.getDiagramModel().addNode(this.initialNode)\n    }\n\n    addItem(type: FlowType, data: BasePropertiesState, position: { x: number, y: number }): void {\n        const node = FlowNodeFactory.create(type, data)\n        if (!node)\n            return\n\n        node.x = position.x\n        node.y = position.y\n\n        node.addOnLinkChangedListener(this.props.onDiagramChanged.bind(this))\n        node.addListener({\n            selectionChanged: this.props.onSectionChanged.bind(this),\n            entityRemoved: this.props.onEntityRemoved.bind(this)\n        })\n\n        this.diagramEngine.getDiagramModel().addNode(node)\n\n        this.props.onItemAdded(node)\n        this.forceUpdate()\n    }\n\n    render() {\n        return (\n            <div\n                className={styles.diagramLayer}\n                onDrop={(event) => this.onDrop(event)}\n                onDragOver={(event) => event.preventDefault()}>\n\n                <DiagramWidget\n                    maxNumberPointsPerLink={0}\n                    allowLooseLinks={false}\n                    className={styles.srdDemoCanvas}\n                    diagramEngine={this.diagramEngine}/>\n            </div>\n        )\n    }\n\n    private onDrop(event: any): void {\n        const data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"))\n\n        if (!Object.values(FlowType).includes(data.type))\n            return\n\n        const points = this.diagramEngine.getRelativeMousePoint(event)\n\n        this.props.onDrop(data.type, points)\n    }\n}\n","import React, {Component, createRef} from \"react\"\nimport styles from \"./Editor.module.css\"\nimport {ReflexContainer, ReflexElement, ReflexSplitter} from \"react-reflex\"\nimport {ShapePanel} from \"../../components/ShapePanel/ShapePanel\"\nimport {ShapeItem} from \"../../components/ShapePanel/ShapeItem\"\nimport {CodePreviewPanel} from \"../../components/CodePreviewPanel/CodePreviewPanel\"\nimport {FlowType, ProgrammingLanguage} from \"../../models\"\nimport {ProjectTreePanel} from \"../../components/ProjectTreePanel/ProjectTreePanel\"\nimport {AddNodeDialog} from \"../../components/AddNodeDialog/AddNodeDialog\"\nimport {BasePropertiesState} from \"../../components/Flows/Base/BaseProperties\"\nimport {CodeGenerator} from \"../../generator/CodeGenerator\"\nimport {Variable} from \"../../models/Variable\"\nimport CanvasPanel from \"../../components/CanvasPanel/CanvasPanel\"\nimport {FlowModelGenerator, FlowPropertiesFactory} from \"../../components/Flows\"\nimport {BaseEvent, BaseModel} from \"nberktumer-react-diagrams\"\nimport {BaseFlowNode} from \"../../components/CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BaseVariableFlowNode} from \"../../components/Flows/Base/BaseVariableFlowNode\"\n\nexport interface EditorProps {\n}\n\nexport interface EditorState {\n    height: string | undefined,\n    width: string | undefined,\n    isModalOpen: boolean,\n    flowType: FlowType | null,\n    flowPosition: { x: number, y: number },\n    generatedCode: string,\n    variableList: Variable[],\n    properties: JSX.Element,\n    selectedItem: string\n}\n\nexport default class Editor extends Component<EditorProps, EditorState> {\n    canvasPanel = createRef<CanvasPanel>()\n\n    constructor(props: any) {\n        super(props)\n\n        const generator = new CodeGenerator(\"[]\")\n\n        this.state = {\n            height: \"1px\",\n            width: \"1px\",\n            isModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0},\n            generatedCode: generator.generate(),\n            variableList: [],\n            properties: <div/>,\n            selectedItem: \"\"\n        }\n    }\n\n    onModalSaveClick(data: BasePropertiesState | null) {\n        this.onModalClose()\n        console.log(this.state.flowType, data)\n        if (data && this.canvasPanel.current && this.state.flowType)\n            this.canvasPanel.current.addItem(this.state.flowType, data, this.state.flowPosition)\n    }\n\n    onModalDismissClick() {\n        this.onModalClose()\n    }\n\n    onModalClose() {\n        this.setState({\n            isModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0}\n        })\n    }\n\n    onDiagramChanged() {\n        if (!this.canvasPanel.current)\n            return\n\n        const flowModelList = FlowModelGenerator.generate(this.canvasPanel.current.initialNode)\n        console.log(flowModelList)\n        const generator = new CodeGenerator(JSON.stringify(flowModelList))\n        this.setState({generatedCode: generator.generate()})\n    }\n\n    onCanvasDrop(type: FlowType, position: { x: number, y: number }) {\n        this.setState({\n            isModalOpen: true,\n            flowType: type,\n            flowPosition: position\n        })\n    }\n\n    onItemAdded(flow: BaseFlowNode) {\n        if (flow instanceof BaseVariableFlowNode) {\n            this.state.variableList.push((flow as BaseVariableFlowNode).getVariable())\n        }\n    }\n\n    onEntityRemoved(event: BaseEvent<BaseModel>) {\n        if (event.entity instanceof BaseVariableFlowNode) {\n            const newVariableList = this.state.variableList.filter((value) => {\n                return value.name !== (event.entity as BaseVariableFlowNode).getVariable().name\n            })\n\n            this.setState({variableList: newVariableList})\n        }\n\n        if (event.entity.getID() === this.state.selectedItem) {\n            this.setState({properties: (<div/>), selectedItem: \"\"})\n        }\n    }\n\n    onSelectionChanged(event: BaseEvent<BaseModel> & { isSelected: boolean }) {\n        if (!this.canvasPanel.current || !(event.entity instanceof BaseFlowNode))\n            return\n\n        const selectedItems = this.canvasPanel.current.diagramEngine.diagramModel.getSelectedItems().filter((item) => {\n            return item instanceof BaseFlowNode\n        })\n\n        if (selectedItems.length > 1) {\n            this.setState({properties: (<div/>), selectedItem: \"\"})\n        } else if (selectedItems.length === 1 && event.isSelected) {\n            // Workaround for updating the properties panel\n            this.setState({properties: <div/>}, () => {\n                const properties = FlowPropertiesFactory.create((event.entity as BaseFlowNode).flowType, this.state.variableList, (data: BasePropertiesState) => {\n                    (event.entity as BaseFlowNode).updateNode(data)\n                    this.onDiagramChanged()\n                }, event.entity as BaseFlowNode)\n\n                this.setState({properties, selectedItem: event.entity.getID()})\n            })\n        } else {\n            this.setState({properties: (<div/>), selectedItem: \"\"})\n        }\n    }\n\n    render() {\n        return (\n            <div className={styles.App}>\n                <AddNodeDialog onSaveClick={this.onModalSaveClick.bind(this)}\n                               onDismissClick={this.onModalDismissClick.bind(this)}\n                               onClose={this.onModalClose.bind(this)}\n                               aria-labelledby=\"simple-dialog-title\"\n                               variables={this.state.variableList}\n                               open={this.state.isModalOpen}\n                               type={this.state.flowType}/>\n\n                <ReflexContainer orientation=\"vertical\">\n                    <ReflexElement minSize={250}>\n                        <ReflexContainer orientation=\"horizontal\" style={{height: \"100vh\"}}>\n                            <ReflexElement className=\"left-pane\" flex={0.35} minSize={200}>\n                                <div style={{width: \"100%\", height: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                                    <ProjectTreePanel/>\n                                </div>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement className=\"left-pane\" minSize={200}>\n                                <ShapePanel>\n                                    {Object.values(FlowType).filter((value) => value !== FlowType.INITIAL)\n                                        .map((value) => (\n                                            <ShapeItem key={value} model={{type: value}} name={value}/>\n                                        ))}\n                                </ShapePanel>\n                            </ReflexElement>\n                        </ReflexContainer>\n                    </ReflexElement>\n\n                    <ReflexSplitter/>\n\n                    <ReflexElement className=\"middle-pane\" flex={0.55} minSize={250}>\n                        <div className={styles.paneContent}>\n                            <CanvasPanel ref={this.canvasPanel}\n                                         variableList={this.state.variableList}\n                                         onItemAdded={this.onItemAdded.bind(this)}\n                                         onDiagramChanged={this.onDiagramChanged.bind(this)}\n                                         onDrop={this.onCanvasDrop.bind(this)}\n                                         onSectionChanged={this.onSelectionChanged.bind(this)}\n                                         onEntityRemoved={this.onEntityRemoved.bind(this)}/>\n                        </div>\n                    </ReflexElement>\n\n                    <ReflexSplitter/>\n\n                    <ReflexElement minSize={250}>\n                        <ReflexContainer orientation=\"horizontal\" style={{height: \"100vh\"}}>\n                            <ReflexElement className=\"right-pane\" flex={0.5} minSize={200}>\n                                <div className={styles.propertiesPanel}>\n                                    {this.state.properties}\n                                </div>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement className=\"right-pane\" minSize={100}>\n                                <CodePreviewPanel code={this.state.generatedCode}\n                                                  language={ProgrammingLanguage.KOTLIN}/>\n                            </ReflexElement>\n                        </ReflexContainer>\n                    </ReflexElement>\n                </ReflexContainer>\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            )\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {Editor} from \"./pages\"\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\nimport \"./index.css\"\nimport \"nberktumer-react-diagrams/dist/style.min.css\"\nimport \"react-reflex/styles.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render((\n    <Router basename=\"/Flowie\">\n        <div>\n            <Route path=\"/\" component={Editor} exact/>\n        </div>\n    </Router>\n), document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tray\":\"ShapePanel_tray__2ouQ7\",\"trayItem\":\"ShapePanel_trayItem__3-CqV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Editor_App__1iIKS\",\"paneContent\":\"Editor_paneContent__2v9SR\",\"diagramLayer\":\"Editor_diagramLayer__jN44s\",\"srdDemoCanvas\":\"Editor_srdDemoCanvas__2fkyY\",\"propertiesPanel\":\"Editor_propertiesPanel__1y3fb\"};"],"sourceRoot":""}