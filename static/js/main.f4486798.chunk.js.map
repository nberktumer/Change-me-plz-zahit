{"version":3,"sources":["components/AddNodeDialog/AddNodeDialog.module.css","components/CanvasPanel/CanvasPanel.module.css","components/CanvasItems/Nodes/BaseFlow/BaseFlow.module.css","pages/home/Home.module.css","components/ShapePanel/ShapePanel.tsx","components/ShapePanel/ShapeItem.tsx","models/ProgrammingLanguage.tsx","models/VariableEnums.tsx","config/Defaults.tsx","config/NodeColors.tsx","config/Rules.tsx","components/CodePreviewPanel/CodePreviewPanel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLocation.tsx","utils/Random.tsx","lang/index.tsx","lang/en.tsx","lang/tr.tsx","utils/FileUtils.tsx","utils/SignConverter.ts","utils/Validator.tsx","models/FileModel.tsx","stores/ProjectStore.ts","components/ProjectTreePanel/ProjectTreePanel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLabel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortType.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortModel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPort.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowNode.tsx","components/Flows/Base/BaseFlowNodeGenerator.tsx","models/Variable.tsx","components/Flows/Base/BaseVariableFlowNode.tsx","components/Flows/Input/InputFlowNode.tsx","components/Flows/Input/InputFlowNodeGenerator.tsx","models/Condition.tsx","components/Flows/While/WhileFlowNode.tsx","components/Flows/While/WhileFlowNodeGenerator.tsx","components/Flows/Output/OutputFlowNode.tsx","components/Flows/Output/OutputFlowNodeGenerator.tsx","components/Flows/Arithmetic/ArithmeticFlowNode.tsx","components/Flows/Arithmetic/ArithmeticFlowNodeGenerator.tsx","components/Flows/Assignment/AssignmentFlowNode.tsx","components/Flows/Assignment/AssignmentFlowNodeGenerator.tsx","components/Flows/Initial/InitialFlowNode.tsx","components/Flows/Initial/InitialFlowNodeGenerator.tsx","components/Flows/If/IfFlowNode.tsx","components/Flows/If/IfFlowNodeGenerator.tsx","components/Flows/Random/RandomFlowNode.tsx","components/Flows/Random/RandomFlowNodeGenerator.tsx","components/Flows/DataClass/DataClassFlowNode.tsx","components/Flows/DataClass/DataClassFlowNodeGenerator.tsx","components/Flows/FlowNodeFactory.tsx","components/Flows/Base/BaseProperties.tsx","components/InputWithType/InputWithType.tsx","stores/FlowStore.tsx","components/Flows/While/WhileProperties.tsx","components/Flows/Arithmetic/ArithmeticProperties.tsx","components/Flows/Assignment/AssignmentProperties.tsx","components/Flows/Input/InputProperties.tsx","components/Flows/Output/OutputProperties.tsx","components/Flows/If/IfProperties.tsx","components/Flows/Random/RandomProperties.tsx","components/Flows/DataClass/DataClassProperties.tsx","generator/project/DirectoryItem.tsx","components/Flows/FlowPropertiesFactory.tsx","components/Flows/Base/BaseFlowModelGenerator.tsx","generator/FlowModelJSON.tsx","generator/code/Code.tsx","generator/flows/InitialFlow.tsx","generator/flows/AssignmentFlow.tsx","generator/flows/InputFlow.tsx","generator/flows/OutputFlow.tsx","generator/flows/ArithmeticFlow.tsx","generator/flows/IfFlow.tsx","generator/flows/RandomFlow.tsx","generator/project/Directory.tsx","generator/project/Func.tsx","generator/code/kotlin/KotlinArithmeticFlowCode.tsx","generator/code/kotlin/KotlinAssignmentFlowCode.tsx","generator/code/kotlin/KotlinIfFlowCode.tsx","generator/code/kotlin/KotlinInputFlowCode.tsx","generator/code/ProgrammingLanguageTypeConverter.tsx","generator/code/kotlin/KotlinOutputFlowCode.tsx","generator/code/kotlin/KotlinRandomFlowCode.tsx","generator/code/kotlin/KotlinWhileFlowCode.tsx","generator/code/kotlin/KotlinCodeStrategy.tsx","generator/code/java/JavaArithmeticFlowCode.tsx","generator/code/java/JavaWhileFlowCode.tsx","generator/code/java/JavaAssignmentFlowCode.tsx","generator/code/java/JavaIfFlowCode.tsx","generator/code/java/JavaInputFlowCode.tsx","generator/code/java/JavaOutputFlowCode.tsx","generator/code/java/JavaRandomFlowCode.tsx","generator/code/java/JavaCodeStrategy.tsx","generator/code/CodeStrategyFactory.tsx","generator/project/Project.tsx","generator/flows/DataClassFlow.tsx","generator/project/Clazz.tsx","generator/flows/WhileFlow.tsx","components/Flows/While/WhileFlowModelGenerator.tsx","components/Flows/Input/InputFlowModelGenerator.tsx","components/Flows/Output/OutputFlowModelGenerator.tsx","components/Flows/Arithmetic/ArithmeticFlowModelGenerator.tsx","components/Flows/Assignment/AssignmentFlowModelGenerator.tsx","components/Flows/Initial/InitialFlowModelGenerator.ts","components/Flows/If/IfFlowModelGenerator.tsx","components/Flows/Random/RandomFlowModelGenerator.tsx","components/Flows/DataClass/DataClassFlowModelGenerator.tsx","components/Flows/FlowModelFactory.tsx","components/Flows/FlowModelGenerator.tsx","components/AddNodeDialog/AddNodeDialog.tsx","components/CanvasItems/Ports/PortFactory.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowWidget.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowFactory.tsx","components/CanvasPanel/CanvasPanel.tsx","components/EditorHeader/EditorHeader.tsx","generator/project/MainClazz.tsx","pages/home/Editor.tsx","pages/home/Home.tsx","pages/home/index.tsx","serviceWorker.ts","index.tsx","components/ShapePanel/ShapePanel.module.css","components/EditorHeader/EditorHeader.module.css"],"names":["module","exports","addNodeDialogButtonContainer","addNodeDialogBody","diagramLayer","srdDemoCanvas","rectangleNode","rectangleNode--selected","rectangleNodeTitle","rectangleNodeInfo","fa","rectangleNodeName","rectangleNodePorts","rectangleNodeIn","rectangleNodeOut","editIcon","nodePropertiesWindow","App","homeApp","paneContent","propertiesPanel","languageSelector","underline","homeLogoText","homeContainer","ShapePanel","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react_default","a","createElement","className","styles","tray","children","Component","defaultProps","ProgrammingLanguage","VariableType","ArithmeticOperationType","FlowType","ConditionOperation","ConditionType","ShapeItem","_React$Component","_this2","style","borderColor","color","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","trayItem","name","React","Defaults","PROGRAMMING_LANGUAGE","KOTLIN","ROOT_FOLDER_NAME","SAVE_EXTENSION","NodeColors","IF","WHILE","VARIABLE","ARITHMETIC","FOR","INITIAL","RANDOM","DATA_CLASS","Rules","CodePreviewPanel","esm","handleWidth","handleHeight","refreshRate","refreshMode","render","_ref","width","height","backgroundColor","lib_default","mode","theme","fontSize","wrapEnabled","code","setOptions","dragEnabled","readOnly","highlightActiveLine","useWorker","language","undefined","DefaultPortLocation","Random","replace","c","r","Math","random","toString","strings","LocalizedStrings","en","in","out","loop","scope","true","false","ifStatement","variable","constant","constantValue","assignment","arithmetic","while","switch","dismiss","variableName","dataType","variableType","firstVariable","secondVariable","select","operation","recurse","initialFlow","firstOperator","secondOperator","input","output","file","save","load","new","fileReadError","variableExists","variableFirstCharacterError","classFirstCharacterError","variableContainsInvalidCharacters","classContainsInvalidCharacters","conditionType","invalid","nextFlow","minValue","maxValue","properties","newProject","loadProject","projectName","createProject","cancel","create","newClass","newDataClass","newPackage","newFunction","dataClass","tr","FileUtils","filename","data","blob","Blob","type","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","href","URL","createObjectURL","download","body","appendChild","click","removeChild","onLoad","onError","accept","concat","onchange","e","target","files","reader","FileReader","onerror","onload","contents","result","readAsText","SignConverter","ADDITION","SUBTRACTION","MULTIPLICATION","DIVISION","ROOT","GREATER_THAN","GREATER_THAN_OR_EQUALS","LESS_THAN","LESS_THAN_OR_EQUALS","EQUALS","NOT_EQUALS","Validator","variableList","length","find","item","charAt","match","FileModel","json","isDir","isMainClass","id","UID","ProjectContext","createContext","project","ProjectProvider","Provider","ProjectConsumer","Consumer","ProjectTreePanel","nodeMap","onNewClass","itemPath","setState","currentTarget","onNewDataClass","onNewPackage","onDoubleClick","fileModel","onDoubleClickListener","renderTree","parent","_","merge","path","rc_tree_es","icon","index_es","title","isLeaf","map","projectContext","anchorEl","open","Boolean","onClose","onClick","defaultExpandAll","selectable","onMouseEnter","addEventListener","node","eventKey","onMouseLeave","removeEventListener","onRightClick","DefaultPortType","DefaultPortLabel","_BaseWidget","get","prototype","portType","location","LEFT","bem","port","react","main","getParent","label","getProps","BaseWidget","DefaultPortModel","_PortModel","arguments","onLinkChangedListener","targetPortChangedListener","link","entity","sourcePort","canLinkToPort","entityRemovedListener","getTargetPort","object","engine","createLinkModel","setSourcePort","setTargetPort","maximumLinks","Infinity","keys","getLinks","getMaximumLinks","getNode","OUT","IN","LOOP","SCOPE","TRUE_SCOPE","FALSE_SCOPE","listener","addListener","targetPortChanged","entityRemoved","DefaultLinkModel","PortModel","DefaultPort","BaseFlowNode","_NodeModel","flowType","nodeType","onEditClickListener","info","FlowNodeFactory","update","ports","portModel","addOnLinkChangedListener","addPort","RIGHT","_len","Array","_key","_len2","_key2","links","values","getPortListByType","NodeModel","BaseFlowNodeGenerator","Variable","BaseVariableFlowNode","_BaseFlowNode","BOOLEAN","updateNextFlowVariable","getNextFlow","currentFlow","oldVariable","newVariable","flowModelList","scopeId","flow","getID","getVariable","setVariable","getOperator1","setOperator1","getOperator2","setOperator2","OUTPUT","updateVariableInConditions","getScopeFlow","getTrueScopeFlow","getFalseScopeFlow","InputFlowNode","_BaseVariableFlowNode","withoutPorts","INPUT","addInPort","setMaximumLinks","addOutPort","updateInfo","InputFlowNodeGenerator","_BaseFlowNodeGenerato","apply","Condition","first","second","WhileFlowNode","conditionList","AND","forEach","cond","addScopePort","condition","booleanOperation","join","push","filter","WhileFlowNodeGenerator","conditions","resultNode","removeAllConditions","setConditionType","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","conditionData","parse","addCondition","err","return","OutputFlowNode","OutputFlowNodeGenerator","ArithmeticFlowNode","operator1","operator2","setOperation","arithmeticOperation","getOperation","ArithmeticFlowNodeGenerator","op1","op2","AssignmentFlowNode","ASSIGNMENT","AssignmentFlowNodeGenerator","InitialFlowNode","addLoopPort","InitialFlowNodeGenerator","IfFlowNode","addTrueScopePort","addFalseScopePort","IfFlowNodeGenerator","_getPrototypeOf2","args","RandomFlowNode","setMinValue","setMaxValue","RandomFlowNodeGenerator","DOUBLE","DataClassFlowNode","fieldList","updateField","oldField","newField","field","index","DataClassFlowNodeGenerator","removeAllFields","addField","BaseProperties","handleStringChange","callback","defineProperty","onDataChanged","handleBooleanChange","checked","InputWithType","val","renderStringInput","display","flexDirection","alignItems","justifyContent","alignContent","textAlign","flex","isNull","onChange","margin","disabled","renderIntegerInput","renderBooleanInput","hide","STRING","INT","FlowContext","FlowProvider","FlowConsumer","WhileProperties","_BaseProperties","renderConditionText","op2initialValue","isOp2Constant","expanded","flowContext","padding","marginBottom","expandIcon","Add_default","stopPropagation","preventDefault","forceUpdate","DeleteForever_default","splice","indexOf","InputWithType_InputWithType","control","ArithmeticProperties","AssignmentProperties","readonlyType","error","errorField","inputProps","maxLength","validateVariableName","errorMessage","InputProperties","OutputProperties","isConstant","initialValue","IfProperties","RandomProperties","flowConsumer","DirectoryItemType","DataClassProperties","renderFieldText","fields","FlowPropertiesFactory","WhileProperties_WhileProperties","bind","IfProperties_IfProperties","ArithmeticProperties_ArithmeticProperties","AssignmentProperties_AssignmentProperties","InputProperties_InputProperties","OutputProperties_OutputProperties","RandomProperties_RandomProperties","DataClassProperties_DataClassProperties","BaseFlowModelGenerator","FlowModel","assignmentFlowContent","inputFlowContent","outputFlowContent","arithmeticFlowContent","whileFlowContent","ifFlowContent","randomFlowContent","dataClassFlowContent","nextFlowId","Code","indentationCount","lines","line","CodeLine","content","InitialFlow","functionCallName","Clazz","TERMINATION_ID","AssignmentFlow","flowIncrementalId","functionName","AssignmentFlowContent","InputFlow","InputFlowContent","OutputFlow","OutputFlowContent","ArithmeticFlow","functionCode","ArithmeticFlowContent","IfFlow","IfFlowContent","trueScopeId","falseScopeId","RandomFlow","RandomFlowContent","min","max","Directory","items","DIRECTORY","directoryItem","Func","parameters","returnType","codeLines","Parameter","KotlinArithmeticFlowCode","arithmeticFlow","clazz","variableSetCode","addVariable","operationCode","operator1Code","operator2Code","writeCodeToMainFunction","writeMainCodeFromFlow","KotlinAssignmentFlowCode","assignmentFlow","contentString","console","log","KotlinIfFlowCode","ifFlow","mainFunction","conditionCode","i","incrementIndentation","addToLoopStack","decrementIndentation","KotlinInputFlowCode","inputFlow","functionInvocation","func","Project","codeStrategy","initFunction","insert","scanCode","finishFunction","addFunction","ProgrammingLanguageTypeConverter","programmingLanguage","convertedType","JAVA","MAIN_ARG","KotlinOutputFlowCode","outputFlow","convert","printString","KotlinRandomFlowCode","randomFlow","addGlobalVariable","addDependency","KotlinWhileFlowCode","whileFlow","nextScopeId","KotlinCodeStrategy","arithmeticFlowCode","assignmentFlowCode","ifFlowCode","inputFlowCode","outputFlowCode","randomFlowCode","whileFlowCode","classCode","mainFunctionLines","mainFnName","MAIN_CLASS","Error","returnTypeString","parameterString","JavaArithmeticFlowCode","JavaWhileFlowCode","JavaAssignmentFlowCode","JavaIfFlowCode","JavaInputFlowCode","variableTypeString","JavaOutputFlowCode","JavaRandomFlowCode","JavaCodeStrategy","generatedCode","CodeStrategyFactory","rootDirectory","recursivelyGenerateClazzCodes","directory","generateCode","CLASS","createCodeStrategy","DataClassFlow","DataClassFlowContent","variables","flowModels","functions","flowMap","Map","scopeCount","spacing","loopStack","Stack","declaredVariableSet","Set","globalVariableSet","dependencySet","reset","convertToFlowObjects","initMain","INITIAL_ID","writeFunctionCodeFromFlow","finishMain","fn","dependency","globalVariable","has","add","removeFromStackIfTopEquals","generateMain","WhileFlow","generateFunc","initClazz","dependencyLine","createLineWithSpacing","globalVariableLine","codeLine","finishClazz","top","pop","baseFlowMap","set","WhileFlowContent","WhileFlowModelGenerator","_BaseFlowModelGenerat","scopeFlow","scopeFlowId","InputFlowModelGenerator","OutputFlowModelGenerator","ArithmeticFlowModelGenerator","generate","AssignmentFlowModelGenerator","InitialFlowModelGenerator","IfFlowModelGenerator","trueScopeFlow","trueScopeFlowId","falseScopeFlow","falseScopeFlowId","RandomFlowModelGenerator","DataClassFlowModelGenerator","dataClassFlow","FlowModelFactory","baseFlow","FlowModelGenerator","generateFlowModel","flowModel","AddNodeDialog","bodyData","onSaveClick","onDismissClick","assign","aria-labelledby","onBodyChanged","Button_default","variant","onDismiss","onSave","PortFactory","_AbstractPortFactory","cb","initialConfig","AbstractPortFactory","BaseFlowWidget","widgetRef","createRef","generatePort","DefaultPortLabel_DefaultPortLabel","editClickListener","setSelected","isPropertiesOpen","current","clientHeight","clientWidth","background","ref","left","bottom","action","Icon_default","createReadonlyVariableType","updateNode","getPortListByLocation","BaseFlowFactory","_SRD$AbstractNodeFact","diagramEngine","BaseFlowWidget_BaseFlowWidget","SRD","CanvasPanel","activeModel","initialNode","DiagramEngine","installDefaultFactories","registerNodeFactory","registerPortFactory","DiagramModel","setDiagramModel","selectionChanged","onSelectionChanged","assertThisInitialized","onEntityRemoved","x","innerWidth","y","innerHeight","getDiagramModel","addNode","saveProject","diagram","serializeDiagram","canvasPanel","initialNodeId","deSerializeDiagram","getNodes","baseNode","onDiagramChanged","addItem","position","onItemAdded","onDrop","onDragOver","maxNumberPointsPerLink","allowLooseLinks","getData","includes","points","getRelativeMousePoint","EditorHeader","handleClick","onClickListener","handleFileMenu","handleClose","toolbar","container","clickable","aria-owns","aria-haspopup","anchorOrigin","vertical","horizontal","transformOrigin","MainClazz","_Clazz","Editor","programmingLanguages","k","currentFileModel","currentClass","hasLoadedProject","resetState","isModalOpen","isAddNewFileModalOpen","flowPosition","newFileName","newFileType","newFilePath","onHeaderMenuClickListener","saveContent","rootFileModel","currentFile","loadedData","loadClass","newFileTitle","selectedLanguage","prevProps","prevState","snapshot","onModalClose","setProgrammingLanguage","getCode","generateDirectoryItems","pathList","split","lastFileModel","currentDir","dirItem","addDirectoryItem","onAddNewFileDialogClose","_this3","saveCurrent","updateDirectoryItems","_this4","autoFocus","fullWidth","onNewFileSave","AddNodeDialog_AddNodeDialog","onModalSaveClick","onModalDismissClick","EditorHeader_EditorHeader","es","orientation","minSize","ProjectTreePanel_ProjectTreePanel","onFileDoubleClick","onNewFunctionality","ShapePanel_ShapePanel","ShapeItem_ShapeItem","CanvasPanel_CanvasPanel","onCanvasDrop","CodePreviewPanel_CodePreviewPanel","_this5","Home","onLoadProjectClick","onCreateNewProjectClick","mainFileModel","onNewProjectClick","isNewProjectDialogOpen","onNewProjectDialogClose","HomePage","dummyFileModel","isLoaded","Editor_Editor","Home_Home","hostname","ReactDOM","react_router_dom","basename","react_router","component","exact","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4486798.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNodeDialogButtonContainer\":\"AddNodeDialog_addNodeDialogButtonContainer__1tDnI\",\"addNodeDialogBody\":\"AddNodeDialog_addNodeDialogBody__375vP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"diagramLayer\":\"CanvasPanel_diagramLayer__2ntH1\",\"srdDemoCanvas\":\"CanvasPanel_srdDemoCanvas__1zBET\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangleNode\":\"BaseFlow_rectangleNode__2mYnm\",\"rectangleNode--selected\":\"BaseFlow_rectangleNode--selected__NG69M\",\"rectangleNodeTitle\":\"BaseFlow_rectangleNodeTitle__2QFu2\",\"rectangleNodeInfo\":\"BaseFlow_rectangleNodeInfo__316U-\",\"fa\":\"BaseFlow_fa__2iI4L\",\"rectangleNodeName\":\"BaseFlow_rectangleNodeName__3KtLw\",\"rectangleNodePorts\":\"BaseFlow_rectangleNodePorts__3S0xh\",\"rectangleNodeIn\":\"BaseFlow_rectangleNodeIn__1HTAg\",\"rectangleNodeOut\":\"BaseFlow_rectangleNodeOut__1hphi\",\"editIcon\":\"BaseFlow_editIcon__2HJ6V\",\"nodePropertiesWindow\":\"BaseFlow_nodePropertiesWindow__3q-7G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Home_App__8yp_q\",\"homeApp\":\"Home_homeApp__2TiDk\",\"paneContent\":\"Home_paneContent__gFQu5\",\"diagramLayer\":\"Home_diagramLayer__3tPiI\",\"srdDemoCanvas\":\"Home_srdDemoCanvas__1fvp5\",\"propertiesPanel\":\"Home_propertiesPanel__2F0Ya\",\"languageSelector\":\"Home_languageSelector__2qUng\",\"underline\":\"Home_underline__2cEvf\",\"homeLogoText\":\"Home_homeLogoText__5dAfy\",\"homeContainer\":\"Home_homeContainer__2E3Sq\"};","import React, {Component} from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface ShapePanelProps {\n}\n\nexport interface ShapePanelState {\n}\n\nexport class ShapePanel extends Component<ShapePanelProps, ShapePanelState> {\n    static defaultProps: ShapePanelProps = {}\n\n    constructor(props: ShapePanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return <div className={styles.tray}>{this.props.children}</div>\n    }\n}\n","import React from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface IShapeItemProps {\n    model: any;\n    color?: string;\n    name: string;\n}\n\nexport interface IShapeItemState {\n}\n\nexport class ShapeItem extends React.Component<IShapeItemProps, IShapeItemState> {\n    constructor(props: IShapeItemProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div\n                style={{borderColor: this.props.color}}\n                draggable={true}\n                onDragStart={(event) => {\n                    event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model))\n                }}\n                className={styles.trayItem}>\n                {this.props.name}\n            </div>\n        )\n    }\n}\n","export enum ProgrammingLanguage {\n    JAVA,\n    KOTLIN/*,\n    TYPESCRIPT,\n    JAVASCRIPT,\n    SWIFT,\n    PHP,\n    C,\n    CPP,\n    CSHARP,\n    PYTHON,\n    LISP*/\n}\n","export enum VariableType {\n    INT = \"Int\",\n    STRING = \"String\",\n    BOOLEAN = \"Boolean\",\n    DOUBLE = \"Double\",\n    MAIN_ARG = \"MainArg\" //TODO FIX\n}\n\nexport enum ArithmeticOperationType {\n    ADDITION = \"Addition\",\n    SUBTRACTION = \"Subtraction\",\n    MULTIPLICATION = \"Multiplication\",\n    DIVISION = \"Division\",\n    ROOT = \"Root\"\n}\n\nexport enum FlowType {\n    INITIAL = \"Initial\",\n    IF = \"If\",\n    WHILE = \"While\",\n    FOR = \"For\",\n    INPUT = \"Input\",\n    OUTPUT = \"Output\",\n    ARITHMETIC = \"Arithmetic\",\n    ASSIGNMENT = \"Assignment\",\n    RANDOM = \"Random\",\n    DATA_CLASS = \"DataClass\"\n}\n\nexport enum ConditionOperation {\n    EQUALS = \"Equals\",\n    NOT_EQUALS = \"NotEquals\",\n    GREATER_THAN = \"GreaterThan\",\n    GREATER_THAN_OR_EQUALS = \"GreaterThanOrEquals\",\n    LESS_THAN = \"LessThan\",\n    LESS_THAN_OR_EQUALS = \"LessThanOrEquals\",\n}\n\nexport enum ConditionType {\n    AND = \"&&\",\n    OR = \"||\"\n}\n","import {ProgrammingLanguage} from \"../models\"\n\nexport const Defaults = {\n    PROGRAMMING_LANGUAGE: ProgrammingLanguage.KOTLIN,\n    ROOT_FOLDER_NAME: \"src\",\n    SAVE_EXTENSION: \"flowie\"\n}\n","export const NodeColors = {\n    IF: \"rgb(0, 192, 255)\",\n    WHILE: \"rgb(192, 0, 255)\",\n    VARIABLE: \"rgb(255, 192, 0)\",\n    ARITHMETIC: \"rgb(192, 255, 0)\",\n    FOR: \"rgb(255, 0, 192)\",\n    INITIAL: \"rgb(0, 255, 192)\",\n    RANDOM: \"rgb(192, 255, 192)\",\n    DATA_CLASS: \"rgb(192, 192, 255)\",\n}\n","export const Rules = {\n    MAX_VAR_LENGTH: 30,\n}\n","import React, {Component} from \"react\"\nimport {Defaults} from \"../../config\"\nimport {ProgrammingLanguage} from \"../../models\"\nimport AceEditor from \"react-ace\"\nimport ReactResizeDetector from \"react-resize-detector\"\n\nimport \"brace/mode/java\"\nimport \"brace/mode/javascript\"\nimport \"brace/mode/typescript\"\nimport \"brace/theme/ambiance\"\nimport \"brace/theme/clouds_midnight\"\nimport \"brace/theme/dracula\"\nimport \"brace/theme/gruvbox\"\nimport \"brace/theme/idle_fingers\"\nimport \"brace/theme/kr_theme\"\nimport \"brace/theme/merbivore\"\nimport \"brace/theme/merbivore_soft\"\nimport \"brace/theme/tomorrow_night\"\nimport \"brace/theme/tomorrow_night_bright\"\nimport \"brace/theme/tomorrow_night_eighties\"\nimport \"brace/theme/twilight\"\nimport \"brace/theme/vibrant_ink\"\nimport \"brace/ext/beautify\"\nimport \"brace/ext/themelist\"\n\nexport interface ICodePreviewPanelProps {\n    language: ProgrammingLanguage,\n    code: string | undefined\n}\n\nexport interface ICodePreviewPanelState {\n}\n\nexport class CodePreviewPanel extends Component<ICodePreviewPanelProps, ICodePreviewPanelState> {\n    static defaultProps: ICodePreviewPanelProps = {\n        language: Defaults.PROGRAMMING_LANGUAGE,\n        code: undefined\n    }\n\n    constructor(props: ICodePreviewPanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <ReactResizeDetector\n                handleWidth\n                handleHeight\n                refreshRate={300}\n                refreshMode=\"throttle\"\n                render={({width, height}) =>\n                    <div style={{height: \"100%\", width: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow_night\"\n                            name=\"blah2\"\n                            fontSize={14}\n                            height={(height - 40) + \"px\"}\n                            width={width + \"px\"}\n                            wrapEnabled\n                            value={this.props.code}\n                            setOptions={{\n                                dragEnabled: false,\n                                readOnly: true,\n                                highlightActiveLine: false,\n                                useWorker: false\n                            }}/>\n                    </div>\n                }/>\n        )\n\n    }\n}\n","export enum DefaultPortLocation {\n    LEFT,\n    RIGHT\n}\n","export class Random {\n    /**\n     * Generates a unique ID\n     * @returns {String}\n     */\n    static UID(): string {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0\n            const v = c === \"x\" ? r : (r & 0x3) | 0x8\n            return v.toString(16)\n        })\n    }\n}\n","import eng from \"./en\"\nimport tur from \"./tr\"\nimport LocalizedStrings from \"react-localization\"\n\nconst strings = new LocalizedStrings({\n    en: eng,\n    tr: tur\n});\n\nexport default strings\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    constant: \"Constant\",\n    constantValue: \"Constant Value\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\",\n    file: \"File\",\n    save: \"Save\",\n    load: \"Load\",\n    new: \"New\",\n    fileReadError: \"Could not read file\",\n    variableExists: \"Variable name already exists!\",\n    variableFirstCharacterError: \"First character of the variable name must be an alphabetic character!\",\n    classFirstCharacterError: \"First character of the class name must be a capital alphabetic character!\",\n    variableContainsInvalidCharacters: \"Variable name contains invalid characters!\",\n    classContainsInvalidCharacters: \"Class name contains invalid characters!\",\n    conditionType: \"Condition Type\",\n    invalid: \"Invalid\",\n    nextFlow: \"Next Flow\",\n    random: \"Random\",\n    minValue: \"Minimum Value\",\n    maxValue: \"Maximum Value\",\n    properties: \"Properties\",\n    newProject: \"New Project\",\n    loadProject: \"Load Project\",\n    projectName: \"Project Name\",\n    createProject: \"Create Project\",\n    cancel: \"Cancel\",\n    create: \"Create\",\n    newClass: \"New Class\",\n    newDataClass: \"New Data Class\",\n    newPackage: \"New Package\",\n    newFunction: \"New Function\",\n    dataClass: \"Data Class\"\n}\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    constant: \"Constant\",\n    constantValue: \"Constant Value\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\",\n    file: \"File\",\n    save: \"Save\",\n    load: \"Load\",\n    new: \"New\",\n    fileReadError: \"Could not read file\",\n    variableExists: \"Variable name already exists!\",\n    variableFirstCharacterError: \"First character of the variable name must be an alphabetic character!\",\n    classFirstCharacterError: \"First character of the class name must be a capital alphabetic character!\",\n    variableContainsInvalidCharacters: \"Variable name contains invalid characters!\",\n    classContainsInvalidCharacters: \"Class name contains invalid characters!\",\n    conditionType: \"Condition Type\",\n    invalid: \"Invalid\",\n    nextFlow: \"Next Flow\",\n    random: \"Random\",\n    minValue: \"Minimum Value\",\n    maxValue: \"Maximum Value\",\n    properties: \"Properties\",\n    newProject: \"New Project\",\n    loadProject: \"Load Project\",\n    projectName: \"Project Name\",\n    createProject: \"Create Project\",\n    cancel: \"Cancel\",\n    create: \"Create\",\n    newClass: \"New Class\",\n    newDataClass: \"New Data Class\",\n    newPackage: \"New Package\",\n    newFunction: \"New Function\",\n    dataClass: \"Data Class\"\n}\n","import strings from \"../lang\"\nimport {Defaults} from \"../config\"\n\nexport class FileUtils {\n\n    static save(filename: string, data: string) {\n        const blob = new Blob([data], {type: \"text/plain\"})\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveBlob(blob, filename)\n        } else {\n            const elem = window.document.createElement(\"a\")\n            elem.href = window.URL.createObjectURL(blob)\n            elem.download = filename\n            document.body.appendChild(elem)\n            elem.click()\n            document.body.removeChild(elem)\n        }\n    }\n\n    static load(onLoad: (data: string) => void, onError: (err: string) => void) {\n        const elem = window.document.createElement(\"input\")\n        elem.type = \"file\"\n        elem.accept = `.${Defaults.SAVE_EXTENSION}`\n        elem.onchange = (e: any) => {\n            if (!e.target.files) {\n                onError(strings.fileReadError)\n                return\n            }\n\n            const file = e.target.files[0]\n            if (!file) {\n                onError(strings.fileReadError)\n            }\n            const reader = new FileReader()\n            reader.onerror = () => {\n                onError(strings.fileReadError)\n            }\n            reader.onload = (e: any) => {\n                const contents = e.target.result\n                onLoad(contents)\n            }\n            reader.readAsText(file)\n        }\n        elem.click()\n    }\n}\n","import {ArithmeticOperationType} from \"../models\"\nimport {ConditionOperation} from \"../models/VariableEnums\"\n\nexport class SignConverter {\n\n    static arithmeticOperation(type: ArithmeticOperationType): string {\n        switch (type) {\n            case ArithmeticOperationType.ADDITION:\n                return \"+\"\n            case ArithmeticOperationType.SUBTRACTION:\n                return \"-\"\n            case ArithmeticOperationType.MULTIPLICATION:\n                return \"*\"\n            case ArithmeticOperationType.DIVISION:\n                return \"/\"\n            case ArithmeticOperationType.ROOT:\n                return \"root\"\n            default:\n                return \"UNKNOWN\"\n        }\n    }\n\n    static booleanOperation(type: ConditionOperation): string {\n        switch (type) {\n            case ConditionOperation.GREATER_THAN:\n                return \">\"\n            case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                return \">=\"\n            case ConditionOperation.LESS_THAN:\n                return \"<\"\n            case ConditionOperation.LESS_THAN_OR_EQUALS:\n                return \"<=\"\n            case ConditionOperation.EQUALS:\n                return \"==\"\n            case ConditionOperation.NOT_EQUALS:\n                return \"!=\"\n            default:\n                return \"UNKNOWN\"\n        }\n    }\n}\n","import {Variable} from \"../models/Variable\"\nimport strings from \"../lang\"\n\nexport class Validator {\n\n    static validateVariableName(variableName: string, variableList: Variable[]): string {\n        if (variableName.length === 0)\n            return \"\"\n\n        if (variableList.find((item) => item.name === variableName))\n            return strings.variableExists\n        else if (!variableName.charAt(0).match(/[a-z]/i))\n            return strings.variableFirstCharacterError\n        else if (!variableName.match(/^(?!-)(?!.*-)[A-Za-z0-9-_]+$/))\n            return strings.variableContainsInvalidCharacters\n\n        return \"\"\n    }\n\n    static validateClassName(className: string) {\n        if (!className.charAt(0).match(/[A-Z]/i))\n            return strings.classFirstCharacterError\n        else if (!className.match(/^(?!-)(?!.*-)[A-Za-z]+$/))\n            return strings.classContainsInvalidCharacters\n\n        return \"\"\n    }\n}\n","import {Random} from \"../utils\"\n\nexport class FileModel {\n    id: string\n    filename: string\n    json: string\n    isDir: boolean\n    isMainClass: boolean\n    children: FileModel[]\n\n    constructor(filename: string, json: string, isDir: boolean, isMainClass: boolean, children: FileModel[]) {\n        this.id = Random.UID()\n        this.filename = filename\n        this.json = json\n        this.isDir = isDir\n        this.isMainClass = isMainClass\n        this.children = children\n    }\n}\n","import React from \"react\"\nimport {FileModel} from \"../models/FileModel\"\n\nexport interface ProjectContextInterface {\n    project: FileModel\n}\n\nexport const ProjectContext = React.createContext<ProjectContextInterface>({\n    project: new FileModel(\"\", \"\", false, false, [])\n})\n\nexport const ProjectProvider = ProjectContext.Provider\nexport const ProjectConsumer = ProjectContext.Consumer\n","import React, {Component} from \"react\"\nimport Tree, {TreeNode} from \"rc-tree\"\nimport \"rc-tree/assets/index.css\"\nimport {FileModel} from \"../../models/FileModel\"\nimport {ProjectConsumer} from \"../../stores/ProjectStore\"\nimport {Icon, Menu, MenuItem} from \"@material-ui/core\"\nimport _ from \"lodash\"\nimport strings from \"../../lang\"\n\nexport interface ProjectTreePanelProps {\n    onNewClass: (path: string) => void,\n    onNewDataClass: (path: string) => void,\n    onNewPackage: (path: string) => void,\n    onNewFunctionality: (path: string) => void,\n    onDoubleClickListener: (fileModel: FileModel & { path: string }) => void\n}\n\nexport interface ProjectTreePanelState {\n    itemPath: string,\n    currentTarget: ((element: HTMLElement) => HTMLElement) | HTMLElement | undefined | null\n}\n\nexport class ProjectTreePanel extends Component<ProjectTreePanelProps, ProjectTreePanelState> {\n    nodeMap: { [key: string]: FileModel & { path: string } } = {}\n\n    constructor(props: ProjectTreePanelProps) {\n        super(props)\n        this.state = {\n            itemPath: \"\",\n            currentTarget: null\n        }\n    }\n\n    newClass = () => {\n        this.props.onNewClass(this.state.itemPath)\n        this.setState({currentTarget: null, itemPath: \"\"})\n    }\n\n    newDataClass = () => {\n        this.props.onNewDataClass(this.state.itemPath)\n        this.setState({currentTarget: null, itemPath: \"\"})\n    }\n\n    newFunction = () => {\n        this.setState({currentTarget: null, itemPath: \"\"})\n    }\n\n    newPackage = () => {\n        this.props.onNewPackage(this.state.itemPath)\n        this.setState({currentTarget: null, itemPath: \"\"})\n    }\n\n    onDoubleClick = (fileModel: FileModel & { path: string }) => {\n        this.props.onDoubleClickListener(fileModel)\n    }\n\n    renderTree = (fileModel: FileModel, parent?: string) => {\n        this.nodeMap[fileModel.id] = _.merge(fileModel, {path: parent ? `${parent}/${fileModel.filename}` : fileModel.filename})\n\n        if (fileModel.isDir) {\n            return (\n                <TreeNode icon={<Icon style={{fontSize: 16}}>folder</Icon>}\n                          title={fileModel.filename}\n                          key={fileModel.id} isLeaf={false}>\n                    {fileModel.children.map((value) => this.renderTree(value, this.nodeMap[fileModel.id].path))}\n                </TreeNode>\n            )\n        } else {\n            return <TreeNode icon={<Icon style={{fontSize: 16}}>insert_drive_file</Icon>}\n                             title={fileModel.filename}\n                             key={fileModel.id} isLeaf={true}/>\n        }\n    }\n\n    render() {\n        return (\n            <ProjectConsumer>\n                {(projectContext) => (\n                    <div style={{color: \"white\"}}>\n                        <Menu\n                            id=\"simple-menu\"\n                            anchorEl={this.state.currentTarget}\n                            open={Boolean(this.state.currentTarget)}\n                            onClose={() => this.setState({currentTarget: null})}>\n                            <MenuItem onClick={() => this.newPackage()}>{strings.newPackage}</MenuItem>\n                            {/* TODO: Change this to \"new class\" later */}\n                            <MenuItem onClick={() => this.newClass()}>{strings.newFunction}</MenuItem>\n                            <MenuItem onClick={() => this.newDataClass()}>{strings.newDataClass}</MenuItem>\n                            {/*<MenuItem onClick={() => this.newFunction()}>{strings.newFunction}</MenuItem>*/}\n                        </Menu>\n                        <Tree defaultExpandAll\n                              selectable={false}\n                              onMouseEnter={(e) => {\n                                  if (e.event.target)\n                                      e.event.target.addEventListener(\"dblclick\", () => this.onDoubleClick(this.nodeMap[e.node.props.eventKey]))\n                              }}\n                              onMouseLeave={(e) => {\n                                  if (e.event.target)\n                                      e.event.target.removeEventListener(\"dblclick\", () => this.onDoubleClick(this.nodeMap[e.node.props.eventKey]))\n                              }}\n                              onRightClick={(props) => {\n                                  if (!props.node.props.isLeaf)\n                                      this.setState({\n                                          currentTarget: props.event.currentTarget as HTMLElement,\n                                          itemPath: this.nodeMap[props.node.props.eventKey].path\n                                      })\n                              }}>\n                            {this.renderTree(projectContext.project)}\n                        </Tree>\n                    </div>\n                )}\n            </ProjectConsumer>\n        )\n    }\n}\n","import * as React from \"react\"\nimport {BaseWidget, BaseWidgetProps, PortWidget} from \"nberktumer-react-diagrams\"\nimport {DefaultPortModel} from \"./DefaultPortModel\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n    model: DefaultPortModel;\n}\n\nexport interface DefaultPortLabelState {\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n    constructor(props: DefaultPortLabelProps) {\n        super(\"srd-default-port\", props)\n    }\n\n    getClassName() {\n        return super.getClassName() + (this.props.model.portType.location === DefaultPortLocation.LEFT\n            ? this.bem(\"--in\") : this.bem(\"--out\"))\n    }\n\n    render() {\n        const port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name}/>\n        const label = <div className=\"name\">{this.props.model.label}</div>\n\n        return (\n            <div {...this.getProps()}>\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? port : label}\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? label : port}\n            </div>\n        )\n    }\n}\n","export enum DefaultPortType {\n    IN,\n    OUT,\n    LOOP,\n    SCOPE,\n    TRUE_SCOPE,\n    FALSE_SCOPE\n}\n","import * as _ from \"lodash\"\nimport {BaseEvent, DefaultLinkModel, DiagramEngine, LinkModel, PortModel} from \"nberktumer-react-diagrams\"\nimport {DefaultPort, DefaultPortType} from \"./index\"\n\nexport class DefaultPortModel extends PortModel {\n    portType: DefaultPort\n    label: string\n    onLinkChangedListener: () => void\n\n    constructor(portType: DefaultPort, name: string, label: string | null = null, id?: string) {\n        super(name, \"default\", id)\n        this.portType = portType\n        this.label = label || name\n        this.onLinkChangedListener = () => {\n        }\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.portType = object.portType\n        this.label = object.label\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            portType: this.portType,\n            label: this.label\n        })\n    }\n\n    link(port: PortModel): LinkModel {\n        const link = this.createLinkModel()\n        link.setSourcePort(this)\n        link.setTargetPort(port)\n        return link\n    }\n\n    getMaximumLinks(): number {\n        return !this.maximumLinks ? Infinity : this.maximumLinks\n    }\n\n    canLinkToPort(port: DefaultPortModel): boolean {\n        if (Object.keys(port.getLinks()).length > port.getMaximumLinks() || Object.keys(this.getLinks()).length > this.getMaximumLinks())\n            return false\n\n        // Do not connect ports that are in the same node\n        if (port.getNode() === this.getNode())\n            return false\n\n        return (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.LOOP)\n            || (this.portType.type === DefaultPortType.SCOPE && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.TRUE_SCOPE && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.FALSE_SCOPE && port.portType.type === DefaultPortType.IN)\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n\n        _.forEach(this.getLinks(), (link: LinkModel) => {\n            link.addListener({\n                targetPortChanged: this.targetPortChangedListener,\n                entityRemoved: this.entityRemovedListener\n            })\n        })\n    }\n\n    createLinkModel(): LinkModel {\n        const link = new DefaultLinkModel()\n        link.addListener({\n            targetPortChanged: this.targetPortChangedListener,\n            entityRemoved: this.entityRemovedListener\n        })\n        return link\n    }\n\n    private targetPortChangedListener = (event: BaseEvent<LinkModel> & { port: PortModel | null }) => {\n        const link = event.entity as DefaultLinkModel\n        if (!event.port != null && event.port instanceof DefaultPortModel && link.sourcePort != null && link.sourcePort.canLinkToPort(event.port)) {\n            (event.port as DefaultPortModel).onLinkChangedListener()\n        }\n    }\n\n    private entityRemovedListener = (event: BaseEvent<LinkModel> & { port: PortModel | null }) => {\n        const link = event.entity as DefaultLinkModel\n        if (link.getTargetPort() != null)\n            (link.getTargetPort() as DefaultPortModel).onLinkChangedListener()\n    }\n}\n","import {DefaultPortType} from \"./DefaultPortType\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport class DefaultPort {\n    type: DefaultPortType\n    location: DefaultPortLocation\n\n    constructor(type: DefaultPortType, location: DefaultPortLocation) {\n        this.type = type\n        this.location = location\n    }\n}\n","import {DiagramEngine, NodeModel, PortModel} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Random} from \"../../../../utils\"\nimport {DefaultPort, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../../Ports/DefaultPort\"\nimport {FlowType} from \"../../../../models\"\nimport {BasePropertiesState} from \"../../../Flows/Base/BaseProperties\"\nimport {FlowNodeFactory} from \"../../../Flows\"\nimport * as React from \"react\"\n\nexport class BaseFlowNode extends NodeModel {\n    name: string\n    color: string\n    onLinkChangedListener: () => void\n    onEditClickListener: () => void\n    flowType: FlowType | undefined\n    info: string | undefined\n\n    constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\", nodeType: string = \"base-flow\") {\n        super(nodeType)\n        this.name = name\n        this.color = color\n        this.onLinkChangedListener = () => {\n        }\n        this.onEditClickListener = () => {\n        }\n        this.flowType = flowType\n    }\n\n    updateInfo() {\n    }\n\n    updateNode(data: BasePropertiesState) {\n        FlowNodeFactory.update(this, data)\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n\n        _.map(this.ports, (portModel: DefaultPortModel) => {\n            portModel.addOnLinkChangedListener(listener)\n        })\n    }\n\n    addInPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addOutPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.OUT, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addLoopPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.LOOP, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addTrueScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.TRUE_SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addFalseScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.FALSE_SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.flowType = object.flowType\n        this.info = object.info\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            flowType: this.flowType,\n            info: this.info\n        })\n    }\n\n    getPortListByType(...type: DefaultPortType[]): PortModel[] {\n        return _.filter(this.ports, (portModel: any) => {\n            return _.includes(type, portModel.portType.type)\n        })\n    }\n\n    getPortListByLocation(...location: DefaultPortLocation[]): PortModel[] {\n        return _.filter(this.ports, (portModel: any) => {\n            return _.includes(location, portModel.portType.location)\n        })\n    }\n\n    getNextFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.OUT)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"./BaseProperties\"\n\nexport abstract class BaseFlowNodeGenerator {\n    abstract create(data?: BasePropertiesState, node?: BaseFlowNode): BaseFlowNode | undefined\n}\n","import {VariableType} from \"./VariableEnums\";\n\nexport class Variable {\n\n    name: string | undefined\n    type: VariableType\n    value: any\n\n    constructor(name: string | undefined,\n                type: VariableType,\n                value: any) {\n        this.name = name\n        this.type = type\n        this.value = value\n    }\n\n}\n","import {Variable} from \"../../../models/Variable\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {FlowType, VariableType} from \"../../../models\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {WhileFlowNode} from \"../While/WhileFlowNode\"\nimport {ArithmeticFlowNode} from \"../Arithmetic/ArithmeticFlowNode\"\nimport {InputFlowNode} from \"../Input/InputFlowNode\"\nimport {IfFlowNode} from \"../If/IfFlowNode\"\n\nexport abstract class BaseVariableFlowNode extends BaseFlowNode {\n    private variable: Variable\n\n    protected constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n        super(flowType, name, color)\n\n        this.variable = new Variable(\"\", VariableType.BOOLEAN, \"\")\n    }\n\n    getVariable(): Variable {\n        return this.variable\n    }\n\n    setVariable(variable: Variable) {\n        if (this.variable.name && variable.name && variable.name !== this.variable.name) {\n            this.updateNextFlowVariable(this.getNextFlow(), this.variable, variable, [])\n        }\n\n        this.variable = variable\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n\n    updateNextFlowVariable(currentFlow: BaseFlowNode | null, oldVariable: Variable, newVariable: Variable, flowModelList: FlowModel[], scopeId: string | null = null) {\n        if (!currentFlow)\n            return\n\n        // Check if the node has been visited before\n        if (_.includes(flowModelList.map((flow) => flow.id), currentFlow.getID()))\n            return\n\n        switch (currentFlow.flowType) {\n            case FlowType.ARITHMETIC: {\n                const node = currentFlow as ArithmeticFlowNode\n\n                if (node.getVariable().name === oldVariable.name) {\n                    node.setVariable(newVariable)\n                }\n                if (node.getOperator1().name === oldVariable.name) {\n                    node.setOperator1(newVariable)\n                }\n                if (node.getOperator2().name === oldVariable.name) {\n                    node.setOperator2(newVariable)\n                }\n                break\n            }\n            case FlowType.OUTPUT: {\n                const node = currentFlow as InputFlowNode\n\n                if (node.getVariable().name === oldVariable.name) {\n                    node.setVariable(newVariable)\n                }\n                break\n            }\n            case FlowType.WHILE: {\n                const node = currentFlow as WhileFlowNode\n                node.updateVariableInConditions(oldVariable, newVariable)\n                this.updateNextFlowVariable((currentFlow as WhileFlowNode).getScopeFlow(), oldVariable, newVariable, flowModelList, currentFlow.getID())\n                break\n            }\n            case FlowType.IF: {\n                const node = currentFlow as IfFlowNode\n                node.updateVariableInConditions(oldVariable, newVariable)\n                this.updateNextFlowVariable((currentFlow as IfFlowNode).getTrueScopeFlow(), oldVariable, newVariable, flowModelList, currentFlow.getID())\n                this.updateNextFlowVariable((currentFlow as IfFlowNode).getFalseScopeFlow(), oldVariable, newVariable, flowModelList, currentFlow.getID())\n                break\n            }\n        }\n\n        this.updateNextFlowVariable(currentFlow.getNextFlow(), oldVariable, newVariable, flowModelList, scopeId)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class InputFlowNode extends BaseVariableFlowNode {\n    constructor(variable: Variable, withoutPorts: boolean = false) {\n        super(FlowType.INPUT, strings.input, NodeColors.IF)\n\n        this.setVariable(variable)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.updateInfo()\n    }\n\n    updateInfo(): void {\n        this.info = this.getVariable().name\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {InputFlowNode} from \"./InputFlowNode\"\n\nexport class InputFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: InputFlowNode): BaseFlowNode | undefined {\n        if (!data || data.variableName === \"\" || data.variableType === \"\")\n            return undefined\n\n        const variable = new Variable(data.variableName, data.variableType, null)\n\n        if (node !== undefined) {\n            node.setVariable(variable)\n            return node\n        } else {\n            return new InputFlowNode(variable)\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new InputFlowNode(node.variable, true)\n    }\n\n}\n","import {ConditionOperation, VariableType} from \"./VariableEnums\"\nimport {Variable} from \"./Variable\"\nimport {Random} from \"../utils\"\n\nexport class Condition {\n    id: string = Random.UID()\n    variableType: VariableType\n    first: Variable\n    second: Variable | undefined\n    operation: ConditionOperation\n\n    constructor(\n        variableType: VariableType,\n        first: Variable,\n        second: Variable | undefined,\n        operation: ConditionOperation\n    ) {\n        this.variableType = variableType\n        this.first = first\n        this.second = second\n        this.operation = operation\n    }\n\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Condition} from \"../../../models/Condition\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {DefaultPortType} from \"../../CanvasItems/Ports/DefaultPort\"\nimport {FlowType} from \"../../../models\"\nimport {Variable} from \"../../../models/Variable\"\nimport {SignConverter} from \"../../../utils\"\nimport {ConditionType} from \"../../../models/VariableEnums\"\n\nexport class WhileFlowNode extends BaseFlowNode {\n    conditionList: Condition[] = []\n    conditionType: ConditionType = ConditionType.AND\n\n    constructor(withoutPorts: boolean = false) {\n        super(FlowType.WHILE, strings.while, NodeColors.WHILE)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n            this.addScopePort(strings.scope).setMaximumLinks(1)\n        }\n    }\n\n    updateInfo() {\n        this.info = this.conditionList.map((condition) => {\n            return `${condition.first.name} ${SignConverter.booleanOperation(condition.operation)} ${condition.second ? (condition.second.name ? condition.second.name : condition.second.value) : \"\"}`\n        }).join(` ${this.conditionType} `)\n    }\n\n    setConditionType(conditionType: ConditionType) {\n        this.conditionType = conditionType\n        this.updateInfo()\n    }\n\n    getConditionType(): ConditionType {\n        return this.conditionType\n    }\n\n    addCondition(condition: Condition) {\n        this.conditionList.push(condition)\n        this.updateInfo()\n    }\n\n    removeAllConditions() {\n        this.conditionList = []\n        this.updateInfo()\n    }\n\n    removeCondition(condition: Condition) {\n        this.conditionList = this.conditionList.filter((cond) => cond !== condition)\n        this.updateInfo()\n    }\n\n    updateVariableInConditions = (oldVariable: Variable, newVariable: Variable) => {\n        this.conditionList.forEach((cond) => {\n            if (cond.first.name === oldVariable.name) {\n                cond.first = newVariable\n            }\n            if (cond.second && cond.second.name && cond.second.name === oldVariable.name) {\n                cond.second = newVariable\n            }\n        })\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.conditionList = object.conditionList\n        this.conditionType = object.conditionType\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            conditionList: this.conditionList,\n            conditionType: this.conditionType\n        })\n    }\n\n    getScopeFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Condition} from \"../../../models/Condition\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\n\nexport class WhileFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: WhileFlowNode): BaseFlowNode | undefined {\n        if (!data || !data.conditions || !data.conditionType)\n            return undefined\n\n        const resultNode = node ? node : new WhileFlowNode()\n        resultNode.removeAllConditions()\n        resultNode.setConditionType(data.conditionType)\n\n        for (const conditionData of data.conditions) {\n\n            if (!conditionData.variableType || !conditionData.first || !conditionData.second || !conditionData.operation)\n                continue\n\n            const condition = new Condition(conditionData.variableType, JSON.parse(conditionData.first), JSON.parse(conditionData.second), conditionData.operation)\n\n            if (!condition.second || (!condition.second.name && !condition.second.value))\n                return undefined\n\n            resultNode.addCondition(condition)\n        }\n\n        return resultNode\n    }\n\n    load(node: any): BaseFlowNode {\n        return new WhileFlowNode(true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Variable} from \"../../../models/Variable\"\nimport {FlowType} from \"../../../models\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport class OutputFlowNode extends BaseFlowNode {\n    private variable: Variable\n\n    constructor(variable: Variable, withoutPorts: boolean = false) {\n        super(FlowType.OUTPUT, strings.output, NodeColors.IF)\n\n        this.variable = variable\n        this.setVariable(variable)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    getVariable() {\n        return this.variable\n    }\n\n    setVariable(variable: Variable) {\n        this.variable = variable\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n\n    updateInfo(): void {\n        this.info = this.getVariable().name ? this.getVariable().name : this.getVariable().value\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\n\nexport class OutputFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: OutputFlowNode): BaseFlowNode | undefined {\n        if (!data || data.variable === \"\")\n            return undefined\n\n        if (node !== undefined) {\n            node.setVariable(JSON.parse(data.variable))\n            return node\n        } else {\n            return new OutputFlowNode(JSON.parse(data.variable))\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new OutputFlowNode(node.variable, true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ArithmeticOperationType, FlowType} from \"../../../models\"\nimport * as _ from \"lodash\"\nimport {SignConverter} from \"../../../utils\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport class ArithmeticFlowNode extends BaseFlowNode {\n    private variable: Variable\n    private operation: ArithmeticOperationType\n    private operator1: Variable\n    private operator2: Variable\n\n    constructor(variable: Variable, operation: ArithmeticOperationType, operator1: Variable, operator2: Variable, withoutPorts: boolean = false) {\n        super(FlowType.ARITHMETIC, strings.arithmetic, NodeColors.ARITHMETIC)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n\n        this.setVariable(variable)\n        this.setOperation(operation)\n        this.setOperator1(operator1)\n        this.setOperator2(operator2)\n    }\n\n    updateInfo() {\n        this.info = `${this.getVariable().name} = ${this.getOperator1().name} ${SignConverter.arithmeticOperation(this.getOperation())} \n        ${!this.getOperator2().name ? this.getOperator2().value : this.getOperator2().name}`\n    }\n\n    getVariable(): Variable {\n        return this.variable\n    }\n\n    setVariable(value: Variable) {\n        this.variable = value\n        this.updateInfo()\n    }\n\n    getOperation(): ArithmeticOperationType {\n        return this.operation\n    }\n\n    setOperation(value: ArithmeticOperationType) {\n        this.operation = value\n        this.updateInfo()\n    }\n\n    getOperator1(): Variable {\n        return this.operator1\n    }\n\n    setOperator1(value: Variable) {\n        this.operator1 = value\n        this.updateInfo()\n    }\n\n    getOperator2(): Variable {\n        return this.operator2\n    }\n\n    setOperator2(value: Variable) {\n        this.operator2 = value\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n        this.operation = object.operation\n        this.operator1 = object.operator1\n        this.operator2 = object.operator2\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable,\n            operation: this.operation,\n            operator1: this.operator1,\n            operator2: this.operator2\n        })\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport {Variable} from \"../../../models/Variable\"\n\nexport class ArithmeticFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: ArithmeticFlowNode): BaseFlowNode | undefined {\n        if (!data || data.variable === \"\" || data.operation === \"\" || data.operator1 === \"\" || data.operator2 === \"\")\n            return undefined\n\n        const op1 = JSON.parse(data.operator1) as Variable\n        const op2 = JSON.parse(data.operator2) as Variable\n\n        if (node !== undefined) {\n            node.setVariable(JSON.parse(data.variable))\n            node.setOperation(data.operation)\n            node.setOperator1(op1)\n            node.setOperator2(op2)\n            return node\n        } else {\n            return new ArithmeticFlowNode(\n                JSON.parse(data.variable),\n                data.operation,\n                op1,\n                op2\n            )\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new ArithmeticFlowNode(node.variable, node.operation, node.operator1, node.operator2, true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class AssignmentFlowNode extends BaseVariableFlowNode {\n\n    constructor(variable: Variable, withoutPorts: boolean = false) {\n        super(FlowType.ASSIGNMENT, strings.variable + \" (\" + variable.type + \")\", NodeColors.VARIABLE)\n\n        this.setVariable(variable)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.updateInfo()\n    }\n\n    updateInfo() {\n        this.info = `${this.getVariable().name} = ${this.getVariable().value}`\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\n\nexport class AssignmentFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: AssignmentFlowNode): BaseFlowNode | undefined {\n        if (!data || data.variableName === \"\" || data.variableType === \"\" || data.value === \"\")\n            return undefined\n\n        const variable = new Variable(data.variableName, data.variableType, data.value)\n\n        if (node) {\n            node.setVariable(variable)\n            return node\n        } else {\n            return new AssignmentFlowNode(variable)\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new AssignmentFlowNode(node.variable, true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class InitialFlowNode extends BaseFlowNode {\n\n    constructor(withoutPorts: boolean = false) {\n        super(FlowType.INITIAL, strings.initialFlow, NodeColors.INITIAL)\n\n        if (!withoutPorts) {\n            this.addLoopPort(strings.recurse).setMaximumLinks(Infinity)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    // Prevent removing this item\n    remove(): void {\n        return\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {InitialFlowNode} from \"./InitialFlowNode\"\n\nexport class InitialFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: InitialFlowNode): BaseFlowNode | undefined {\n        return new InitialFlowNode()\n    }\n\n    load(node: InitialFlowNode): BaseFlowNode {\n       return new InitialFlowNode(true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {FlowType} from \"../../../models\"\nimport {Condition} from \"../../../models/Condition\"\nimport {ConditionType} from \"../../../models/VariableEnums\"\nimport {SignConverter} from \"../../../utils\"\nimport {Variable} from \"../../../models/Variable\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {DefaultPortType} from \"../../CanvasItems/Ports/DefaultPort\"\n\nexport class IfFlowNode extends BaseFlowNode {\n    conditionList: Condition[] = []\n    conditionType: ConditionType = ConditionType.AND\n\n    constructor(withoutPorts: boolean = false) {\n        super(FlowType.IF, strings.ifStatement, NodeColors.IF)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(Infinity)\n            this.addOutPort(strings.nextFlow).setMaximumLinks(1)\n            this.addTrueScopePort(strings.true).setMaximumLinks(1)\n            this.addFalseScopePort(strings.false).setMaximumLinks(1)\n        }\n    }\n\n    updateInfo() {\n        this.info = this.conditionList.map((condition) => {\n            return `${condition.first.name} ${SignConverter.booleanOperation(condition.operation)} ${condition.second ? (condition.second.name ? condition.second.name : condition.second.value) : \"\"}`\n        }).join(` ${this.conditionType} `)\n    }\n\n    setConditionType(conditionType: ConditionType) {\n        this.conditionType = conditionType\n        this.updateInfo()\n    }\n\n    getConditionType(): ConditionType {\n        return this.conditionType\n    }\n\n    addCondition(condition: Condition) {\n        this.conditionList.push(condition)\n        this.updateInfo()\n    }\n\n    removeAllConditions() {\n        this.conditionList = []\n        this.updateInfo()\n    }\n\n    removeCondition(condition: Condition) {\n        this.conditionList = this.conditionList.filter((cond) => cond !== condition)\n        this.updateInfo()\n    }\n\n    updateVariableInConditions = (oldVariable: Variable, newVariable: Variable) => {\n        this.conditionList.forEach((cond) => {\n            if (cond.first.name === oldVariable.name) {\n                cond.first = newVariable\n            }\n            if (cond.second && cond.second.name && cond.second.name === oldVariable.name) {\n                cond.second = newVariable\n            }\n        })\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.conditionList = object.conditionList\n        this.conditionType = object.conditionType\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            conditionList: this.conditionList,\n            conditionType: this.conditionType\n        })\n    }\n\n    getTrueScopeFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.TRUE_SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n\n    getFalseScopeFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.FALSE_SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Condition} from \"../../../models/Condition\"\nimport {IfFlowNode} from \"./IfFlowNode\"\n\nexport class IfFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: IfFlowNode): BaseFlowNode | undefined {\n        if (!data || !data.conditions || !data.conditionType)\n            return undefined\n\n        const resultNode = node ? node : new IfFlowNode()\n        resultNode.removeAllConditions()\n        resultNode.setConditionType(data.conditionType)\n\n        for (const conditionData of data.conditions) {\n\n            if (!conditionData.variableType || !conditionData.first || !conditionData.second || !conditionData.operation)\n                continue\n\n            const condition = new Condition(conditionData.variableType, JSON.parse(conditionData.first), JSON.parse(conditionData.second), conditionData.operation)\n\n            if (!condition.second || (!condition.second.name && !condition.second.value))\n                return undefined\n\n            resultNode.addCondition(condition)\n        }\n\n        return resultNode\n    }\n\n    load = (node: any): BaseFlowNode => new IfFlowNode(true)\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\n\nexport class RandomFlowNode extends BaseVariableFlowNode {\n    minValue: number = 0\n    maxValue: number = 1\n\n    constructor(variable: Variable, minValue: number, maxValue: number, withoutPorts: boolean = false) {\n        super(FlowType.RANDOM, strings.variable + \" (\" + strings.random + \")\", NodeColors.RANDOM)\n\n        this.setVariable(variable)\n        this.setMinValue(minValue)\n        this.setMaxValue(maxValue)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.minValue = object.minValue\n        this.maxValue = object.maxValue\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            minValue: this.minValue,\n            maxValue: this.maxValue\n        })\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.updateInfo()\n    }\n\n    setMinValue(value: number) {\n        if (value > this.maxValue)\n            return\n\n        this.minValue = value\n        this.updateInfo()\n    }\n\n    setMaxValue(value: number) {\n        this.maxValue = value\n        this.updateInfo()\n    }\n\n    updateInfo(): void {\n        this.info = `${this.minValue} <= ${this.getVariable().name} <= ${this.maxValue}`\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {RandomFlowNode} from \"./RandomFlowNode\"\nimport {VariableType} from \"../../../models\"\n\nexport class RandomFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: RandomFlowNode): BaseFlowNode | undefined {\n        if (!data || data.variableName === \"\" || data.minValue === \"\" || data.maxValue === \"\" || data.minValue > data.maxValue)\n            return undefined\n\n        const variable = new Variable(data.variableName, VariableType.DOUBLE, undefined)\n\n        if (node) {\n            node.setVariable(variable)\n            node.setMinValue(data.minValue)\n            node.setMaxValue(data.maxValue)\n            return node\n        } else {\n            return new RandomFlowNode(variable, data.minValue, data.maxValue)\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new RandomFlowNode(node.variable, 0, 1, true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {FlowType} from \"../../../models\"\nimport {Variable} from \"../../../models/Variable\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport class DataClassFlowNode extends BaseFlowNode {\n    fieldList: Variable[] = []\n\n    constructor(withoutPorts: boolean = false) {\n        super(FlowType.DATA_CLASS, strings.dataClass, NodeColors.DATA_CLASS)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.nextFlow).setMaximumLinks(1)\n        }\n    }\n\n    updateInfo() {\n        this.info = this.fieldList.map((field) => {\n            return `${field.name}: ${field.type}`\n        }).join(\"\\n\")\n    }\n\n    addField(field: Variable) {\n        this.fieldList.push(field)\n        this.updateInfo()\n    }\n\n    removeAllFields() {\n        this.fieldList = []\n        this.updateInfo()\n    }\n\n    removeField(field: Variable) {\n        this.fieldList = this.fieldList.filter((item) => item !== field)\n        this.updateInfo()\n    }\n\n    updateField = (oldField: Variable, newField: Variable) => {\n        this.fieldList.forEach((field, index) => {\n            if (field.name === oldField.name) {\n                this.fieldList[index] = newField\n            }\n        })\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.fieldList = object.fieldList\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            fieldList: this.fieldList\n        })\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {DataClassFlowNode} from \"./DataClassFlowNode\"\nimport {Variable} from \"../../../models/Variable\"\n\nexport class DataClassFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: DataClassFlowNode): BaseFlowNode | undefined {\n        if (!data || !data.fieldList)\n            return undefined\n\n        const resultNode = node ? node : new DataClassFlowNode()\n        resultNode.removeAllFields()\n\n        for (const field of data.fieldList as Variable[]) {\n            if (!field.type || !field.name || !field.value)\n                continue\n\n            resultNode.addField(field)\n        }\n\n        return resultNode\n    }\n\n    load = (node: any): BaseFlowNode => new DataClassFlowNode(true)\n}\n","import {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../models\"\nimport {BasePropertiesState} from \"./Base/BaseProperties\"\nimport {InputFlowNodeGenerator} from \"./Input/InputFlowNodeGenerator\"\nimport {WhileFlowNodeGenerator} from \"./While/WhileFlowNodeGenerator\"\nimport {OutputFlowNodeGenerator} from \"./Output/OutputFlowNodeGenerator\"\nimport {ArithmeticFlowNodeGenerator} from \"./Arithmetic/ArithmeticFlowNodeGenerator\"\nimport {AssignmentFlowNodeGenerator} from \"./Assignment/AssignmentFlowNodeGenerator\"\nimport {InitialFlowNodeGenerator} from \"./Initial/InitialFlowNodeGenerator\"\nimport {InputFlowNode} from \"./Input/InputFlowNode\"\nimport {InitialFlowNode} from \"./Initial/InitialFlowNode\"\nimport {WhileFlowNode} from \"./While/WhileFlowNode\"\nimport {AssignmentFlowNode} from \"./Assignment/AssignmentFlowNode\"\nimport {ArithmeticFlowNode} from \"./Arithmetic/ArithmeticFlowNode\"\nimport {OutputFlowNode} from \"./Output/OutputFlowNode\"\nimport {IfFlowNodeGenerator} from \"./If/IfFlowNodeGenerator\"\nimport {IfFlowNode} from \"./If/IfFlowNode\"\nimport {RandomFlowNodeGenerator} from \"./Random/RandomFlowNodeGenerator\"\nimport {RandomFlowNode} from \"./Random/RandomFlowNode\"\nimport {DataClassFlowNodeGenerator} from \"./DataClass/DataClassFlowNodeGenerator\"\nimport {DataClassFlowNode} from \"./DataClass/DataClassFlowNode\"\n\nexport class FlowNodeFactory {\n    private constructor() {\n    }\n\n    static create(type: FlowType, data?: BasePropertiesState): BaseFlowNode | undefined {\n        switch (type) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().create(data)\n            case FlowType.IF:\n                return new IfFlowNodeGenerator().create(data)\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().create(data)\n            case FlowType.FOR:\n                return undefined // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().create(data)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().create(data)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().create(data)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().create(data)\n            case FlowType.RANDOM:\n                return new RandomFlowNodeGenerator().create(data)\n            case FlowType.DATA_CLASS:\n                return new DataClassFlowNodeGenerator().create(data)\n        }\n    }\n\n    static load(node: BaseFlowNode): BaseFlowNode {\n        switch (node.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().load(node)\n            case FlowType.IF:\n                return new IfFlowNodeGenerator().load(node)\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().load(node)\n            // case FlowType.FOR:\n                // return undefined // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().load(node)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().load(node)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().load(node)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().load(node)\n            case FlowType.RANDOM:\n                return new RandomFlowNodeGenerator().load(node)\n            case FlowType.DATA_CLASS:\n                return new DataClassFlowNodeGenerator().load(node)\n            default:\n                return new BaseFlowNode()\n        }\n    }\n\n    static update(node: BaseFlowNode, data?: BasePropertiesState): BaseFlowNode | undefined {\n        switch (node.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().create(data, node as InitialFlowNode)\n            case FlowType.IF:\n                return new IfFlowNodeGenerator().create(data, node as IfFlowNode)\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().create(data, node as WhileFlowNode)\n            case FlowType.FOR:\n                return undefined // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().create(data, node as InputFlowNode)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().create(data, node as OutputFlowNode)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().create(data, node as ArithmeticFlowNode)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().create(data, node as AssignmentFlowNode)\n            case FlowType.RANDOM:\n                return new RandomFlowNodeGenerator().create(data, node as RandomFlowNode)\n            case FlowType.DATA_CLASS:\n                return new DataClassFlowNodeGenerator().create(data, node as DataClassFlowNode)\n        }\n    }\n}\n","import React, {Component} from \"react\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport interface BasePropertiesProps {\n    onDataChanged: (data: BasePropertiesState) => void,\n    errorMessage?: string,\n    errorField?: string,\n    node?: BaseFlowNode\n}\n\nexport interface BasePropertiesState {\n    [index: string]: any\n}\n\nexport abstract class BaseProperties<T extends BasePropertiesProps = BasePropertiesProps, U extends BasePropertiesState = BasePropertiesState> extends Component<T, U> {\n\n    handleStringChange = (key: string, callback?: (value: string) => void) => (event: any) => {\n        const value = event.target.value\n        this.setState({[key]: value}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback) {\n                callback(value)\n            }\n        })\n    }\n\n    handleBooleanChange = (key: string, callback?: (value: boolean) => void) => (event: any) => {\n        const value = event.target.checked\n        this.setState({[key]: value}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback)\n                callback(value)\n        })\n    }\n}\n","import {VariableType} from \"../../models\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../lang\"\nimport React, {Component} from \"react\"\n\nexport interface InputWithTypeProps {\n    variableType: VariableType,\n    onDataChanged: (data: any) => void,\n    value: string,\n    hide: boolean,\n    label: string\n}\n\nexport interface InputWithTypeState {\n    [index: string]: any\n}\n\nexport default class InputWithType extends Component<InputWithTypeProps, InputWithTypeState> {\n    static defaultProps = {\n        value: \"\",\n        hide: false,\n        label: strings.value\n    }\n\n    constructor(props: InputWithTypeProps) {\n        super(props)\n\n        this.state = {\n            value: this.props.value,\n            isNull: this.props.value === \"NULL\"\n        }\n    }\n\n    handleStringChange = (key: string, callback?: (value: string, onComplete: (data: any) => void) => void) => (event: any) => {\n        this.setState({[key]: event.target.value}, () => {\n            if (callback) {\n                callback(event.target.value, this.props.onDataChanged)\n            } else {\n                this.props.onDataChanged(this.state)\n            }\n        })\n    }\n\n    handleBooleanChange = (key: string, callback?: (value: boolean, onComplete: (data: any) => void) => void) => (event: any) => {\n        const val = event.target.checked\n        this.setState({[key]: val}, () => {\n            if (callback) {\n                callback(val, this.props.onDataChanged)\n            } else {\n                this.props.onDataChanged(this.state)\n            }\n        })\n    }\n\n    render() {\n        if (this.props.hide)\n            return (<div/>)\n        switch (this.props.variableType) {\n            case VariableType.STRING:\n                return this.renderStringInput()\n            case VariableType.INT:\n            case VariableType.DOUBLE:\n                return this.renderIntegerInput()\n            case VariableType.BOOLEAN:\n                return this.renderBooleanInput()\n            default:\n                return (<div/>)\n        }\n    }\n\n    private renderStringInput = () => (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                alignContent: \"center\",\n                textAlign: \"center\",\n                flex: 1\n            }}>\n            <TextField\n                style={{flex: 1}}\n                id=\"string-value-input\"\n                label={this.props.label}\n                value={this.state.isNull ? \"NULL\" : this.state.value}\n                type=\"text\"\n                onChange={this.handleStringChange(\"value\")}\n                margin=\"normal\"\n                disabled={this.state.isNull}\n            />\n            {/*<FormControlLabel\n                control={\n                    <Checkbox\n                        checked={this.state.isNull}\n                        onChange={this.handleBooleanChange(\"isNull\", (value: boolean, onComplete: (data: any) => void) => {\n                            this.setState({value: value ? \"NULL\" : \"\"}, () => onComplete(this.state))\n                        })}\n                        value=\"true\"\n                        color=\"primary\"/>\n                }\n                label=\"NULL\"\n            />*/}\n        </div>\n    )\n\n    private renderIntegerInput = () => (\n        <TextField\n            style={{display: \"flex\", flex: 1}}\n            id=\"integer-value-input\"\n            label={this.props.label}\n            value={this.state.value}\n            type=\"number\"\n            onChange={this.handleStringChange(\"value\")}\n            margin=\"normal\"\n        />\n    )\n\n    private renderBooleanInput = () => (\n        <TextField\n            style={{display: \"flex\", flex: 1}}\n            id=\"boolean-value-input\"\n            select\n            label={this.props.label}\n            value={this.state.value}\n            onChange={this.handleStringChange(\"value\")}\n            margin=\"normal\">\n            <MenuItem key={\"true\"} value={\"true\"}>\n                True\n            </MenuItem>\n            <MenuItem key={\"false\"} value={\"false\"}>\n                False\n            </MenuItem>\n        </TextField>\n    )\n}\n","import React from \"react\"\nimport {Variable} from \"../models/Variable\"\n\ninterface FlowContextInterface {\n    variableList: Variable[]\n}\n\nexport const FlowContext = React.createContext<FlowContextInterface>({\n    variableList: []\n})\n\nexport const FlowProvider = FlowContext.Provider\nexport const FlowConsumer = FlowContext.Consumer\n","import React from \"react\"\nimport {\n    Checkbox,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    FormControlLabel,\n    MenuItem,\n    Paper,\n    TextField,\n    Typography\n} from \"@material-ui/core\"\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\nimport strings from \"../../../lang\"\nimport {VariableType} from \"../../../models\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ConditionOperation, ConditionType} from \"../../../models/VariableEnums\"\nimport {SignConverter} from \"../../../utils\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport class WhileProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as WhileFlowNode\n\n            this.state = {\n                conditions: node.conditionList.map((value) => {\n                    return {\n                        variableType: value.variableType,\n                        first: JSON.stringify(value.first),\n                        second: JSON.stringify(value.second),\n                        operation: value.operation,\n                        op2initialValue: value.second ? value.second.value : \"\",\n                        isOp2Constant: value.second && value.second.name === undefined\n                    }\n                }),\n                conditionType: node.conditionType,\n                expanded: \"\"\n            }\n        } else {\n            this.state = {\n                conditions: [{\n                    variableType: \"\",\n                    first: \"\",\n                    second: \"\",\n                    operation: \"\",\n                    isOp2Constant: false,\n                    op2initialValue: \"\"\n                }],\n                conditionType: ConditionType.AND,\n                expanded: \"\"\n\n            }\n        }\n    }\n\n    renderConditionText = (condition: any) => {\n        if (!condition || !condition.first || !condition.second || !condition.operation)\n            return strings.invalid\n\n        const first = JSON.parse(condition.first)\n        const second = JSON.parse(condition.second)\n\n        if (second) {\n            return `${first.name} ${SignConverter.booleanOperation(condition.operation)} ${second.name ? second.name : second.value}`\n        } else {\n            return first.name\n        }\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div className=\"bodyContainer\">\n                        <Paper id=\"paper\"\n                               style={{\n                                   display: \"flex\",\n                                   flex: 1,\n                                   padding: 24,\n                                   marginBottom: 8\n                               }}>\n                            <TextField\n                                style={{\n                                    display: \"flex\",\n                                    flex: 1,\n                                    margin: 0,\n                                    color: \"black\"\n                                }}\n                                id=\"condition-type-selector\"\n                                select\n                                label={strings.conditionType}\n                                value={this.state.conditionType}\n                                onChange={this.handleStringChange(\"conditionType\")}\n                                margin=\"normal\">\n                                {Object.keys(ConditionType).map((value: any) => (\n                                    <MenuItem key={value} value={ConditionType[value]}>\n                                        {ConditionType[value]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Paper>\n\n                        {this.state.conditions.map((condition: any, index: number) => (\n                            <ExpansionPanel id=\"paper\"\n                                            key={index}\n                                            expanded={this.state.expanded === index}\n                                            onChange={(e, expanded) => {\n                                                this.setState({\n                                                    expanded: expanded ? index : -1\n                                                })\n                                            }}>\n                                <ExpansionPanelSummary expandIcon={index === 0 ? (\n                                    <AddIcon onClick={(e) => {\n                                        e.stopPropagation()\n                                        e.preventDefault()\n\n                                        this.state.conditions.push({\n                                            variableType: \"\",\n                                            first: \"\",\n                                            second: \"\",\n                                            operation: \"\",\n                                            isOp2Constant: false,\n                                            op2initialValue: \"\"\n                                        })\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}/>\n                                ) : (\n                                    <DeleteForeverIcon onClick={(e) => {\n                                        e.stopPropagation()\n                                        e.preventDefault()\n\n                                        this.state.conditions.splice(this.state.conditions.indexOf(condition), 1)\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}/>\n                                )}>\n                                    <Typography>\n                                        {this.renderConditionText(condition)}\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails style={{\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    flex: 1\n                                }}>\n                                    <TextField\n                                        id=\"data-type-selector\"\n                                        select\n                                        label={strings.variableType}\n                                        value={this.state.conditions[index].variableType}\n                                        onChange={(e: any) => {\n                                            this.state.conditions[index].variableType = e.target.value\n                                            this.props.onDataChanged(this.state)\n                                            this.forceUpdate()\n                                        }}\n                                        margin=\"normal\">\n                                        {Object.keys(VariableType).map((value: any) => (\n                                            <MenuItem key={value} value={VariableType[value]}>\n                                                {VariableType[value]}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <TextField\n                                        id=\"data-type-selector\"\n                                        select\n                                        label={strings.firstVariable}\n                                        value={this.state.conditions[index].first}\n                                        onChange={(e: any) => {\n                                            this.state.conditions[index].first = e.target.value\n                                            this.props.onDataChanged(this.state)\n                                            this.forceUpdate()\n                                        }}\n                                        margin=\"normal\">\n                                        {flowContext.variableList.filter((value) => {\n                                            return value.type === condition.variableType\n                                        }).map((value) => (\n                                            <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                                {value.name}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <div style={{\n                                        display: \"flex\",\n                                        flexDirection: \"row\"\n                                    }}>\n                                        <TextField\n                                            id=\"data-type-selector\"\n                                            select\n                                            style={{flex: 1, display: condition.isOp2Constant ? \"none\" : \"flex\"}}\n                                            label={strings.secondVariable}\n                                            value={this.state.conditions[index].second}\n                                            onChange={(e: any) => {\n                                                this.state.conditions[index].second = e.target.value\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            margin=\"normal\">\n                                            {flowContext.variableList.filter((value) => {\n                                                return value.type === condition.variableType\n                                            }).map((value) => (\n                                                <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                                    {value.name}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                        <InputWithType\n                                            variableType={this.state.conditions[index].variableType}\n                                            onDataChanged={(data: any) => {\n                                                this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, data.value))\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            value={condition.op2initialValue}\n                                            hide={!condition.isOp2Constant}/>\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.conditions[index].isOp2Constant}\n                                                    onChange={(e: any) => {\n                                                        this.state.conditions[index].isOp2Constant = e.target.checked\n                                                        this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, condition.op2initialValue))\n                                                        this.props.onDataChanged(this.state)\n                                                        this.forceUpdate()\n                                                    }}\n                                                    value=\"true\"\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label={condition.isOp2Constant ? strings.constant : strings.variable}\n                                        />\n                                    </div>\n                                    <TextField\n                                        id=\"data-type-selector\"\n                                        select\n                                        label={strings.operation}\n                                        value={this.state.conditions[index].operation}\n                                        onChange={(e: any) => {\n                                            this.state.conditions[index].operation = e.target.value\n                                            this.props.onDataChanged(this.state)\n                                            this.forceUpdate()\n                                        }}\n                                        margin=\"normal\">\n                                        {Object.keys(ConditionOperation).map((value: any) => (\n                                            <MenuItem key={value} value={ConditionOperation[value]}>\n                                                {ConditionOperation[value]}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        ))}\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","import React from \"react\"\nimport {Checkbox, FormControlLabel, MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {ArithmeticOperationType, VariableType} from \"../../../models\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport class ArithmeticProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as ArithmeticFlowNode\n\n            this.state = {\n                variable: JSON.stringify(node.getVariable()),\n                operation: node.getOperation(),\n                operator1: JSON.stringify(node.getOperator1()),\n                operator2: JSON.stringify(node.getOperator2()),\n                isOp2Constant: node.getOperator2().name === undefined,\n                op2initialValue: node.getOperator2().value\n            }\n        } else {\n            this.state = {\n                variable: \"\",\n                operation: \"\",\n                operator1: \"\",\n                operator2: \"\",\n                isOp2Constant: false,\n                op2initialValue: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div className=\"bodyContainer\">\n                        <TextField\n                            id=\"data-type-selector\"\n                            select\n                            label={strings.variable}\n                            value={this.state.variable}\n                            onChange={this.handleStringChange(\"variable\")}\n                            margin=\"normal\">\n                            {flowContext.variableList.filter((value) => {\n                                return value.type === VariableType.INT || value.type === VariableType.DOUBLE\n                            }).map((value) => (\n                                <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                    {value.name}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                        <TextField\n                            id=\"data-type-selector\"\n                            select\n                            label={strings.operation}\n                            value={this.state.operation}\n                            onChange={this.handleStringChange(\"operation\")}\n                            margin=\"normal\">\n                            {Object.keys(ArithmeticOperationType).map((value: any) => (\n                                <MenuItem key={value} value={ArithmeticOperationType[value]}>\n                                    {ArithmeticOperationType[value]}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                        <TextField\n                            id=\"data-type-selector\"\n                            select\n                            label={strings.firstOperator}\n                            value={this.state.operator1}\n                            onChange={this.handleStringChange(\"operator1\")}\n                            margin=\"normal\">\n                            {flowContext.variableList.filter((value) => {\n                                return value.type === VariableType.INT || value.type === VariableType.DOUBLE\n                            }).map((value) => (\n                                <MenuItem key={value.name}\n                                          value={JSON.stringify(new Variable(value.name, value.type, value.value))}>\n                                    {value.name}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                        <div style={{\n                            display: \"flex\",\n                            flexDirection: \"row\"\n                        }}>\n                            <TextField\n                                id=\"data-type-selector\"\n                                select\n                                style={{flex: 1, display: this.state.isOp2Constant ? \"none\" : \"flex\"}}\n                                label={strings.secondOperator}\n                                value={this.state.operator2}\n                                onChange={this.handleStringChange(\"operator2\")}\n                                margin=\"normal\">\n                                {flowContext.variableList.filter((value) => {\n                                    return value.type === VariableType.INT || value.type === VariableType.DOUBLE\n                                }).map((value) => (\n                                    <MenuItem key={value.name}\n                                              value={JSON.stringify(new Variable(value.name, value.type, value.value))}>\n                                        {value.name}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <InputWithType\n                                variableType={VariableType.INT}\n                                onDataChanged={(data: any) => {\n                                    this.setState({operator2: JSON.stringify(new Variable(undefined, VariableType.INT, data.value))}, () => {\n                                        this.props.onDataChanged(this.state)\n                                    })\n                                }}\n                                value={this.state.op2initialValue}\n                                hide={!this.state.isOp2Constant}/>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={this.state.isOp2Constant}\n                                        onChange={this.handleBooleanChange(\"isOp2Constant\")}\n                                        value=\"true\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label={this.state.isOp2Constant ? strings.constant : strings.variable}\n                            />\n                        </div>\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Validator} from \"../../../utils\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport interface AssignmentPropertiesProps extends BasePropertiesProps {\n    readonlyType: boolean\n}\n\nexport class AssignmentProperties extends BaseProperties<AssignmentPropertiesProps> {\n    static defaultProps = {\n        readonlyType: false\n    }\n\n    constructor(props: AssignmentPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as AssignmentFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                variableType: node.getVariable().type,\n                value: node.getVariable().value,\n                isNull: node.getVariable().value === \"NULL\",\n                variable: node.getVariable()\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                variableType: \"\",\n                value: \"\",\n                isNull: false,\n                variable: null\n            }\n        }\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div className=\"bodyContainer\">\n                        <TextField\n                            id=\"variable-name-input\"\n                            style={{width: \"100%\"}}\n                            label={strings.variableName}\n                            disabled={this.props.readonlyType}\n                            error={this.state.errorField === \"variableName\"}\n                            value={this.state.variableName}\n                            inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                            onChange={this.handleStringChange(\"variableName\", (data) => {\n                                const error = Validator.validateVariableName(data, flowContext.variableList)\n                                this.setState({errorMessage: error, errorField: error ? \"variableName\" : \"\"}, () => {\n                                    this.props.onDataChanged(this.state)\n                                })\n                            })}\n                            margin=\"normal\"\n                        />\n                        <TextField\n                            id=\"data-type-selector\"\n                            select\n                            style={{width: \"100%\"}}\n                            disabled={this.props.readonlyType}\n                            label={strings.dataType}\n                            value={this.state.variableType}\n                            onChange={this.handleStringChange(\"variableType\", () => {\n                                this.setState({value: \"\"})\n                            })}\n                            margin=\"normal\">\n                            {Object.keys(VariableType).map((key: any) => (\n                                <MenuItem key={key} value={VariableType[key]}>\n                                    {VariableType[key]}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                        <InputWithType\n                            variableType={this.state.variableType}\n                            onDataChanged={(data: any) => {\n                                this.setState({value: data.value, isNull: data.isNull}, () => {\n                                    this.props.onDataChanged(this.state)\n                                })\n                            }}\n                            value={this.state.value}\n                            hide={this.state.variableType === \"\"}/>\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {InputFlowNode} from \"./InputFlowNode\"\nimport {Validator} from \"../../../utils\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport interface InputPropertiesProps extends BasePropertiesProps {\n    readonlyType: boolean\n}\n\nexport class InputProperties extends BaseProperties<InputPropertiesProps> {\n    static defaultProps = {\n        readonlyType: false\n    }\n\n    constructor(props: InputPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as InputFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                variableType: node.getVariable().type,\n                variable: node.getVariable()\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                variableType: \"\",\n                variable: null\n            }\n        }\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div className=\"bodyContainer\">\n                        <TextField\n                            id=\"variable-name-input\"\n                            style={{width: \"100%\"}}\n                            label={strings.variableName}\n                            disabled={this.props.readonlyType}\n                            error={this.state.errorField === \"variableName\"}\n                            value={this.state.variableName}\n                            inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                            onChange={this.handleStringChange(\"variableName\", (data) => {\n                                const error = Validator.validateVariableName(data, flowContext.variableList)\n                                this.setState({errorMessage: error, errorField: error ? \"variableName\" : \"\"}, () => {\n                                    this.props.onDataChanged(this.state)\n                                })\n                            })}\n                            margin=\"normal\"\n                        />\n                        <TextField\n                            id=\"data-type-selector\"\n                            select\n                            style={{width: \"100%\"}}\n                            disabled={this.props.readonlyType}\n                            label={strings.dataType}\n                            value={this.state.variableType}\n                            onChange={this.handleStringChange(\"variableType\")}\n                            margin=\"normal\">\n                            {Object.keys(VariableType).map((key: any) => (\n                                <MenuItem key={key} value={VariableType[key]}>\n                                    {VariableType[key]}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n\n    }\n}\n","import React from \"react\"\nimport {Checkbox, FormControlLabel, MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\nimport {VariableType} from \"../../../models\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport class OutputProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as OutputFlowNode\n\n            this.state = {\n                variable: JSON.stringify(node.getVariable()),\n                isConstant: node.getVariable().name === undefined,\n                variableType: node.getVariable().type,\n                initialValue: node.getVariable().value\n\n            }\n        } else {\n            this.state = {\n                variable: \"\",\n                isConstant: false,\n                variableType: \"\",\n                initialValue: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div className=\"bodyContainer\">\n                        <div style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            flex: 1\n                        }}>\n                            <TextField\n                                id=\"variable-selector\"\n                                select\n                                style={{flex: 1, display: this.state.isConstant ? \"none\" : \"flex\"}}\n                                label={strings.variable}\n                                value={this.state.variable}\n                                onChange={this.handleStringChange(\"variable\")}\n                                margin=\"normal\">\n                                {flowContext.variableList.map((value) => (\n                                    <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                        {value.name}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n\n                            <InputWithType\n                                variableType={VariableType.STRING}\n                                onDataChanged={(data: any) => {\n                                    this.setState({variable: JSON.stringify(new Variable(undefined, VariableType.STRING, data.value))}, () => {\n                                        this.props.onDataChanged(this.state)\n                                    })\n                                }}\n                                value={this.state.initialValue}\n                                hide={!this.state.isConstant}/>\n\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={this.state.isConstant}\n                                        onChange={this.handleBooleanChange(\"isConstant\")}\n                                        value=\"true\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label={this.state.isConstant ? strings.constant : strings.variable}\n                            />\n                        </div>\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    Checkbox,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    FormControlLabel,\n    MenuItem,\n    Paper,\n    TextField,\n    Typography\n} from \"@material-ui/core\"\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport strings from \"../../../lang\"\nimport {VariableType} from \"../../../models\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ConditionOperation, ConditionType} from \"../../../models/VariableEnums\"\nimport {SignConverter} from \"../../../utils\"\nimport {IfFlowNode} from \"./IfFlowNode\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport class IfProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as IfFlowNode\n\n            this.state = {\n                conditions: node.conditionList.map((value) => {\n                    return {\n                        variableType: value.variableType,\n                        first: JSON.stringify(value.first),\n                        second: JSON.stringify(value.second),\n                        operation: value.operation,\n                        op2initialValue: value.second ? value.second.value : \"\",\n                        isOp2Constant: value.second && value.second.name === undefined\n                    }\n                }),\n                conditionType: node.conditionType,\n                expanded: \"\"\n            }\n        } else {\n            this.state = {\n                conditions: [{\n                    variableType: \"\",\n                    first: \"\",\n                    second: \"\",\n                    operation: \"\",\n                    isOp2Constant: false,\n                    op2initialValue: \"\"\n                }],\n                conditionType: ConditionType.AND,\n                expanded: \"\"\n\n            }\n        }\n    }\n\n    renderConditionText = (condition: any) => {\n        if (!condition || !condition.first || !condition.second || !condition.operation)\n            return strings.invalid\n\n        const first = JSON.parse(condition.first)\n        const second = JSON.parse(condition.second)\n\n        if (second) {\n            return `${first.name} ${SignConverter.booleanOperation(condition.operation)} ${second.name ? second.name : second.value}`\n        } else {\n            return first.name\n        }\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div className=\"bodyContainer\">\n                        <Paper id=\"paper\"\n                               style={{\n                                   display: \"flex\",\n                                   flex: 1,\n                                   padding: 24,\n                                   marginBottom: 8\n                               }}>\n                            <TextField\n                                style={{\n                                    display: \"flex\",\n                                    flex: 1,\n                                    margin: 0,\n                                    color: \"black\"\n                                }}\n                                id=\"condition-type-selector\"\n                                select\n                                label={strings.conditionType}\n                                value={this.state.conditionType}\n                                onChange={this.handleStringChange(\"conditionType\")}\n                                margin=\"normal\">\n                                {Object.keys(ConditionType).map((value: any) => (\n                                    <MenuItem key={value} value={ConditionType[value]}>\n                                        {ConditionType[value]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Paper>\n                        {this.state.conditions.map((condition: any, index: number) => (\n                            <ExpansionPanel id=\"paper\"\n                                            key={index}\n                                            expanded={this.state.expanded === index}\n                                            onChange={(e, expanded) => {\n                                                this.setState({\n                                                    expanded: expanded ? index : -1\n                                                })\n                                            }}>\n                                <ExpansionPanelSummary expandIcon={index === 0 ? (\n                                    <AddIcon onClick={(e) => {\n                                        e.stopPropagation()\n                                        e.preventDefault()\n\n                                        this.state.conditions.push({\n                                            variableType: \"\",\n                                            first: \"\",\n                                            second: \"\",\n                                            operation: \"\",\n                                            isOp2Constant: false,\n                                            op2initialValue: \"\"\n                                        })\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}/>\n                                ) : (\n                                    <DeleteForeverIcon onClick={(e) => {\n                                        e.stopPropagation()\n                                        e.preventDefault()\n\n                                        this.state.conditions.splice(this.state.conditions.indexOf(condition), 1)\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}/>\n                                )}>\n                                    <Typography>\n                                        {this.renderConditionText(condition)}\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails style={{\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    flex: 1\n                                }}>\n                                    <TextField\n                                        id=\"data-type-selector\"\n                                        select\n                                        label={strings.variableType}\n                                        value={this.state.conditions[index].variableType}\n                                        onChange={(e: any) => {\n                                            this.state.conditions[index].variableType = e.target.value\n                                            this.props.onDataChanged(this.state)\n                                            this.forceUpdate()\n                                        }}\n                                        margin=\"normal\">\n                                        {Object.keys(VariableType).map((value: any) => (\n                                            <MenuItem key={value} value={VariableType[value]}>\n                                                {VariableType[value]}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <TextField\n                                        id=\"data-type-selector\"\n                                        select\n                                        label={strings.firstVariable}\n                                        value={this.state.conditions[index].first}\n                                        onChange={(e: any) => {\n                                            this.state.conditions[index].first = e.target.value\n                                            this.props.onDataChanged(this.state)\n                                            this.forceUpdate()\n                                        }}\n                                        margin=\"normal\">\n                                        {flowContext.variableList.filter((value) => {\n                                            return value.type === condition.variableType\n                                        }).map((value) => (\n                                            <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                                {value.name}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <div style={{\n                                        display: \"flex\",\n                                        flexDirection: \"row\"\n                                    }}>\n                                        <TextField\n                                            id=\"data-type-selector\"\n                                            select\n                                            style={{flex: 1, display: condition.isOp2Constant ? \"none\" : \"flex\"}}\n                                            label={strings.secondVariable}\n                                            value={this.state.conditions[index].second}\n                                            onChange={(e: any) => {\n                                                this.state.conditions[index].second = e.target.value\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            margin=\"normal\">\n                                            {flowContext.variableList.filter((value) => {\n                                                return value.type === condition.variableType\n                                            }).map((value) => (\n                                                <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                                    {value.name}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                        <InputWithType\n                                            variableType={this.state.conditions[index].variableType}\n                                            onDataChanged={(data: any) => {\n                                                this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, data.value))\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            value={condition.op2initialValue}\n                                            hide={!condition.isOp2Constant}/>\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.conditions[index].isOp2Constant}\n                                                    onChange={(e: any) => {\n                                                        this.state.conditions[index].isOp2Constant = e.target.checked\n                                                        this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, condition.op2initialValue))\n                                                        this.props.onDataChanged(this.state)\n                                                        this.forceUpdate()\n                                                    }}\n                                                    value=\"true\"\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label={condition.isOp2Constant ? strings.constant : strings.variable}\n                                        />\n                                    </div>\n                                    <TextField\n                                        id=\"data-type-selector\"\n                                        select\n                                        label={strings.operation}\n                                        value={this.state.conditions[index].operation}\n                                        onChange={(e: any) => {\n                                            this.state.conditions[index].operation = e.target.value\n                                            this.props.onDataChanged(this.state)\n                                            this.forceUpdate()\n                                        }}\n                                        margin=\"normal\">\n                                        {Object.keys(ConditionOperation).map((value: any) => (\n                                            <MenuItem key={value} value={ConditionOperation[value]}>\n                                                {ConditionOperation[value]}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        ))}\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","import React from \"react\"\nimport {TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {RandomFlowNode} from \"./RandomFlowNode\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Validator} from \"../../../utils\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport interface RandomPropertiesProps extends BasePropertiesProps {\n    readonlyType: boolean\n}\n\nexport class RandomProperties extends BaseProperties<RandomPropertiesProps> {\n    static defaultProps = {\n        readonlyType: false\n    }\n\n    constructor(props: RandomPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as RandomFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                minValue: node.minValue,\n                maxValue: node.maxValue\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                minValue: 0,\n                maxValue: 1\n            }\n        }\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowConsumer) => (\n                    <div className=\"bodyContainer\">\n                        <TextField\n                            id=\"variable-name-input\"\n                            label={strings.variableName}\n                            disabled={this.props.readonlyType}\n                            error={this.state.errorField === \"variableName\"}\n                            value={this.state.variableName}\n                            inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                            onChange={this.handleStringChange(\"variableName\", (data) => {\n                                const error = Validator.validateVariableName(data, flowConsumer.variableList)\n                                this.setState({errorMessage: error, errorField: error ? \"variableName\" : \"\"}, () => {\n                                    this.props.onDataChanged(this.state)\n                                })\n                            })}\n                            margin=\"normal\"\n                        />\n                        <InputWithType\n                            variableType={VariableType.DOUBLE}\n                            label={strings.minValue}\n                            onDataChanged={(data: any) => {\n                                this.setState({minValue: data.value}, () => {\n                                    this.props.onDataChanged(this.state)\n                                })\n                            }}\n                            value={this.state.minValue}/>\n                        <InputWithType\n                            variableType={VariableType.DOUBLE}\n                            label={strings.maxValue}\n                            onDataChanged={(data: any) => {\n                                this.setState({maxValue: data.value}, () => {\n                                    this.props.onDataChanged(this.state)\n                                })\n                            }}\n                            value={this.state.maxValue}/>\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    Checkbox,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    FormControlLabel,\n    MenuItem,\n    TextField,\n    Typography\n} from \"@material-ui/core\"\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport strings from \"../../../lang\"\nimport {VariableType} from \"../../../models\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\nimport {DataClassFlowNode} from \"./DataClassFlowNode\"\nimport {FlowConsumer} from \"../../../stores/FlowStore\"\n\nexport class DataClassProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as DataClassFlowNode\n\n            this.state = {\n                fields: node.fieldList.map((value) => {\n                    return {\n                        variableType: value.type,\n                        field: JSON.stringify(value),\n                        initialValue: value ? value.value : \"\",\n                        isConstant: value && value.name === undefined\n                    }\n                }),\n                expanded: \"\"\n            }\n        } else {\n            this.state = {\n                fields: [{\n                    variableType: \"\",\n                    field: \"\",\n                    isConstant: false,\n                    initialValue: \"\"\n                }],\n                expanded: \"\"\n\n            }\n        }\n    }\n\n    renderFieldText = (field: any) => {\n        if (!field || !field.type || !field.value)\n            return strings.invalid\n\n        if (field.name)\n            return `${field.name}: ${field.type}`\n        else\n            return `${field.value} (${field.type})`\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div className=\"bodyContainer\">\n                        {this.state.fields.map((field: any, index: number) => (\n                            <ExpansionPanel id=\"paper\"\n                                            key={index}\n                                            expanded={this.state.expanded === index}\n                                            onChange={(e, expanded) => {\n                                                this.setState({\n                                                    expanded: expanded ? index : -1\n                                                })\n                                            }}>\n                                <ExpansionPanelSummary expandIcon={index === 0 ? (\n                                    <AddIcon onClick={(e) => {\n                                        e.stopPropagation()\n                                        e.preventDefault()\n\n                                        this.state.fields.push({\n                                            variableType: \"\",\n                                            field: \"\",\n                                            isConstant: false,\n                                            initialValue: \"\"\n                                        })\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}/>\n                                ) : (\n                                    <DeleteForeverIcon onClick={(e) => {\n                                        e.stopPropagation()\n                                        e.preventDefault()\n\n                                        this.state.fields.splice(this.state.fields.indexOf(field), 1)\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}/>\n                                )}>\n                                    <Typography>\n                                        {this.renderFieldText(field)}\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails style={{\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    flex: 1\n                                }}>\n                                    <TextField\n                                        id=\"data-type-selector\"\n                                        select\n                                        label={strings.variableType}\n                                        value={this.state.fields[index].variableType}\n                                        onChange={(e: any) => {\n                                            this.state.fields[index].variableType = e.target.value\n                                            this.props.onDataChanged(this.state)\n                                            this.forceUpdate()\n                                        }}\n                                        margin=\"normal\">\n                                        {Object.keys(VariableType).map((value: any) => (\n                                            <MenuItem key={value} value={VariableType[value]}>\n                                                {VariableType[value]}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <div style={{\n                                        display: \"flex\",\n                                        flexDirection: \"row\"\n                                    }}>\n                                        <TextField\n                                            id=\"data-type-selector\"\n                                            select\n                                            style={{flex: 1, display: field.isConstant ? \"none\" : \"flex\"}}\n                                            label={strings.variable}\n                                            value={this.state.fields[index].field}\n                                            onChange={(e: any) => {\n                                                this.state.fields[index].field = e.target.value\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            margin=\"normal\">\n                                            {flowContext.variableList.filter((value) => {\n                                                return value.type === field.variableType\n                                            }).map((value) => (\n                                                <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                                    {value.name}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                        <InputWithType\n                                            variableType={this.state.fields[index].variableType}\n                                            onDataChanged={(data: any) => {\n                                                this.state.fields[index].field = JSON.stringify(new Variable(undefined, field.variableType, data.value))\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            value={field.initialValue}\n                                            hide={!field.isConstant}/>\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.fields[index].isConstant}\n                                                    onChange={(e: any) => {\n                                                        this.state.fields[index].isConstant = e.target.checked\n                                                        this.state.fields[index].field = JSON.stringify(new Variable(undefined, field.variableType, field.initialValue))\n                                                        this.props.onDataChanged(this.state)\n                                                        this.forceUpdate()\n                                                    }}\n                                                    value=\"true\"\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label={field.isConstant ? strings.constant : strings.variable}\n                                        />\n                                    </div>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        ))}\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","export interface DirectoryItem {\n    name: string\n    type: DirectoryItemType\n}\n\nexport enum DirectoryItemType {\n    MAIN_CLASS = \"MainClass\",\n    CLASS = \"Class\",\n    DATA_CLASS = \"DataClass\",\n    DIRECTORY = \"Directory\"\n}\n","import {FlowType} from \"../../models\"\nimport {BasePropertiesState} from \"./Base/BaseProperties\"\nimport {WhileProperties} from \"./While/WhileProperties\"\nimport {ArithmeticProperties} from \"./Arithmetic/ArithmeticProperties\"\nimport {AssignmentProperties} from \"./Assignment/AssignmentProperties\"\nimport {InputProperties} from \"./Input/InputProperties\"\nimport {OutputProperties} from \"./Output/OutputProperties\"\nimport React from \"react\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {IfProperties} from \"./If/IfProperties\"\nimport {RandomProperties} from \"./Random/RandomProperties\"\nimport {DataClassProperties} from \"./DataClass/DataClassProperties\"\n\nexport class FlowPropertiesFactory {\n    private constructor() {\n    }\n\n    static create(type: FlowType | null | undefined, onDataChanged: (data: BasePropertiesState) => void, node?: BaseFlowNode): JSX.Element {\n        switch (type) {\n            case FlowType.WHILE:\n                return (<WhileProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.IF:\n                return (<IfProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ARITHMETIC:\n                return (<ArithmeticProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ASSIGNMENT:\n                return (<AssignmentProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.INPUT:\n                return (<InputProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.OUTPUT:\n                return (<OutputProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.RANDOM:\n                return (<RandomProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.DATA_CLASS:\n                return (<DataClassProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            default:\n                return (<div/>)\n        }\n    }\n\n    static createReadonlyVariableType(type: FlowType | null | undefined, onDataChanged: (data: BasePropertiesState) => void, node?: BaseFlowNode): JSX.Element {\n        switch (type) {\n            case FlowType.WHILE:\n                return (<WhileProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.IF:\n                return (<IfProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ARITHMETIC:\n                return (<ArithmeticProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ASSIGNMENT:\n                return (<AssignmentProperties readonlyType node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.INPUT:\n                return (<InputProperties readonlyType node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.OUTPUT:\n                return (<OutputProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.RANDOM:\n                return (<RandomProperties readonlyType node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.DATA_CLASS:\n                return (<DataClassProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            default:\n                return (<div/>)\n        }\n    }\n    //\n    // static createFileProperties(type: FlowType | null | undefined): JSX.Element {\n    //     switch (type) {\n    //         case FlowType.DATA_CLASS:\n    //             return (<DataClassProperties node={node} onDataChanged={onDataChanged.bind(this)}/>)\n    //         default:\n    //             return (<div/>)\n    //     }\n    // }\n}\n","import {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport abstract class BaseFlowModelGenerator {\n    abstract generate(flow: BaseFlowNode): FlowModel\n}\n","import {ArithmeticFlowContent} from \"./flows/ArithmeticFlow\"\nimport {OutputFlowContent} from \"./flows/OutputFlow\"\nimport {InputFlowContent} from \"./flows/InputFlow\"\nimport {AssignmentFlowContent} from \"./flows/AssignmentFlow\"\nimport {WhileFlowContent} from \"./flows/WhileFlow\"\nimport {FlowType} from \"../models\"\nimport {IfFlowContent} from \"./flows/IfFlow\";\nimport {RandomFlowContent} from \"./flows/RandomFlow\";\nimport {DirectoryItemType} from \"./project/DirectoryItem\";\nimport {Directory} from \"./project/Directory\";\nimport {Clazz} from \"./project/Clazz\";\nimport {MainClazz} from \"./project/MainClazz\";\nimport {DataClassFlowContent} from \"./flows/DataClassFlow\";\n\nexport class DirectoryItemModel {\n    type: DirectoryItemType\n    directory: Directory | null = null\n    clazz: Clazz | null = null\n    mainClazz: MainClazz | null = null\n\n    constructor(type: DirectoryItemType) {\n        this.type = type\n    }\n\n    setDirectory(directory: Directory): DirectoryItemModel {\n        this.directory = directory\n        return this\n    }\n\n    setClazz(clazz: Clazz): DirectoryItemModel {\n        this.clazz = clazz\n        return this\n    }\n\n    setMainClazz(mainClazz: MainClazz): DirectoryItemModel {\n        this.mainClazz = mainClazz\n        return this\n    }\n\n}\n\nexport class FlowModel {\n    type: FlowType\n    id: string\n    assignmentFlowContent: AssignmentFlowContent | null\n    inputFlowContent: InputFlowContent | null\n    outputFlowContent: OutputFlowContent | null\n    arithmeticFlowContent: ArithmeticFlowContent | null\n    whileFlowContent: WhileFlowContent | null\n    ifFlowContent: IfFlowContent | null\n    randomFlowContent: RandomFlowContent | null\n    dataClassFlowContent: DataClassFlowContent | null\n    // forFlowContent: ForFlowContent,\n    // ifFlowContent: IfFlowContent,\n    nextFlowId: string | null\n\n    constructor(\n        type: FlowType,\n        id: string,\n        assignmentFlowContent: AssignmentFlowContent | null = null,\n        inputFlowContent: InputFlowContent | null = null,\n        outputFlowContent: OutputFlowContent | null = null,\n        arithmeticFlowContent: ArithmeticFlowContent | null = null,\n        whileFlowContent: WhileFlowContent | null = null,\n        ifFlowContent: IfFlowContent | null = null,\n        randomFlowContent: RandomFlowContent | null = null,\n        dataClassFlowContent: DataClassFlowContent | null = null,\n        nextFlowId: string | null\n        // forFlowContent: ForFlowContent,\n\n    ) {\n        this.type = type\n        this.id = id\n        this.assignmentFlowContent = assignmentFlowContent\n        this.inputFlowContent = inputFlowContent\n        this.outputFlowContent = outputFlowContent\n        this.arithmeticFlowContent = arithmeticFlowContent\n        this.ifFlowContent = ifFlowContent\n        this.whileFlowContent = whileFlowContent\n        this.ifFlowContent = ifFlowContent\n        this.randomFlowContent = randomFlowContent\n        this.dataClassFlowContent = dataClassFlowContent\n        this.nextFlowId = nextFlowId\n    }\n}\n","export class Code {\n    lines: CodeLine[] = []\n    indentationCount: number\n\n    constructor(indentationCount: number) {\n        this.indentationCount = indentationCount\n    }\n\n    insert(line: string) {\n        this.lines.push(new CodeLine(line, this.indentationCount))\n    }\n\n    incrementIndentation() {\n        this.indentationCount++\n    }\n\n    decrementIndentation() {\n        this.indentationCount--\n    }\n\n}\n\nexport class CodeLine {\n    content: string\n    indentationCount: number\n\n    constructor(\n        content: string,\n        indentationCount: number\n    ) {\n        this.content = content\n        this.indentationCount = indentationCount\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\";\nimport {FlowType} from \"../../models\";\nimport {Clazz} from \"../project/Clazz\";\n\nexport class InitialFlow implements BaseFlow {\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.functionCallName = \"\"\n    }\n\n    functionInvocation(): string {\n        return \"\";\n    }\n\n    functionName(): string {\n        return \"\";\n    }\n\n    hasExternalDependencies(): boolean {\n        return false;\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType} from \"../../models\"\nimport {Variable} from \"../../models/Variable\"\nimport {Clazz} from \"../project/Clazz\";\n\nexport class AssignmentFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: AssignmentFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: AssignmentFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `assignmentFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class AssignmentFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType} from \"../../models\"\nimport {Variable} from \"../../models/Variable\"\nimport {Clazz} from \"../project/Clazz\";\n\nexport class InputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: InputFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: InputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `inputFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class InputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {Variable} from \"../../models/Variable\"\nimport {FlowType} from \"../../models\"\nimport {Clazz} from \"../project/Clazz\";\n\nexport class OutputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: OutputFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: OutputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        if (this.content != null) {\n            if (this.content.variable.name) {\n                return `${this.functionName()}(${this.content.variable.name})`\n            } else {\n                return `${this.functionName()}()`\n            }\n        } else {\n            return \"\"\n        }\n    }\n\n    functionName(): string {\n        return `outputFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class OutputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {ArithmeticOperationType, FlowType} from \"../../models\"\nimport {Variable} from \"../../models/Variable\"\nimport {Clazz} from \"../project/Clazz\";\n\nexport class ArithmeticFlow implements BaseFlow {\n\n    id: string\n    type: FlowType;\n    nextFlowId: string | null\n    content: ArithmeticFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: ArithmeticFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n\n    }\n\n    functionInvocation(): string {\n        if (this.content == null)\n            return \"\"\n\n        let functionCode = `${this.functionName()}(`\n\n        if (this.content.operator1.name !== undefined) {\n            functionCode += this.content.operator1.name\n        }\n\n        if (this.content.operator2.name !== undefined && this.content.operator1.name !== this.content.operator2.name) {\n            functionCode += `, ${this.content.operator2.name}`\n        }\n\n        functionCode += \")\"\n        return functionCode\n    }\n\n    functionName(): string {\n        return `arithmeticFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class ArithmeticFlowContent {\n    variable: Variable\n    operation: ArithmeticOperationType\n    operator1: Variable\n    operator2: Variable\n\n    constructor(\n        variable: Variable,\n        operation: ArithmeticOperationType,\n        operator1: Variable,\n        operator2: Variable,\n    ) {\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {Condition} from \"../../models/Condition\"\nimport {FlowType} from \"../../models\"\nimport {ConditionType} from \"../../models/VariableEnums\";\nimport {Clazz} from \"../project/Clazz\";\n\nexport class IfFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: IfFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: IfFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return \"\"\n    }\n\n    functionName(): string {\n        return \"\"\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n}\n\nexport class IfFlowContent {\n    conditions: Condition[]\n    conditionType: ConditionType\n    trueScopeId: string | null\n    falseScopeId: string | null\n\n    constructor(\n        conditions: Condition[],\n        conditionType: ConditionType,\n        trueScopeId: string | null,\n        falseScopeId: string | null,\n    ) {\n        this.conditions = conditions\n        this.conditionType = conditionType\n        this.trueScopeId = trueScopeId\n        this.falseScopeId = falseScopeId\n    }\n\n}\n","import {BaseFlow} from \"./BaseFlow\";\nimport {FlowType} from \"../../models\";\nimport {Variable} from \"../../models/Variable\";\nimport {Clazz} from \"../project/Clazz\";\n\nexport class RandomFlow implements BaseFlow {\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: RandomFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: RandomFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `randomFlow${this.functionCallName}`\n    }\n\n    hasExternalDependencies(): boolean {\n        return false;\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n}\n\nexport class RandomFlowContent {\n    variable: Variable\n    min: number\n    max: number\n\n    constructor(\n        variable: Variable,\n        min: number,\n        max: number\n    ) {\n        this.variable = variable\n        this.min = min\n        this.max = max\n    }\n}\n","import {DirectoryItem, DirectoryItemType} from \"./DirectoryItem\"\n\nexport class Directory implements DirectoryItem {\n    type: DirectoryItemType;\n    name: string\n    items: DirectoryItem[]\n\n    constructor(name: string, items: DirectoryItem[]) {\n        this.type = DirectoryItemType.DIRECTORY\n        this.name = name\n        this.items = items\n    }\n\n    addDirectoryItem(directoryItem: DirectoryItem) {\n        this.items.push(directoryItem)\n    }\n\n}\n","import {Code} from \"../code/Code\";\n\nexport class Func {\n    functionName: string\n    parameters: Parameter[]\n    returnType: string | undefined\n    code: Code\n\n    constructor(\n        functionName: string,\n        parameters: Parameter[],\n        returnType: string | undefined,\n        codeLines: Code\n    ) {\n        this.functionName = functionName\n        this.parameters = parameters\n        this.returnType = returnType\n        this.code = codeLines\n    }\n}\n\nexport class Parameter {\n    name: string\n    type: string\n\n    constructor(\n        name: string,\n        type: string\n    ) {\n        this.name = name;\n        this.type = type\n    }\n}\n","import {ArithmeticFlow} from \"../../flows/ArithmeticFlow\";\nimport {ArithmeticFlowCode} from \"../common/ArithmeticFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {ArithmeticOperationType} from \"../../../models\";\n\nexport class KotlinArithmeticFlowCode implements ArithmeticFlowCode {\n\n    generateMain(arithmeticFlow: ArithmeticFlow, clazz: Clazz): void {\n        if (arithmeticFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n\n        if (clazz.addVariable(arithmeticFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        let operationCode = \"\"\n        switch (arithmeticFlow.content.operation) {\n            case ArithmeticOperationType.ADDITION:\n                operationCode = \"+\"\n                break\n            case ArithmeticOperationType.SUBTRACTION:\n                operationCode = \"-\"\n                break\n            case ArithmeticOperationType.MULTIPLICATION:\n                operationCode = \"*\"\n                break\n            case ArithmeticOperationType.DIVISION:\n                operationCode = \"/\"\n                break\n        }\n\n        let operator1Code = \"\"\n        let operator2Code = \"\"\n\n        if (arithmeticFlow.content.operator1.name !== undefined) {\n            operator1Code += arithmeticFlow.content.operator1.name\n        } else {\n            operator1Code += arithmeticFlow.content.operator1.value\n        }\n\n        if (arithmeticFlow.content.operator2.name !== undefined) {\n            operator2Code += arithmeticFlow.content.operator2.name\n        } else {\n            operator2Code += arithmeticFlow.content.operator2.value\n        }\n\n        if (arithmeticFlow.content.operation == ArithmeticOperationType.ROOT) {\n            clazz.writeCodeToMainFunction(`${variableSetCode}${arithmeticFlow.content.variable.name} = Math.pow(${operator1Code}, 1 / ${operator2Code})`)\n        } else {\n            clazz.writeCodeToMainFunction(`${variableSetCode}${arithmeticFlow.content.variable.name} = ${operator1Code} ${operationCode} ${operator2Code}`)\n        }\n\n        clazz.writeMainCodeFromFlow(arithmeticFlow.nextFlow())\n    }\n\n}\n","import {AssignmentFlow} from \"../../flows/AssignmentFlow\";\nimport {AssignmentFlowCode} from \"../common/AssignmentFlowCode\";\nimport {VariableType} from \"../../../models\";\nimport {Clazz} from \"../../project/Clazz\";\n\nexport class KotlinAssignmentFlowCode implements AssignmentFlowCode {\n\n    generateMain(assignmentFlow: AssignmentFlow, clazz: Clazz): void {\n        if (assignmentFlow.content == null)\n            return\n\n        let contentString = \"\"\n        switch (assignmentFlow.content.variable.type) {\n            case VariableType.INT:\n            case VariableType.DOUBLE:\n                contentString = assignmentFlow.content.variable.value.toString()\n                break\n            case VariableType.STRING:\n                contentString = `\"${assignmentFlow.content.variable.value}\"`\n                break\n            default:\n                console.log(\"default...\")\n                break\n        }\n\n        let variableSetCode = \"\"\n        if (clazz.addVariable(assignmentFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        clazz.writeCodeToMainFunction(`${variableSetCode}${assignmentFlow.content.variable.name} = ${contentString}`)\n        clazz.writeMainCodeFromFlow(assignmentFlow.nextFlow())\n    }\n\n}\n","import {IfFlow} from \"../../flows/IfFlow\";\nimport {IfFlowCode} from \"../common/IfFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {ConditionOperation} from \"../../../models/VariableEnums\";\n\nexport class KotlinIfFlowCode implements IfFlowCode {\n\n    generateMain(ifFlow: IfFlow, clazz: Clazz): void {\n        if (ifFlow.content == null || clazz.mainFunction == null)\n            return\n\n        let conditionCode = \"\"\n\n        for (let i = 0; i < ifFlow.content.conditions.length; i++) {\n            const condition = ifFlow.content.conditions[i]\n\n            conditionCode += condition.first.name\n\n            if (condition.second !== undefined) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n\n            if (i !== ifFlow.content.conditions.length - 1) {\n                conditionCode += ` ${ifFlow.content.conditionType} `\n            }\n        }\n\n        clazz.writeCodeToMainFunction(\"if(\" + conditionCode + \") {\")\n        clazz.mainFunction.code.incrementIndentation()\n\n        if (ifFlow.content.trueScopeId != null) {\n            clazz.addToLoopStack(ifFlow.id)\n            clazz.writeMainCodeFromFlow(ifFlow.content.trueScopeId)\n        }\n\n        clazz.mainFunction.code.decrementIndentation()\n\n        if (ifFlow.content.falseScopeId != null) {\n            clazz.writeCodeToMainFunction(\"} else {\")\n\n            clazz.mainFunction.code.incrementIndentation()\n\n            clazz.addToLoopStack(ifFlow.id)\n            clazz.writeCodeToMainFunction(ifFlow.content.falseScopeId)\n\n            clazz.mainFunction.code.decrementIndentation()\n        }\n\n        clazz.writeCodeToMainFunction(\"}\")\n\n        clazz.writeMainCodeFromFlow(ifFlow.nextFlow())\n    }\n\n}\n","import {InputFlow} from \"../../flows/InputFlow\";\nimport {InputFlowCode} from \"../common/InputFlowCode\";\nimport {VariableType} from \"../../../models\";\nimport {Func, Parameter} from \"../../project/Func\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {Code} from \"../Code\";\nimport {Project} from \"../../project/Project\";\n\nexport class KotlinInputFlowCode implements InputFlowCode {\n\n    generateMain(inputFlow: InputFlow, clazz: Clazz): void {\n        if (inputFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (clazz.addVariable(inputFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        clazz.writeCodeToMainFunction(\n            `${variableSetCode}${inputFlow.content.variable.name} = ${inputFlow.functionInvocation()}`\n        )\n\n        clazz.writeMainCodeFromFlow(inputFlow.nextFlow())\n    }\n\n    generateFunc(inputFlow: InputFlow, clazz: Clazz): void {\n        if (inputFlow.content == null)\n            return\n\n        const code = new Code(clazz.indentationCount)\n        const parameters: Parameter[] = []\n\n        const func = new Func(\n            inputFlow.functionName(),\n            parameters,\n            inputFlow.content.variable.type.toString(),\n            code\n        )\n\n        Project.codeStrategy.initFunction(func)\n\n        code.insert(`println(\"Please enter value for ${inputFlow.content.variable.name}\")`)\n\n        let scanCode = \"\"\n        switch (inputFlow.content.variable.type) {\n            case VariableType.INT:\n                scanCode = \"readLine()!!.toInt()\"\n                break\n            case VariableType.STRING:\n                scanCode = \"readLine()!!\"\n                break\n            case VariableType.BOOLEAN:\n                scanCode = \"readLine()!!.toBoolean()\"\n                break\n            case VariableType.DOUBLE:\n                scanCode = \"readLine()!!.toDouble()\"\n                break\n            default:\n                break\n        }\n\n        code.insert(`return ${scanCode}`)\n\n        Project.codeStrategy.finishFunction(func)\n        clazz.addFunction(func)\n    }\n}\n","import {ProgrammingLanguage, VariableType} from \"../../models\";\n\nexport class ProgrammingLanguageTypeConverter {\n    static convert(programmingLanguage: ProgrammingLanguage, variableType: VariableType): string {\n        let convertedType = \"\"\n\n        switch (+programmingLanguage) {\n            case ProgrammingLanguage.JAVA:\n                switch (variableType) {\n                    case VariableType.INT:\n                        convertedType = \"int\"\n                        break\n                    case VariableType.BOOLEAN:\n                        convertedType = \"boolean\"\n                        break\n                    case VariableType.STRING:\n                        convertedType = \"String\"\n                        break\n                    case VariableType.DOUBLE:\n                        convertedType = \"double\"\n                        break\n                    case VariableType.MAIN_ARG:\n                        convertedType = `String[]`\n                        break\n                }\n                break\n            case ProgrammingLanguage.KOTLIN:\n                switch (variableType) {\n                    case VariableType.INT:\n                        convertedType = \"Int\"\n                        break\n                    case VariableType.BOOLEAN:\n                        convertedType = \"Boolean\"\n                        break\n                    case VariableType.STRING:\n                        convertedType = \"String\"\n                        break\n                    case VariableType.DOUBLE:\n                        convertedType = \"Double\"\n                        break\n                    case VariableType.MAIN_ARG:\n                        convertedType = `Array<String>`\n                        break\n                }\n                break\n        }\n\n        return convertedType\n    }\n}\n","import {OutputFlow} from \"../../flows/OutputFlow\";\nimport {OutputFlowCode} from \"../common/OutputFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {Func, Parameter} from \"../../project/Func\";\nimport {Code} from \"../Code\";\nimport {Project} from \"../../project/Project\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\nimport {ProgrammingLanguage} from \"../../../models\";\n\nexport class KotlinOutputFlowCode implements OutputFlowCode {\n\n    generateMain(outputFlow: OutputFlow, clazz: Clazz): void {\n        clazz.writeCodeToMainFunction(outputFlow.functionInvocation())\n        clazz.writeMainCodeFromFlow(outputFlow.nextFlow())\n    }\n\n    generateFunc(outputFlow: OutputFlow, clazz: Clazz): void {\n        if (outputFlow.content == null)\n            return\n\n        const code = new Code(clazz.indentationCount)\n\n        const parameters: Parameter[] = []\n        if (outputFlow.content.variable.name) {\n            parameters.push(new Parameter(\n                outputFlow.content.variable.name,\n                ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.KOTLIN, outputFlow.content.variable.type)\n            ))\n        }\n\n        const func = new Func(\n            outputFlow.functionName(),\n            parameters,\n            undefined,\n            code\n        )\n\n        Project.codeStrategy.initFunction(func)\n\n        let printString = \"\"\n\n        if (!outputFlow.content.variable.name) {\n            printString = `println(\"${outputFlow.content.variable.value}\")`\n        } else {\n            printString = `println(\"Value of ${outputFlow.content.variable.name} is \\${${outputFlow.content.variable.name}}\")`\n        }\n\n        code.insert(printString)\n        Project.codeStrategy.finishFunction(func)\n\n        clazz.addFunction(func)\n    }\n\n}\n","import {RandomFlow} from \"../../flows/RandomFlow\";\nimport {RandomFlowCode} from \"../common/RandomFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\n\nexport class KotlinRandomFlowCode implements RandomFlowCode {\n\n    generateMain(randomFlow: RandomFlow, clazz: Clazz): void {\n\n        clazz.addGlobalVariable(\"val random = Random()\")\n        clazz.addDependency(\"import java.util.Random\")\n\n        if (randomFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (clazz.addVariable(randomFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        clazz.writeCodeToMainFunction(\n            `${variableSetCode}${randomFlow.content.variable.name} = ${randomFlow.content.min} + (${randomFlow.content.max} - ${randomFlow.content.min}) * random.nextDouble()`\n        )\n\n        clazz.writeMainCodeFromFlow(randomFlow.nextFlow())\n    }\n\n}\n","import {WhileFlow} from \"../../flows/WhileFlow\";\nimport {WhileFlowCode} from \"../common/WhileFlowCode\";\nimport {ConditionOperation} from \"../../../models/VariableEnums\";\nimport {Clazz} from \"../../project/Clazz\";\n\nexport class KotlinWhileFlowCode implements WhileFlowCode {\n\n    generateMain(whileFlow: WhileFlow, clazz: Clazz): void {\n        if (whileFlow.content == null || clazz.mainFunction == null)\n            return\n\n        const nextScopeId = whileFlow.content.scopeId\n\n        let conditionCode = \"\"\n\n        for (let i = 0; i < whileFlow.content.conditions.length; i++) {\n            const condition = whileFlow.content.conditions[i]\n\n            conditionCode += condition.first.name\n\n            if (condition.second) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n\n            if (i !== whileFlow.content.conditions.length - 1) {\n                conditionCode += ` ${whileFlow.content.conditionType} `\n            }\n        }\n\n        clazz.writeCodeToMainFunction(\"while(\" + conditionCode + \") {\")\n        clazz.mainFunction.code.incrementIndentation()\n\n        if (nextScopeId != null) {\n            clazz.addToLoopStack(whileFlow.id)\n            clazz.writeMainCodeFromFlow(nextScopeId)\n        }\n\n        clazz.mainFunction.code.decrementIndentation()\n        clazz.writeCodeToMainFunction(\"}\")\n        clazz.writeMainCodeFromFlow(whileFlow.nextFlow())\n    }\n\n}\n","import {CodeStrategy} from \"../CodeStrategy\";\nimport {Func, Parameter} from \"../../project/Func\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {Variable} from \"../../../models/Variable\";\nimport {Code} from \"../Code\";\nimport {KotlinArithmeticFlowCode} from \"./KotlinArithmeticFlowCode\";\nimport {KotlinAssignmentFlowCode} from \"./KotlinAssignmentFlowCode\";\nimport {KotlinIfFlowCode} from \"./KotlinIfFlowCode\";\nimport {KotlinInputFlowCode} from \"./KotlinInputFlowCode\";\nimport {KotlinOutputFlowCode} from \"./KotlinOutputFlowCode\";\nimport {KotlinRandomFlowCode} from \"./KotlinRandomFlowCode\";\nimport {KotlinWhileFlowCode} from \"./KotlinWhileFlowCode\";\nimport {DirectoryItemType} from \"../../project/DirectoryItem\";\nimport {ProgrammingLanguage, VariableType} from \"../../../models\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\n\nexport class KotlinCodeStrategy implements CodeStrategy {\n\n    arithmeticFlowCode = new KotlinArithmeticFlowCode()\n    assignmentFlowCode = new KotlinAssignmentFlowCode()\n    ifFlowCode = new KotlinIfFlowCode()\n    inputFlowCode = new KotlinInputFlowCode()\n    outputFlowCode = new KotlinOutputFlowCode()\n    randomFlowCode = new KotlinRandomFlowCode()\n    whileFlowCode = new KotlinWhileFlowCode()\n\n    initClazz(clazz: Clazz): void {\n        clazz.classCode.insert(`class ${clazz.name}`)\n        clazz.incrementIndentation()\n        clazz.classCode.insert(`companion object {`)\n        clazz.incrementIndentation()\n    }\n\n    finishClazz(clazz: Clazz): void {\n        clazz.decrementIndentation()\n        clazz.classCode.insert(\"}\")\n        clazz.decrementIndentation()\n        clazz.classCode.insert(\"}\")\n    }\n\n    initMain(clazz: Clazz): void {\n        const parameters: Parameter[] = []\n        const mainFunctionLines = new Code(clazz.indentationCount)\n        let mainFnName = \"\"\n\n        if (clazz.type === DirectoryItemType.MAIN_CLASS) {\n            mainFnName = \"main\"\n            parameters.push(\n                new Parameter(\n                    \"args\",\n                    ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.KOTLIN, VariableType.MAIN_ARG)))\n        } else {\n            mainFnName = clazz.name\n            parameters.push(\n                new Parameter(\n                    clazz.name,\n                    ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.KOTLIN, VariableType.MAIN_ARG))) //TODO CHANGE TYPE TO ARG FROM FN\n        }\n\n        clazz.mainFunction = new Func(\n            mainFnName,\n            parameters,\n            undefined,\n            mainFunctionLines\n        )\n\n        this.initFunction(clazz.mainFunction)\n    }\n\n    finishMain(clazz: Clazz): void {\n        if (clazz.mainFunction == null)\n            throw new Error(\"Main function is undefined!\")\n\n        clazz.mainFunction.code.decrementIndentation()\n        clazz.mainFunction.code.insert(\"}\")\n        clazz.mainFunction.code.insert(\"\")\n    }\n\n    initFunction(func: Func): void {\n        let returnTypeString = \"\"\n        if (func.returnType) {\n            returnTypeString += \": \" + func.returnType\n        } else {\n            returnTypeString += \"\"\n        }\n\n        let parameterString = \"\"\n\n        func.parameters.forEach((value, index) => {\n            parameterString += `${value.name}: ${value.type}`\n            if (index !== func.parameters.length - 1) {\n                parameterString += \", \"\n            }\n        })\n\n        func.code.insert(`fun ${func.functionName}(${parameterString})${returnTypeString} {`)\n        func.code.incrementIndentation()\n    }\n\n    finishFunction(func: Func): void {\n        func.code.decrementIndentation()\n        func.code.insert(\"}\")\n        func.code.insert(\"\")\n    }\n}\n","import {ArithmeticFlow} from \"../../flows/ArithmeticFlow\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\nimport {ArithmeticOperationType, ProgrammingLanguage} from \"../../../models\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {ArithmeticFlowCode} from \"../common/ArithmeticFlowCode\";\n\nexport class JavaArithmeticFlowCode implements ArithmeticFlowCode {\n\n    generateMain(arithmeticFlow: ArithmeticFlow, clazz: Clazz): void {\n        if (arithmeticFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n\n        if (clazz.addVariable(arithmeticFlow.content.variable.name)) {\n            variableSetCode = `${ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, arithmeticFlow.content.variable.type)} `\n        }\n\n        let operationCode = \"\"\n        switch (arithmeticFlow.content.operation) {\n            case ArithmeticOperationType.ADDITION:\n                operationCode = \"+\"\n                break\n            case ArithmeticOperationType.SUBTRACTION:\n                operationCode = \"-\"\n                break\n            case ArithmeticOperationType.MULTIPLICATION:\n                operationCode = \"*\"\n                break\n            case ArithmeticOperationType.DIVISION:\n                operationCode = \"/\"\n                break\n        }\n\n        let operator1Code = \"\"\n        let operator2Code = \"\"\n\n        if (arithmeticFlow.content.operator1.name !== undefined) {\n            operator1Code += arithmeticFlow.content.operator1.name\n        } else {\n            operator1Code += arithmeticFlow.content.operator1.value\n        }\n\n        if (arithmeticFlow.content.operator2.name !== undefined) {\n            operator2Code += arithmeticFlow.content.operator2.name\n        } else {\n            operator2Code += arithmeticFlow.content.operator2.value\n        }\n\n        if (arithmeticFlow.content.operation == ArithmeticOperationType.ROOT) {\n            clazz.writeCodeToMainFunction(`${variableSetCode}${arithmeticFlow.content.variable.name} = Math.pow(${operator1Code}, 1 / ${operator2Code});`)\n        } else {\n            clazz.writeCodeToMainFunction(`${variableSetCode}${arithmeticFlow.content.variable.name} = ${operator1Code} ${operationCode} ${operator2Code};`)\n        }\n    }\n\n}\n","import {WhileFlow} from \"../../flows/WhileFlow\";\nimport {WhileFlowCode} from \"../common/WhileFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {ConditionOperation} from \"../../../models/VariableEnums\";\n\nexport class JavaWhileFlowCode implements WhileFlowCode {\n\n    generateMain(whileFlow: WhileFlow, clazz: Clazz) {\n        if (!whileFlow.content || clazz.mainFunction == null)\n            return\n\n        const nextScopeId = whileFlow.content.scopeId\n\n        let conditionCode = \"\"\n        whileFlow.content.conditions.forEach((condition) => {\n            conditionCode += condition.first.name\n\n            if (condition.second) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n        })\n\n        clazz.writeCodeToMainFunction(\"while(\" + conditionCode + \") {\")\n        clazz.mainFunction.code.incrementIndentation()\n\n        if (nextScopeId != null) {\n            clazz.addToLoopStack(whileFlow.id)\n            clazz.writeMainCodeFromFlow(nextScopeId)\n        }\n\n        clazz.mainFunction.code.decrementIndentation()\n        clazz.writeCodeToMainFunction(\"}\")\n        clazz.writeMainCodeFromFlow(whileFlow.nextFlow())\n    }\n\n}\n","import {AssignmentFlow} from \"../../flows/AssignmentFlow\";\nimport {AssignmentFlowCode} from \"../common/AssignmentFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {ProgrammingLanguage, VariableType} from \"../../../models\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\n\nexport class JavaAssignmentFlowCode implements AssignmentFlowCode {\n\n    generateMain(assignmentFlow: AssignmentFlow, clazz: Clazz): void {\n        if (assignmentFlow.content == null)\n            return\n\n        let contentString = \"\"\n        switch (assignmentFlow.content.variable.type) {\n            case VariableType.DOUBLE:\n            case VariableType.INT:\n                contentString = assignmentFlow.content.variable.value.toString()\n                break\n            case VariableType.STRING:\n                contentString = `\"${assignmentFlow.content.variable.value}\"`\n                break\n            default:\n                break\n        }\n\n        let variableSetCode = \"\"\n        if (clazz.addVariable(assignmentFlow.content.variable.name)) {\n            variableSetCode = `${ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, assignmentFlow.content.variable.type)} `\n        }\n\n        clazz.writeCodeToMainFunction(`${variableSetCode}${assignmentFlow.content.variable.name} = ${contentString};`)\n    }\n\n}\n","import {IfFlow} from \"../../flows/IfFlow\";\nimport {Func} from \"../../project/Func\";\nimport {ConditionOperation} from \"../../../models/VariableEnums\";\nimport {IfFlowCode} from \"../common/IfFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\n\nexport class JavaIfFlowCode implements IfFlowCode {\n\n    generateMain(ifFlow: IfFlow, clazz: Clazz) {\n        if (ifFlow.content == null || clazz.mainFunction == null)\n            return\n\n        let conditionCode = \"\"\n        ifFlow.content.conditions.forEach((condition) => {\n            conditionCode += condition.first.name\n\n            if (condition.second !== undefined) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n        })\n\n        clazz.writeCodeToMainFunction(\"if(\" + conditionCode + \") {\")\n        clazz.mainFunction.code.incrementIndentation()\n\n        if (ifFlow.content.trueScopeId != null) {\n            clazz.addToLoopStack(ifFlow.id)\n            clazz.writeMainCodeFromFlow(ifFlow.content.trueScopeId)\n        }\n\n        clazz.mainFunction.code.decrementIndentation()\n\n        if (ifFlow.content.falseScopeId != null) {\n            clazz.writeCodeToMainFunction(\"} else {\")\n            clazz.mainFunction.code.incrementIndentation()\n\n            clazz.addToLoopStack(ifFlow.id)\n            clazz.writeMainCodeFromFlow(ifFlow.content.falseScopeId)\n\n            clazz.mainFunction.code.decrementIndentation()\n\n        }\n        clazz.writeCodeToMainFunction(\"}\")\n    }\n\n}\n","import {InputFlow} from \"../../flows/InputFlow\";\nimport {InputFlowCode} from \"../common/InputFlowCode\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\nimport {ProgrammingLanguage, VariableType} from \"../../../models\";\nimport {Variable} from \"../../../models/Variable\";\nimport {Func, Parameter} from \"../../project/Func\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {Code} from \"../Code\";\nimport {Project} from \"../../project/Project\";\n\nexport class JavaInputFlowCode implements InputFlowCode {\n\n    generateMain(inputFlow: InputFlow, clazz: Clazz): void {\n        if (inputFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (clazz.addVariable(inputFlow.content.variable.name)) {\n            variableSetCode = `${ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, inputFlow.content.variable.type)} `\n        }\n\n        clazz.writeCodeToMainFunction(\n            `${variableSetCode}${inputFlow.content.variable.name} = ${inputFlow.functionInvocation()};`\n        )\n\n        clazz.writeMainCodeFromFlow(inputFlow.nextFlow())\n    }\n\n    generateFunc(inputFlow: InputFlow, clazz: Clazz): void {\n        if (inputFlow.content == null)\n            return\n\n        clazz.addDependency(\"import java.util.Scanner;\")\n\n        const code = new Code(clazz.indentationCount)\n        const parameters: Parameter[] = []\n\n        const func = new Func(\n            inputFlow.functionName(),\n            parameters,\n            ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, inputFlow.content.variable.type),\n            code\n        )\n\n        Project.codeStrategy.initFunction(func)\n\n        code.insert(`System.out.println(\"Please enter value for ${inputFlow.content.variable.name}\");`)\n        code.insert(`Scanner scanner = new Scanner(System.in);`)\n\n        const variableTypeString = ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, inputFlow.content.variable.type)\n        switch (inputFlow.content.variable.type) {\n            case VariableType.INT:\n                code.insert(`${variableTypeString} input = scanner.nextInt();`)\n                break\n            case VariableType.DOUBLE:\n                code.insert(`${variableTypeString} input = scanner.nextDouble();`)\n                break\n            case VariableType.STRING:\n                code.insert(`${variableTypeString} input = scanner.nextLine();`)\n                break\n            default:\n                break\n        }\n\n        code.insert(`scanner.close();`)\n        code.insert(`return input;`)\n\n        Project.codeStrategy.finishFunction(func)\n\n        clazz.addFunction(func)\n    }\n\n}\n","import {OutputFlow} from \"../../flows/OutputFlow\";\nimport {OutputFlowCode} from \"../common/OutputFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {Func, Parameter} from \"../../project/Func\";\nimport {Code} from \"../Code\";\nimport {Project} from \"../../project/Project\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\nimport {ProgrammingLanguage} from \"../../../models\";\n\nexport class JavaOutputFlowCode implements OutputFlowCode {\n\n    generateMain(outputFlow: OutputFlow, clazz: Clazz): void {\n        clazz.writeCodeToMainFunction(`${outputFlow.functionInvocation()};`)\n        clazz.writeMainCodeFromFlow(outputFlow.nextFlow())\n    }\n\n    generateFunc(outputFlow: OutputFlow, clazz: Clazz): void {\n        if (outputFlow.content == null)\n            return\n\n        const code = new Code(clazz.indentationCount)\n\n        const parameters: Parameter[] = []\n        if (outputFlow.content.variable.name) {\n            parameters.push(\n                new Parameter(\n                    outputFlow.content.variable.name,\n                    ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, outputFlow.content.variable.type)))\n        }\n\n        const func = new Func(\n            outputFlow.functionName(),\n            parameters,\n            undefined,\n            code\n        )\n\n        Project.codeStrategy.initFunction(func)\n\n        let printString = \"\"\n\n        if (!outputFlow.content.variable.name) {\n            printString = `System.out.println(\"${outputFlow.content.variable.value}\");`\n        } else {\n            printString = `System.out.println(\"Value of ${outputFlow.content.variable.name} is \" + ${outputFlow.content.variable.name});`\n        }\n\n        code.insert(printString)\n        Project.codeStrategy.finishFunction(func)\n        clazz.addFunction(func)\n    }\n}\n","import {RandomFlow} from \"../../flows/RandomFlow\";\nimport {RandomFlowCode} from \"../common/RandomFlowCode\";\nimport {Clazz} from \"../../project/Clazz\";\n\nexport class JavaRandomFlowCode implements RandomFlowCode {\n\n    generateMain(randomFlow: RandomFlow, clazz: Clazz) {\n        if (randomFlow.content == null)\n            return\n\n        clazz.addGlobalVariable(\"static Random random = new Random();\")\n        clazz.addDependency(\"import java.util.Random;\")\n\n        let variableSetCode = \"\"\n        if (clazz.addVariable(randomFlow.content.variable.name)) {\n            variableSetCode = \"double \"\n        }\n\n        clazz.writeCodeToMainFunction(\n            `${variableSetCode}${randomFlow.content.variable.name} = ${randomFlow.content.min} + (${randomFlow.content.max} - ${randomFlow.content.min}) * random.nextDouble();`\n        )\n\n        clazz.writeMainCodeFromFlow(randomFlow.nextFlow())\n    }\n\n}\n","import {CodeStrategy} from \"../CodeStrategy\";\nimport {Func, Parameter} from \"../../project/Func\";\nimport {Clazz} from \"../../project/Clazz\";\nimport {JavaArithmeticFlowCode} from \"./JavaArithmeticFlowCode\";\nimport {JavaWhileFlowCode} from \"./JavaWhileFlowCode\";\nimport {JavaAssignmentFlowCode} from \"./JavaAssignmentFlowCode\";\nimport {JavaIfFlowCode} from \"./JavaIfFlowCode\";\nimport {JavaInputFlowCode} from \"./JavaInputFlowCode\";\nimport {JavaOutputFlowCode} from \"./JavaOutputFlowCode\";\nimport {JavaRandomFlowCode} from \"./JavaRandomFlowCode\";\nimport {Code} from \"../Code\";\nimport {DirectoryItemType} from \"../../project/DirectoryItem\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\nimport {ProgrammingLanguage, VariableType} from \"../../../models\";\n\nexport class JavaCodeStrategy implements CodeStrategy {\n\n    arithmeticFlowCode = new JavaArithmeticFlowCode()\n    assignmentFlowCode = new JavaAssignmentFlowCode()\n    ifFlowCode = new JavaIfFlowCode()\n    inputFlowCode = new JavaInputFlowCode()\n    outputFlowCode = new JavaOutputFlowCode()\n    randomFlowCode = new JavaRandomFlowCode()\n    whileFlowCode = new JavaWhileFlowCode()\n\n    initClazz(clazz: Clazz): void {\n        clazz.generatedCode.push(`public class ${clazz.name} {`)\n        clazz.incrementIndentation()\n    }\n\n    finishClazz(clazz: Clazz): void {\n        clazz.decrementIndentation()\n        clazz.generatedCode.push(`}`)\n    }\n\n    initMain(clazz: Clazz): void {\n        const parameters: Parameter[] = []\n        const mainFunctionLines = new Code(clazz.indentationCount)\n        let mainFnName = \"\"\n\n        if (clazz.type === DirectoryItemType.MAIN_CLASS) {\n            mainFnName = \"main\"\n            parameters.push(\n                new Parameter(\n                    \"args\",\n                    ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, VariableType.MAIN_ARG)))\n        } else {\n            mainFnName = clazz.name\n            parameters.push(\n                new Parameter(\n                    clazz.name,\n                    ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, VariableType.MAIN_ARG))) //TODO CHANGE TYPE TO ARG FROM FN\n        }\n\n        clazz.mainFunction = new Func(\n            mainFnName,\n            parameters,\n            undefined,\n            mainFunctionLines\n        )\n\n        this.initFunction(clazz.mainFunction)\n    }\n\n    finishMain(clazz: Clazz): void {\n        if (clazz.mainFunction == null)\n            throw new Error(\"Main function is undefined!\")\n\n        clazz.mainFunction.code.decrementIndentation()\n        clazz.mainFunction.code.insert(\"}\")\n        clazz.mainFunction.code.insert(\"\")\n    }\n\n    initFunction(func: Func): void {\n        let returnTypeString = \"\"\n        if (func.returnType) {\n            returnTypeString += `${func.returnType}`\n        } else {\n            returnTypeString += \"void\"\n        }\n\n        let parameterString = \"\"\n\n        func.parameters.forEach((value, index) => {\n            parameterString += `${value.type} ${value.name}`\n            if (index !== func.parameters.length - 1) {\n                parameterString += \", \"\n            }\n        })\n\n        func.code.insert(`private static ${returnTypeString} ${func.functionName}(${parameterString}) {`)\n        func.code.incrementIndentation()\n    }\n\n    finishFunction(func: Func): void {\n        func.code.decrementIndentation()\n        func.code.insert(\"}\")\n        func.code.insert(\"\")\n    }\n}\n","import {ProgrammingLanguage} from \"../../models\";\nimport {CodeStrategy} from \"./CodeStrategy\";\nimport {KotlinCodeStrategy} from \"./kotlin/KotlinCodeStrategy\";\nimport {JavaCodeStrategy} from \"./java/JavaCodeStrategy\";\n\nexport class CodeStrategyFactory {\n    static createCodeStrategy(programmingLanguage: ProgrammingLanguage): CodeStrategy {\n        switch (+programmingLanguage) {\n            case ProgrammingLanguage.JAVA:\n                return new JavaCodeStrategy()\n            case ProgrammingLanguage.KOTLIN:\n                return new KotlinCodeStrategy()\n            default:\n                return new KotlinCodeStrategy()\n        }\n    }\n}\n","import {Directory} from \"./Directory\"\nimport {MainClazz} from \"./MainClazz\"\nimport {ProgrammingLanguage} from \"../../models\"\nimport {DirectoryItemType} from \"./DirectoryItem\"\nimport {Clazz} from \"./Clazz\"\nimport {CodeStrategy} from \"../code/CodeStrategy\"\nimport {KotlinCodeStrategy} from \"../code/kotlin/KotlinCodeStrategy\"\nimport {CodeStrategyFactory} from \"../code/CodeStrategyFactory\"\nimport {DataClazz} from \"./DataClazz\";\nimport {Defaults} from \"../../config\"\n\nexport class Project {\n    static codeStrategy: CodeStrategy = new KotlinCodeStrategy()\n    static programmingLanguage: ProgrammingLanguage = ProgrammingLanguage.KOTLIN\n    projectName: string\n    rootDirectory: Directory\n\n    constructor(projectName: string) {\n        this.projectName = projectName\n        this.rootDirectory = new Directory(Defaults.ROOT_FOLDER_NAME, [])\n    }\n\n    static setProgrammingLanguage(programmingLanguage: ProgrammingLanguage) {\n        Clazz.flowIncrementalId = 0\n        Project.programmingLanguage = programmingLanguage\n        Project.codeStrategy = CodeStrategyFactory.createCodeStrategy(programmingLanguage)\n    }\n\n    generateClazzCodes() {\n        this.recursivelyGenerateClazzCodes(this.rootDirectory)\n    }\n\n    private recursivelyGenerateClazzCodes(directory: Directory) {\n        directory.items.forEach((item) => {\n            switch (item.type) {\n                case DirectoryItemType.MAIN_CLASS:\n                    const mainClazz = item as MainClazz\n                    mainClazz.generateCode()\n                    break\n                case DirectoryItemType.CLASS:\n                    const clazz = item as Clazz\n                    clazz.generateCode()\n                    break\n                case DirectoryItemType.DATA_CLASS:\n                    const dataClass = item as DataClazz\n                    dataClass.generateCode()\n                    break\n                case DirectoryItemType.DIRECTORY:\n                    const directory = item as Directory\n                    this.recursivelyGenerateClazzCodes(directory)\n                    break\n            }\n        })\n    }\n\n}\n","import {BaseFlow} from \"./BaseFlow\";\nimport {FlowType} from \"../../models\";\nimport {Clazz} from \"../project/Clazz\";\nimport {Variable} from \"../../models/Variable\";\n\nexport class DataClassFlow implements BaseFlow {\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: DataClassFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: DataClassFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `dataClassFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class DataClassFlowContent {\n    variables: Variable[]\n\n    constructor(\n        variables: Variable[],\n    ) {\n        this.variables = variables\n    }\n}\n","import {DirectoryItem, DirectoryItemType} from \"./DirectoryItem\"\nimport {Func} from \"./Func\"\nimport {Code, CodeLine} from \"../code/Code\"\nimport {BaseFlow} from \"../flows/BaseFlow\"\nimport {Stack} from \"stack-typescript\"\nimport {FlowModel} from \"../FlowModelJSON\"\nimport {FlowType} from \"../../models\"\nimport {InitialFlow} from \"../flows/InitialFlow\"\nimport {AssignmentFlow} from \"../flows/AssignmentFlow\"\nimport {InputFlow} from \"../flows/InputFlow\"\nimport {OutputFlow} from \"../flows/OutputFlow\"\nimport {ArithmeticFlow} from \"../flows/ArithmeticFlow\"\nimport {WhileFlow} from \"../flows/WhileFlow\"\nimport {IfFlow} from \"../flows/IfFlow\"\nimport {RandomFlow} from \"../flows/RandomFlow\"\nimport {Project} from \"./Project\"\nimport {DataClassFlow} from \"../flows/DataClassFlow\";\n\nexport class Clazz implements DirectoryItem {\n    static INITIAL_ID = \"INITIAL_ID\"\n    static TERMINATION_ID = \"TERMINATION_ID\"\n    static flowIncrementalId = 0\n\n    type: DirectoryItemType\n    name: string\n    mainFunction: Func | null = null\n    functions: Func[]\n\n    flowMap: Map<string, BaseFlow> = new Map()\n    generatedCode: string[] = []\n    scopeCount = 0\n    spacing = \"\\t\"\n    loopStack: Stack<string> = new Stack()\n\n    indentationCount = 0\n    declaredVariableSet: Set<string> = new Set()\n\n    classCode = new Code(this.indentationCount)\n    globalVariableSet = new Code(this.indentationCount)\n    dependencySet = new Code(this.indentationCount)\n\n    constructor(type: DirectoryItemType, name: string, flowModels: FlowModel[]) {\n        this.type = type\n        this.name = name\n        this.functions = []\n        this.reset(flowModels)\n    }\n\n    reset(flowModels: FlowModel[]) {\n        this.flowMap = this.convertToFlowObjects(flowModels)\n\n        this.functions = []\n        this.mainFunction = null\n        this.generatedCode = []\n        this.scopeCount = 0\n        this.loopStack = new Stack()\n        this.indentationCount = 0\n        this.declaredVariableSet = new Set()\n        this.classCode = new Code(this.indentationCount)\n        this.globalVariableSet = new Code(this.indentationCount)\n        this.dependencySet = new Code(this.indentationCount)\n\n        Project.codeStrategy.initMain(this)\n\n        this.loopStack.push(Clazz.TERMINATION_ID)\n\n        const initialFlow = this.flowMap.get(Clazz.INITIAL_ID)\n\n        if (initialFlow) {\n            this.writeMainCodeFromFlow(Clazz.INITIAL_ID)\n        }\n\n        this.flowMap.forEach((flow) => {\n            this.writeFunctionCodeFromFlow(flow)\n        })\n\n        Project.codeStrategy.finishMain(this)\n        this.decrementIndentation()\n    }\n\n    writeCodeToMainFunction(line: string) {\n        if (this.mainFunction == null) {\n            throw new Error(\"Undefined main function!\")\n        }\n\n        this.mainFunction.code.insert(line)\n    }\n\n    addFunction(fn: Func) {\n        this.functions.push(fn)\n    }\n\n    addDependency(dependency: string) {\n        this.dependencySet.insert(dependency)\n    }\n\n    addGlobalVariable(globalVariable: string) {\n        this.globalVariableSet.insert(globalVariable)\n    }\n\n    /**\n     * Returns false if the set already contains variable true otherwise\n     */\n\n    addVariable(name: string | undefined): boolean {\n        name = name === undefined ? \"\" : name\n\n        if (this.declaredVariableSet.has(name)) {\n            return false\n        }\n\n        this.declaredVariableSet.add(name)\n        return true\n    }\n\n    addToLoopStack(id: string) {\n        this.loopStack.push(id)\n    }\n\n    writeMainCodeFromFlow(id: string) {\n        if (!this.removeFromStackIfTopEquals(id)) {\n            const flow = this.flowMap.get(id)\n            if (flow) {\n                if (flow instanceof ArithmeticFlow) {\n                    Project.codeStrategy.arithmeticFlowCode.generateMain(flow, this)\n                } else if (flow instanceof AssignmentFlow) {\n                    Project.codeStrategy.assignmentFlowCode.generateMain(flow, this)\n                } else if (flow instanceof InputFlow) {\n                    Project.codeStrategy.inputFlowCode.generateMain(flow, this)\n                } else if (flow instanceof OutputFlow) {\n                    Project.codeStrategy.outputFlowCode.generateMain(flow, this)\n                } else if (flow instanceof WhileFlow) {\n                    Project.codeStrategy.whileFlowCode.generateMain(flow, this)\n                } else if (flow instanceof IfFlow) {\n                    Project.codeStrategy.ifFlowCode.generateMain(flow, this)\n                } else if (flow instanceof RandomFlow) {\n                    Project.codeStrategy.randomFlowCode.generateMain(flow, this)\n                } else if (flow instanceof InitialFlow) {\n                    this.writeMainCodeFromFlow(flow.nextFlow())\n                }\n            }\n        }\n    }\n\n    writeFunctionCodeFromFlow(flow: BaseFlow) {\n        if (flow instanceof InputFlow) {\n            Project.codeStrategy.inputFlowCode.generateFunc(flow, this)\n        } else if (flow instanceof OutputFlow) {\n            Project.codeStrategy.outputFlowCode.generateFunc(flow, this)\n        }\n    }\n\n    generateCode() {\n        Project.codeStrategy.initClazz(this)\n\n        if (this.mainFunction == null) {\n            throw new Error(\"Main function not defined!\")\n        }\n\n        this.dependencySet.lines.forEach((dependencyLine) => {\n            this.generatedCode.push(this.createLineWithSpacing(dependencyLine))\n        })\n\n        if (this.dependencySet.lines.length > 0) {\n            this.generatedCode.push(\"\")\n        }\n\n        this.globalVariableSet.lines.forEach((globalVariableLine) => {\n            this.generatedCode.push(this.createLineWithSpacing(globalVariableLine))\n        })\n\n        if (this.globalVariableSet.lines.length > 0) {\n            this.generatedCode.push(\"\")\n        }\n\n        this.mainFunction.code.lines.forEach((codeLine) => {\n            this.generatedCode.push(this.createLineWithSpacing(codeLine))\n        })\n\n        this.functions.forEach((func) => {\n                func.code.lines.forEach((codeLine) => {\n                    this.generatedCode.push(this.createLineWithSpacing(codeLine))\n                })\n            }\n        )\n\n        Project.codeStrategy.finishClazz(this)\n    }\n\n    getCode(): string {\n        return this.generatedCode.join(\"\\n\")\n    }\n\n    incrementIndentation() {\n        this.indentationCount++\n    }\n\n    decrementIndentation() {\n        this.indentationCount--\n    }\n\n    /**\n     * Returns true if top equals index and pops it returns false otherwise.\n     */\n\n    removeFromStackIfTopEquals(id: string): boolean {\n        if (this.loopStack.top === id) {\n            this.loopStack.pop()\n            return true\n        }\n\n        return false\n    }\n\n    protected createLineWithSpacing(codeLine: CodeLine): string {\n        let line = \"\"\n        for (let i = 0; i < codeLine.indentationCount; i++) {\n            line += this.spacing\n        }\n\n        line += codeLine.content\n        return line\n    }\n\n    private convertToFlowObjects(flowModels: FlowModel[]): Map<string, BaseFlow> {\n        const baseFlowMap = new Map<string, BaseFlow>()\n\n        flowModels.forEach((value) => {\n\n                switch (value.type) {\n                    case FlowType.INITIAL:\n                        baseFlowMap.set(Clazz.INITIAL_ID, new InitialFlow(\n                            Clazz.INITIAL_ID,\n                            value.nextFlowId,\n                            value.type\n                        ))\n                        break\n                    case FlowType.ASSIGNMENT:\n                        baseFlowMap.set(value.id, new AssignmentFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.assignmentFlowContent\n                        ))\n                        break\n                    case FlowType.INPUT:\n                        baseFlowMap.set(value.id, new InputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.inputFlowContent\n                        ))\n                        break\n                    case FlowType.OUTPUT:\n                        baseFlowMap.set(value.id, new OutputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.outputFlowContent\n                        ))\n                        break\n                    case FlowType.ARITHMETIC:\n                        baseFlowMap.set(value.id, new ArithmeticFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.arithmeticFlowContent\n                        ))\n                        break\n                    case FlowType.WHILE:\n                        baseFlowMap.set(value.id, new WhileFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.whileFlowContent\n                        ))\n                        break\n                    case FlowType.IF:\n                        baseFlowMap.set(value.id, new IfFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.ifFlowContent\n                        ))\n                        break\n                    case FlowType.RANDOM:\n                        baseFlowMap.set(value.id, new RandomFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.randomFlowContent\n                        ))\n                        break\n                    case FlowType.DATA_CLASS:\n                        baseFlowMap.set(value.id, new DataClassFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.dataClassFlowContent\n                        ))\n                        break\n                    /*\n                    case \"for\":\n                        baseFlowList.push(new ForFlow(\n                            value.id,\n                            value.type,\n                            value.forFlowContent\n                        ))\n                        break\n                     */\n                    default :\n                        break\n\n                }\n            }\n        )\n\n        return baseFlowMap\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {Condition} from \"../../models/Condition\"\nimport {FlowType} from \"../../models\"\nimport {ConditionType} from \"../../models/VariableEnums\";\nimport {Clazz} from \"../project/Clazz\";\n\nexport class WhileFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: WhileFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: WhileFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (Clazz.flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return \"\"\n    }\n\n    functionName(): string {\n        return \"\"\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : Clazz.TERMINATION_ID\n    }\n\n}\n\nexport class WhileFlowContent {\n    conditions: Condition[]\n    conditionType: ConditionType\n    scopeId: string | null\n\n    constructor(\n        conditions: Condition[],\n        conditionType: ConditionType,\n        scopeId: string | null,\n    ) {\n        this.conditions = conditions\n        this.conditionType = conditionType\n        this.scopeId = scopeId\n    }\n\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\nimport {WhileFlowContent} from \"../../../generator/flows/WhileFlow\"\n\nexport class WhileFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const whileFlow = flow as WhileFlowNode\n\n        const nextFlow = whileFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n        const scopeFlow = whileFlow.getScopeFlow()\n        const scopeFlowId = scopeFlow ? scopeFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.WHILE,\n            whileFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            new WhileFlowContent(\n                whileFlow.conditionList,\n                whileFlow.conditionType,\n                scopeFlowId\n            ),\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {InputFlowNode} from \"./InputFlowNode\"\nimport {InputFlowContent} from \"../../../generator/flows/InputFlow\"\n\nexport class InputFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const inputFlow = flow as InputFlowNode\n\n        const nextFlow = inputFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.INPUT,\n            inputFlow.getID(),\n            null,\n            new InputFlowContent(inputFlow.getVariable()),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\nimport {OutputFlowContent} from \"../../../generator/flows/OutputFlow\"\n\nexport class OutputFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const outputFlow = flow as OutputFlowNode\n\n        const nextFlow = outputFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.OUTPUT,\n            outputFlow.getID(),\n            null,\n            null,\n            new OutputFlowContent(outputFlow.getVariable()),\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport {ArithmeticFlowContent} from \"../../../generator/flows/ArithmeticFlow\"\n\nexport class ArithmeticFlowModelGenerator extends BaseFlowModelGenerator {\n    generate = (flow: BaseFlowNode): FlowModel => {\n        const arithmeticFlow = flow as ArithmeticFlowNode\n\n        const nextFlow = arithmeticFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.ARITHMETIC,\n            arithmeticFlow.getID(),\n            null,\n            null,\n            null,\n            new ArithmeticFlowContent(\n                arithmeticFlow.getVariable(),\n                arithmeticFlow.getOperation(),\n                arithmeticFlow.getOperator1(),\n                arithmeticFlow.getOperator2()\n            ),\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {AssignmentFlowContent} from \"../../../generator/flows/AssignmentFlow\"\n\nexport class AssignmentFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const assignmentFlow = flow as AssignmentFlowNode\n\n        const nextFlow = assignmentFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.ASSIGNMENT,\n            assignmentFlow.getID(),\n            new AssignmentFlowContent(assignmentFlow.getVariable()),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {InitialFlowNode} from \"./InitialFlowNode\"\n\nexport class InitialFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const initialFlow = flow as InitialFlowNode\n\n        const nextFlow = initialFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.INITIAL,\n            flow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {IfFlowNode} from \"./IfFlowNode\"\nimport {IfFlowContent} from \"../../../generator/flows/IfFlow\"\n\nexport class IfFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const ifFlow = flow as IfFlowNode\n\n        const nextFlow = ifFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n        const trueScopeFlow = ifFlow.getTrueScopeFlow()\n        const trueScopeFlowId = trueScopeFlow ? trueScopeFlow.getID() : null\n        const falseScopeFlow = ifFlow.getFalseScopeFlow()\n        const falseScopeFlowId = falseScopeFlow ? falseScopeFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.IF,\n            ifFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            new IfFlowContent(\n                ifFlow.conditionList,\n                ifFlow.conditionType,\n                trueScopeFlowId,\n                falseScopeFlowId\n            ),\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {RandomFlowNode} from \"./RandomFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {RandomFlowContent} from \"../../../generator/flows/RandomFlow\"\n\nexport class RandomFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const randomFlow = flow as RandomFlowNode\n\n        const nextFlow = randomFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.RANDOM,\n            randomFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            new RandomFlowContent(randomFlow.getVariable(), randomFlow.minValue, randomFlow.maxValue),\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {DataClassFlowNode} from \"./DataClassFlowNode\"\nimport {DataClassFlowContent} from \"../../../generator/flows/DataClassFlow\"\n\nexport class DataClassFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const dataClassFlow = flow as DataClassFlowNode\n\n        const nextFlow = dataClassFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.DATA_CLASS,\n            dataClassFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            new DataClassFlowContent(dataClassFlow.fieldList),\n            nextFlowId\n        )\n    }\n}\n","import {FlowType} from \"../../models\"\nimport {FlowModel} from \"../../generator/FlowModelJSON\"\nimport {WhileFlowModelGenerator} from \"./While/WhileFlowModelGenerator\"\nimport {InputFlowModelGenerator} from \"./Input/InputFlowModelGenerator\"\nimport {OutputFlowModelGenerator} from \"./Output/OutputFlowModelGenerator\"\nimport {ArithmeticFlowModelGenerator} from \"./Arithmetic/ArithmeticFlowModelGenerator\"\nimport {AssignmentFlowModelGenerator} from \"./Assignment/AssignmentFlowModelGenerator\"\nimport {InitialFlowModelGenerator} from \"./Initial/InitialFlowModelGenerator\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {IfFlowModelGenerator} from \"./If/IfFlowModelGenerator\"\nimport {RandomFlowModelGenerator} from \"./Random/RandomFlowModelGenerator\"\nimport {DataClassFlowModelGenerator} from \"./DataClass/DataClassFlowModelGenerator\"\n\nexport class FlowModelFactory {\n    private constructor() {\n    }\n\n    static create(baseFlow: BaseFlowNode): FlowModel | null {\n        switch (baseFlow.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowModelGenerator().generate(baseFlow)\n            case FlowType.IF:\n                return new IfFlowModelGenerator().generate(baseFlow)\n            case FlowType.WHILE:\n                return new WhileFlowModelGenerator().generate(baseFlow)\n            case FlowType.FOR:\n                return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowModelGenerator().generate(baseFlow)\n            case FlowType.OUTPUT:\n                return new OutputFlowModelGenerator().generate(baseFlow)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowModelGenerator().generate(baseFlow)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowModelGenerator().generate(baseFlow)\n            case FlowType.RANDOM:\n                return new RandomFlowModelGenerator().generate(baseFlow)\n            case FlowType.DATA_CLASS:\n                return new DataClassFlowModelGenerator().generate(baseFlow)\n            default:\n                return null\n        }\n    }\n}\n","import {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowModel} from \"../../generator/FlowModelJSON\"\nimport {FlowModelFactory} from \"./FlowModelFactory\"\nimport {FlowType} from \"../../models\"\nimport {WhileFlowNode} from \"./While/WhileFlowNode\"\nimport * as _ from \"lodash\"\nimport {IfFlowNode} from \"./If/IfFlowNode\"\n\nexport class FlowModelGenerator {\n\n    private constructor() {\n    }\n\n    static generate(initialFlow: BaseFlowNode | null): FlowModel[] {\n        const flowModelList: FlowModel[] = []\n\n        this.generateFlowModel(initialFlow, flowModelList)\n\n        return flowModelList\n    }\n\n    private static generateFlowModel(currentFlow: BaseFlowNode | null, flowModelList: FlowModel[], scopeId: string | null = null) {\n        if (!currentFlow)\n            return\n\n        // Check if the node has been visited before\n        if (_.includes(flowModelList.map((flow) => flow.id), currentFlow.getID()))\n            return\n\n        switch (currentFlow.flowType) {\n            case FlowType.WHILE:\n                this.generateFlowModel((currentFlow as WhileFlowNode).getScopeFlow(), flowModelList, currentFlow.getID())\n                break\n            case FlowType.IF:\n                this.generateFlowModel((currentFlow as IfFlowNode).getTrueScopeFlow(), flowModelList, currentFlow.getID())\n                this.generateFlowModel((currentFlow as IfFlowNode).getFalseScopeFlow(), flowModelList, currentFlow.getID())\n                break\n        }\n\n        const flowModel = FlowModelFactory.create(currentFlow)\n        if (flowModel)\n            flowModelList.push(flowModel)\n\n        this.generateFlowModel(currentFlow.getNextFlow(), flowModelList, scopeId)\n    }\n}\n","import React, {Component} from \"react\"\nimport {Dialog, DialogTitle, Typography} from \"@material-ui/core\"\nimport {DialogProps} from \"@material-ui/core/Dialog\"\nimport Button from \"@material-ui/core/Button\"\nimport strings from \"../../lang\"\nimport styles from \"./AddNodeDialog.module.css\"\nimport {BasePropertiesState} from \"../Flows/Base/BaseProperties\"\nimport {FlowType} from \"../../models\"\nimport {FlowPropertiesFactory} from \"../Flows\"\n\nexport interface AddNodeDialogProps extends DialogProps {\n    onSaveClick: (data: BasePropertiesState | null) => void,\n    onDismissClick: () => void,\n    type: FlowType | null\n}\n\nexport interface AddNodeDialogState {\n    bodyData: BasePropertiesState | null\n}\n\nexport class AddNodeDialog extends Component<AddNodeDialogProps, AddNodeDialogState> {\n    constructor(props: AddNodeDialogProps) {\n        super(props)\n\n        this.state = {\n            bodyData: null\n        }\n    }\n\n    onBodyChanged(data: BasePropertiesState) {\n        this.setState({bodyData: data})\n    }\n\n    onSave() {\n        if (this.props.onSaveClick != null)\n            this.props.onSaveClick(this.state.bodyData)\n    }\n\n    onDismiss() {\n        if (this.props.onDismissClick != null)\n            this.props.onDismissClick()\n    }\n\n    render() {\n        return (\n            <Dialog aria-labelledby=\"simple-dialog-title\" {...this.props}>\n                <DialogTitle id=\"simple-dialog-title\">Set Properties</DialogTitle>\n                <div className={styles.addNodeDialogBody}>\n                    <Typography color=\"error\">\n                        {(this.state.bodyData && this.state.bodyData.errorMessage) ? this.state.bodyData.errorMessage : \"\"}\n                    </Typography>\n                    {FlowPropertiesFactory.create(this.props.type, this.onBodyChanged.bind(this))}\n                </div>\n                <div className={styles.addNodeDialogButtonContainer}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.onDismiss.bind(this)}>\n                        {strings.dismiss}\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.onSave.bind(this)}>\n                        {strings.save}\n                    </Button>\n                </div>\n            </Dialog>\n        )\n    }\n}\n","import {AbstractPortFactory, PortModel} from \"nberktumer-react-diagrams\"\nimport {DefaultPortModel} from \"./DefaultPort\"\n\nexport class PortFactory extends AbstractPortFactory {\n    cb: (initialConfig?: any) => DefaultPortModel\n\n    constructor(type: string, cb: (initialConfig?: any) => DefaultPortModel) {\n        super(type)\n        this.cb = cb\n    }\n\n    getNewInstance(initialConfig?: any): DefaultPortModel {\n        return this.cb(initialConfig)\n    }\n}\n","import * as React from \"react\"\nimport {createRef} from \"react\"\nimport * as _ from \"lodash\"\nimport {BaseWidget, BaseWidgetProps} from \"nberktumer-react-diagrams\"\nimport {BaseFlowNode} from \"./BaseFlowNode\"\nimport styles from \"./BaseFlow.module.css\"\nimport {DefaultPortLabel, DefaultPortLocation, DefaultPortModel} from \"../../Ports/DefaultPort\"\nimport Icon from \"@material-ui/core/Icon\"\nimport {FlowPropertiesFactory} from \"../../../Flows\"\nimport {BasePropertiesState} from \"../../../Flows/Base/BaseProperties\"\nimport {BaseVariableFlowNode} from \"../../../Flows/Base/BaseVariableFlowNode\"\nimport {FlowConsumer} from \"../../../../stores/FlowStore\"\nimport {Card, CardContent, CardHeader, IconButton} from \"@material-ui/core\"\nimport strings from \"../../../../lang\"\n\nexport interface RectangleNodeWidgetProps extends BaseWidgetProps {\n    node: BaseFlowNode;\n}\n\nexport interface RectangleNodeWidgetState {\n    isPropertiesOpen: boolean,\n    height: number,\n    width: number\n}\n\nexport class BaseFlowWidget extends BaseWidget<RectangleNodeWidgetProps, RectangleNodeWidgetState> {\n    widgetRef = createRef<HTMLDivElement>()\n\n    constructor(props: RectangleNodeWidgetProps) {\n        super(\"srd-default-node\", props)\n        this.state = {\n            isPropertiesOpen: false,\n            height: 0,\n            width: 0\n        }\n    }\n\n    generatePort = (port: DefaultPortModel) => {\n        return <DefaultPortLabel model={port} key={port.id}/>\n    }\n\n    editClickListener = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        this.props.node.setSelected(false)\n        this.setState({isPropertiesOpen: true})\n    }\n\n    componentDidMount() {\n        if (!this.widgetRef.current)\n            return\n\n        const height = this.widgetRef.current.clientHeight\n        const width = this.widgetRef.current.clientWidth\n        this.setState({height, width})\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => (\n                    <div {...this.getProps()} style={{background: this.props.node.color}} ref={this.widgetRef}>\n                        <Card className={styles.nodePropertiesWindow}\n                              style={{\n                                  display: this.state.isPropertiesOpen ? \"flex\" : \"none\",\n                                  left: this.state.width - 12,\n                                  bottom: this.state.height - 12\n                              }}>\n                            <CardHeader title={strings.properties} action={\n                                <IconButton onClick={() => {\n                                    this.setState({isPropertiesOpen: false})\n                                }}>\n                                    <Icon style={{color: \"black\"}}>close</Icon>\n                                </IconButton>\n                            }/>\n                            <CardContent>\n                                {FlowPropertiesFactory.createReadonlyVariableType(this.props.node.flowType, (data: BasePropertiesState) => {\n                                    if (!data.errorMessage) {\n                                        if (this.props.node instanceof BaseVariableFlowNode) {\n                                            // tslint:disable-next-line:prefer-for-of\n                                            for (let i = 0; i < flowContext.variableList.length; i++) {\n                                                if (flowContext.variableList[i].name === (this.props.node as BaseVariableFlowNode).getVariable().name) {\n                                                    flowContext.variableList[i].name = data.variableName\n                                                    break\n                                                }\n                                            }\n                                        }\n                                        this.props.node.updateNode(data)\n                                    }\n                                }, this.props.node)}\n                            </CardContent>\n                        </Card>\n                        <div className={styles.rectangleNodeTitle}>\n                            <div className={styles.rectangleNodeName}>{this.props.node.name}</div>\n                            <Icon onClick={(e) => this.editClickListener(e)} className={styles.editIcon}>edit</Icon>\n                        </div>\n                        <div className={styles.rectangleNodeInfo}\n                             style={{display: this.props.node.info ? \"flex\" : \"none\"}}>\n                            <div className={styles.rectangleNodeName}>{this.props.node.info}</div>\n                        </div>\n                        <div className={styles.rectangleNodePorts}>\n                            <div className={styles.rectangleNodeIn}>\n                                {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.LEFT), this.generatePort.bind(this))}\n                            </div>\n                            <div className={styles.rectangleNodeOut}>\n                                {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.RIGHT), this.generatePort.bind(this))}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </FlowConsumer>\n        )\n    }\n}\n","import * as SRD from \"nberktumer-react-diagrams\"\nimport * as React from \"react\"\nimport {BaseFlowNode} from \"./BaseFlowNode\"\nimport {BaseFlowWidget} from \"./BaseFlowWidget\"\nimport {FlowNodeFactory} from \"../../../Flows\"\n\nexport class BaseFlowFactory extends SRD.AbstractNodeFactory {\n    constructor() {\n        super(\"base-flow\")\n    }\n\n    generateReactWidget(diagramEngine: SRD.DiagramEngine, node: BaseFlowNode): JSX.Element {\n        return <BaseFlowWidget node={node}/>\n    }\n\n    getNewInstance(node: any) {\n        return FlowNodeFactory.load(node)\n    }\n}\n","import React, {Component, useContext} from \"react\"\nimport styles from \"./CanvasPanel.module.css\"\nimport * as _ from \"lodash\"\nimport {BaseEvent, BaseModel, DiagramEngine, DiagramModel, DiagramWidget, NodeModel} from \"nberktumer-react-diagrams\"\nimport {FlowType} from \"../../models\"\nimport {PortFactory} from \"../CanvasItems/Ports/PortFactory\"\nimport {BaseFlowFactory} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowFactory\"\nimport {BasePropertiesState} from \"../Flows/Base/BaseProperties\"\nimport {DefaultPort, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../CanvasItems/Ports/DefaultPort\"\nimport {InitialFlowNode} from \"../Flows/Initial/InitialFlowNode\"\nimport {FlowNodeFactory} from \"../Flows\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowConsumer, FlowContext} from \"../../stores/FlowStore\"\nimport {Variable} from \"../../models/Variable\"\n\nexport interface CanvasPanelProps {\n    onDrop: (type: FlowType, position: { x: number, y: number }) => void,\n    onDiagramChanged: () => void,\n    onSelectionChanged: (event: BaseEvent<BaseModel> & { isSelected: boolean }) => void,\n    onEntityRemoved: (event: BaseEvent<BaseModel>) => void,\n    onItemAdded: (flow: BaseFlowNode) => void\n}\n\nexport interface CanvasPanelState {\n}\n\nexport default class CanvasPanel extends Component<CanvasPanelProps, CanvasPanelState> {\n    activeModel: DiagramModel\n    diagramEngine: DiagramEngine\n    initialNode: InitialFlowNode\n\n    variableList: Variable[] = []\n\n    constructor(props: CanvasPanelProps) {\n        super(props)\n        this.diagramEngine = new DiagramEngine()\n        this.activeModel = new DiagramModel()\n        this.initialNode = FlowNodeFactory.create(FlowType.INITIAL, undefined) as InitialFlowNode\n\n        this.newProject()\n    }\n\n    newProject = () => {\n        this.diagramEngine = new DiagramEngine()\n        this.diagramEngine.installDefaultFactories()\n\n        this.diagramEngine.registerNodeFactory(new BaseFlowFactory())\n        this.diagramEngine.registerPortFactory(new PortFactory(\"default\", () => new DefaultPortModel(\n            new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), \"unknown\")))\n\n        this.activeModel = new DiagramModel()\n        this.diagramEngine.setDiagramModel(this.activeModel)\n\n        this.initialNode = FlowNodeFactory.create(FlowType.INITIAL, undefined) as InitialFlowNode\n        this.initialNode.addListener({\n            selectionChanged: this.props.onSelectionChanged.bind(this),\n            entityRemoved: this.props.onEntityRemoved.bind(this)\n        })\n\n        this.initialNode.x = window.innerWidth * 0.1\n        this.initialNode.y = window.innerHeight * 0.4\n\n        this.diagramEngine.getDiagramModel().addNode(this.initialNode)\n    }\n\n    saveProject = () => {\n        const diagram = this.activeModel.serializeDiagram() as { [k: string]: any }\n        diagram.canvasPanel = {\n            variableList: this.variableList,\n            initialNodeId: this.initialNode.getID()\n        }\n        return diagram\n    }\n\n    loadProject = (data: string, onLoad: (props: any) => void) => {\n        const diagram = JSON.parse(data)\n\n        const model = new DiagramModel()\n        model.deSerializeDiagram(diagram, this.diagramEngine)\n\n        _.forEach(model.getNodes(), (node: NodeModel) => {\n            const baseNode = node as BaseFlowNode\n            baseNode.addListener({\n                selectionChanged: (e: BaseEvent<BaseModel> & { isSelected: boolean }) => this.props.onSelectionChanged(e),\n                entityRemoved: (e: BaseEvent<BaseModel>) => this.props.onEntityRemoved(e)\n            })\n            baseNode.addOnLinkChangedListener(this.props.onDiagramChanged)\n            baseNode.updateInfo()\n        })\n\n        this.diagramEngine.setDiagramModel(model)\n        this.activeModel = model\n        this.initialNode = model.getNode(diagram.canvasPanel.initialNodeId) as InitialFlowNode\n\n        onLoad(diagram.canvasPanel.variableList)\n        this.forceUpdate()\n    }\n\n    addItem = (type: FlowType, data: BasePropertiesState, position: { x: number, y: number }): void => {\n        const node = FlowNodeFactory.create(type, data)\n        if (!node)\n            return\n\n        node.x = position.x\n        node.y = position.y\n\n        node.addOnLinkChangedListener(this.props.onDiagramChanged)\n        node.addListener({\n            selectionChanged: (e: BaseEvent<BaseModel> & { isSelected: boolean }) => this.props.onSelectionChanged(e),\n            entityRemoved: (e: BaseEvent<BaseModel>) => this.props.onEntityRemoved(e)\n        })\n\n        this.diagramEngine.getDiagramModel().addNode(node)\n\n        this.props.onItemAdded(node)\n        this.forceUpdate()\n    }\n\n    render() {\n        return (\n            <FlowConsumer>\n                {(flowContext) => {\n                    this.variableList = flowContext.variableList\n                    return (\n                        <div\n                            className={styles.diagramLayer}\n                            onDrop={(event) => this.onDrop(event)}\n                            onDragOver={(event) => event.preventDefault()}>\n\n                            <DiagramWidget\n                                maxNumberPointsPerLink={0}\n                                allowLooseLinks={false}\n                                className={styles.srdDemoCanvas}\n                                diagramEngine={this.diagramEngine}/>\n                        </div>\n                    )\n                }}\n            </FlowConsumer>\n        )\n    }\n\n    private onDrop(event: any): void {\n        const data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"))\n\n        if (!Object.values(FlowType).includes(data.type))\n            return\n\n        const points = this.diagramEngine.getRelativeMousePoint(event)\n\n        this.props.onDrop(data.type, points)\n    }\n}\n","import React, {Component} from \"react\"\nimport {AppBar, Menu, MenuItem, Toolbar, Typography} from \"@material-ui/core\"\nimport styles from \"./EditorHeader.module.css\"\nimport strings from \"../../lang\"\n\nexport interface EditorHeaderProps {\n    onClickListener: (item: string) => void\n}\n\nexport interface EditorHeaderState {\n    anchorEl: ((element: HTMLElement) => HTMLElement) | HTMLElement | undefined | null,\n}\n\nexport class EditorHeader extends Component<EditorHeaderProps, EditorHeaderState> {\n    static defaultProps = {\n        onClickListener: () => {\n        }\n    }\n\n    constructor(props: EditorHeaderProps) {\n        super(props)\n\n        this.state = {\n            anchorEl: null\n        }\n    }\n\n    render() {\n        return (\n            <AppBar position=\"static\">\n                <Toolbar className={styles.toolbar}>\n                    <div className={styles.container}>\n                        <Typography\n                            className={styles.clickable}\n                            variant=\"overline\"\n                            aria-owns={Boolean(this.state.anchorEl) ? \"menu-appbar\" : undefined}\n                            aria-haspopup=\"true\"\n                            onClick={this.handleFileMenu}\n                            color=\"inherit\">\n                            {strings.file}\n                        </Typography>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={this.state.anchorEl}\n                            anchorOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\"\n                            }}\n                            transformOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\"\n                            }}\n                            open={Boolean(this.state.anchorEl)}\n                            onClose={this.handleClose}\n                        >\n                            <MenuItem onClick={() => this.handleClick(\"new\")}>{strings.new}</MenuItem>\n                            <MenuItem onClick={() => this.handleClick(\"save\")}>{strings.save}</MenuItem>\n                            <MenuItem onClick={() => this.handleClick(\"load\")}>{strings.load}</MenuItem>\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        )\n    }\n\n    private handleClick = (item: string) => {\n        this.props.onClickListener(item)\n        this.setState({anchorEl: null})\n    }\n\n    private handleFileMenu = (event: any) => {\n        this.setState({anchorEl: event.currentTarget})\n    }\n\n    private handleClose = () => {\n        this.setState({anchorEl: null})\n    }\n}\n","import {Clazz} from \"./Clazz\"\nimport {Func} from \"./Func\"\nimport {DirectoryItem, DirectoryItemType} from \"./DirectoryItem\"\nimport {FlowModel} from \"../FlowModelJSON\"\n\nexport class MainClazz extends Clazz implements DirectoryItem {\n\n    constructor(type: DirectoryItemType, name: string, flowModels: FlowModel[]) {\n        super(type, name, flowModels)\n    }\n\n    setMainFunction(mainFunction: Func) {\n        this.mainFunction = mainFunction\n    }\n\n}\n","import React, {Component, createRef} from \"react\"\nimport styles from \"./Home.module.css\"\nimport {ReflexContainer, ReflexElement, ReflexSplitter} from \"react-reflex\"\nimport {ShapePanel} from \"../../components/ShapePanel/ShapePanel\"\nimport {ShapeItem} from \"../../components/ShapePanel/ShapeItem\"\nimport {CodePreviewPanel} from \"../../components/CodePreviewPanel/CodePreviewPanel\"\nimport {FlowType, ProgrammingLanguage} from \"../../models\"\nimport {ProjectTreePanel} from \"../../components/ProjectTreePanel/ProjectTreePanel\"\nimport {AddNodeDialog} from \"../../components/AddNodeDialog/AddNodeDialog\"\nimport {BasePropertiesState} from \"../../components/Flows/Base/BaseProperties\"\nimport {Variable} from \"../../models/Variable\"\nimport CanvasPanel from \"../../components/CanvasPanel/CanvasPanel\"\nimport {FlowModelGenerator} from \"../../components/Flows\"\nimport {BaseEvent, BaseModel} from \"nberktumer-react-diagrams\"\nimport {BaseFlowNode} from \"../../components/CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BaseVariableFlowNode} from \"../../components/Flows/Base/BaseVariableFlowNode\"\nimport {EditorHeader} from \"../../components/EditorHeader/EditorHeader\"\nimport {FileUtils} from \"../../utils\"\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    MenuItem,\n    TextField\n} from \"@material-ui/core\"\nimport {FlowProvider} from \"../../stores/FlowStore\"\nimport {Project} from \"../../generator/project/Project\"\nimport {MainClazz} from \"../../generator/project/MainClazz\"\nimport {Clazz} from \"../../generator/project/Clazz\"\nimport {FileModel} from \"../../models/FileModel\"\nimport {Directory} from \"../../generator/project/Directory\"\nimport {ProjectProvider} from \"../../stores/ProjectStore\"\nimport {DirectoryItemType} from \"../../generator/project/DirectoryItem\"\nimport strings from \"../../lang\"\nimport {Defaults} from \"../../config\"\n\nexport interface EditorProps {\n    project: { rootFileModel: FileModel, projectName: string, currentFile: FileModel }\n}\n\nexport interface EditorState {\n    isModalOpen: boolean,\n    isAddNewFileModalOpen: boolean,\n    flowType: FlowType | null,\n    flowPosition: { x: number, y: number },\n    generatedCode: string,\n    newFileName: string,\n    newFileTitle: string,\n    newFileType: string,\n    newFilePath: string,\n    variableList: Variable[],\n    rootFileModel: FileModel,\n    selectedLanguage: ProgrammingLanguage\n}\n\nexport default class Editor extends Component<EditorProps, EditorState> {\n    readonly programmingLanguages = Object.keys(ProgrammingLanguage)\n        .filter((k) => typeof ProgrammingLanguage[k as any] !== \"number\")\n    canvasPanel = createRef<CanvasPanel>()\n    project: Project\n    currentFileModel: FileModel\n    currentClass: Clazz\n    hasLoadedProject = false\n\n    constructor(props: EditorProps) {\n        super(props)\n\n        this.project = new Project(props.project.projectName)\n        this.currentClass = new MainClazz(DirectoryItemType.MAIN_CLASS, \"\", [])\n        this.state = {\n            isModalOpen: false,\n            isAddNewFileModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0},\n            generatedCode: \"\",\n            newFileName: \"\",\n            newFileTitle: \"\",\n            newFileType: \"\",\n            newFilePath: \"\",\n            variableList: [],\n            rootFileModel: props.project.rootFileModel,\n            selectedLanguage: ProgrammingLanguage.KOTLIN\n        }\n\n        console.log(props.project)\n        this.currentFileModel = props.project.currentFile\n    }\n\n    componentDidMount(): void {\n        this.forceUpdate()\n    }\n\n    componentDidUpdate(prevProps: Readonly<EditorProps>, prevState: Readonly<EditorState>, snapshot?: any): void {\n        if (!this.hasLoadedProject) {\n            this.loadClass(this.currentFileModel, false)\n            this.hasLoadedProject = true\n        }\n    }\n\n    resetState = () => {\n        this.setState({\n            isModalOpen: false,\n            isAddNewFileModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0},\n            variableList: [],\n            generatedCode: \"\",\n            newFileName: \"\",\n            newFileType: \"\",\n            newFilePath: \"\"\n        })\n    }\n\n    onModalSaveClick(data: BasePropertiesState | null) {\n        this.onModalClose()\n        if (data && this.canvasPanel.current && this.state.flowType && !data.errorMessage && !data.errorField)\n            this.canvasPanel.current.addItem(this.state.flowType, data, this.state.flowPosition)\n    }\n\n    onModalDismissClick() {\n        this.onModalClose()\n    }\n\n    onModalClose() {\n        this.setState({\n            isModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0}\n        })\n    }\n\n    onDiagramChanged() {\n        Project.setProgrammingLanguage(this.state.selectedLanguage)\n\n        const flowModelList = FlowModelGenerator.generate(this.canvasPanel.current ? this.canvasPanel.current.initialNode : null)\n\n        this.currentClass.reset(flowModelList)\n        this.currentClass.generateCode()\n        // this.project.generateClazzCodes() // TODO: use this for exporting the project\n        this.setState({generatedCode: this.currentClass.getCode()})\n    }\n\n    updateDirectoryItems() {\n        this.project.rootDirectory.items = []\n        this.state.rootFileModel.children.forEach((item: FileModel) => {\n            this.generateDirectoryItems(item, this.project.rootDirectory)\n        })\n    }\n\n    onNewClass(path: string) {\n        this.setState({\n            isAddNewFileModalOpen: true,\n            newFileType: \"class\",\n            newFilePath: path,\n            newFileTitle: strings.newClass\n        })\n    }\n\n    onNewDataClass(path: string) {\n        this.setState({\n            isAddNewFileModalOpen: true,\n            newFileType: \"data_class\",\n            newFilePath: path,\n            newFileTitle: strings.newDataClass\n        })\n    }\n\n    onNewPackage(path: string) {\n        this.setState({\n            isAddNewFileModalOpen: true,\n            newFileType: \"package\",\n            newFilePath: path,\n            newFileTitle: strings.newPackage\n        })\n    }\n\n    onNewFunctionality(path: string) {\n        this.setState({\n            isAddNewFileModalOpen: true,\n            newFileType: \"functionality\",\n            newFilePath: path,\n            newFileTitle: strings.newFunction\n        })\n    }\n\n    onNewFileSave() {\n        const pathList = this.state.newFilePath.split(\"/\")\n\n        let lastFileModel: FileModel | undefined = this.state.rootFileModel\n        pathList.forEach((path) => {\n            if (lastFileModel) {\n                const result = lastFileModel.children.find((val) => val.isDir && val.filename === path)\n                if (result) {\n                    lastFileModel = result\n                }\n            }\n        })\n\n        if (lastFileModel) {\n            switch (this.state.newFileType) {\n                case \"package\":\n                case \"data_class\":\n                case \"class\": {\n                    let currentDir = this.project.rootDirectory\n                    pathList.forEach((path) => {\n                        currentDir.items.forEach((dirItem) => {\n                            if (dirItem.type === DirectoryItemType.DIRECTORY && dirItem.name === path) {\n                                currentDir = dirItem as Directory\n                            }\n                        })\n                    })\n                    if (this.state.newFileType === \"package\") {\n                        currentDir.addDirectoryItem(new Directory(this.state.newFileName, []))\n                    } else {\n                        currentDir.addDirectoryItem(new Clazz(DirectoryItemType.CLASS, this.state.newFileName, []))\n                    }\n                    lastFileModel.children.push(new FileModel(this.state.newFileName, \"\", this.state.newFileType === \"package\", false, []))\n                    break\n                }\n            }\n        }\n\n        this.onAddNewFileDialogClose()\n        this.forceUpdate()\n    }\n\n    onAddNewFileDialogClose() {\n        this.setState({isAddNewFileModalOpen: false, newFileName: \"\", newFileTitle: \"\", newFileType: \"\"})\n    }\n\n    onFileDoubleClick(fileModel: FileModel & { path: string }) {\n        if (this.currentFileModel.id !== fileModel.id) {\n            this.loadClass(fileModel)\n        }\n    }\n\n    loadClass(fileModel: FileModel, saveCurrent: boolean = true) {\n        if (!fileModel.isDir && this.canvasPanel.current) {\n            if (saveCurrent)\n                this.currentFileModel.json = JSON.stringify(this.canvasPanel.current.saveProject())\n\n            if (fileModel.json) {\n                this.canvasPanel.current.loadProject(fileModel.json, (variableList: any) => {\n                    this.currentFileModel = fileModel\n                    this.resetState()\n                    this.setState({variableList})\n                    this.updateDirectoryItems()\n                    this.onDiagramChanged()\n                })\n            } else {\n                this.currentFileModel = fileModel\n                this.canvasPanel.current.newProject()\n                this.resetState()\n                this.updateDirectoryItems()\n                this.onDiagramChanged()\n            }\n        }\n    }\n\n    onCanvasDrop(type: FlowType, position: { x: number, y: number }) {\n        this.setState({\n            isModalOpen: true,\n            flowType: type,\n            flowPosition: position\n        })\n    }\n\n    onItemAdded(flow: BaseFlowNode) {\n        if (flow instanceof BaseVariableFlowNode) {\n            this.state.variableList.push((flow as BaseVariableFlowNode).getVariable())\n        }\n    }\n\n    // On item deleted\n    onEntityRemoved(event: BaseEvent<BaseModel>) {\n\n    }\n\n    // On item selected\n    onSelectionChanged(event: BaseEvent<BaseModel> & { isSelected: boolean }) {\n\n    }\n\n    onHeaderMenuClickListener = (item: string) => {\n        switch (item) {\n            case \"new\": {\n                if (!this.canvasPanel.current)\n                    return\n\n                this.canvasPanel.current.newProject()\n                this.resetState()\n                this.onDiagramChanged()\n                break\n            }\n            case \"save\": {\n                if (!this.canvasPanel.current)\n                    return\n\n                this.currentFileModel.json = JSON.stringify(this.canvasPanel.current.saveProject())\n                const saveContent = {\n                    rootFileModel: this.state.rootFileModel,\n                    projectName: this.project.projectName,\n                    currentFile: this.currentFileModel\n                }\n                FileUtils.save(`${this.project.projectName}.${Defaults.SAVE_EXTENSION}`, JSON.stringify(saveContent))\n                break\n            }\n            case \"load\": {\n                FileUtils.load((data: string) => {\n                    if (!this.canvasPanel.current)\n                        return\n\n                    try {\n                        const loadedData = JSON.parse(data) as { rootFileModel: FileModel, projectName: string, currentFile: FileModel }\n\n                        this.project = new Project(loadedData.projectName)\n                        this.loadClass(loadedData.currentFile)\n                    } catch (e) {\n                        console.error(e)\n                    }\n                }, (err: string) => {\n                    console.error(err)\n                })\n\n                break\n            }\n            default:\n                return\n        }\n    }\n\n    render() {\n        return (\n            <FlowProvider value={{variableList: this.state.variableList}}>\n                <ProjectProvider value={{project: this.state.rootFileModel}}>\n                    <div className={styles.App}>\n                        <Dialog\n                            open={this.state.isAddNewFileModalOpen}\n                            onClose={() => this.onAddNewFileDialogClose()}\n                            aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle id=\"form-dialog-title\">{this.state.newFileTitle}</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce a auctor dui. Nunc at\n                                    pellentesque purus. Aliquam leo massa, pellentesque.\n                                </DialogContentText>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"fileName\"\n                                    onChange={(e) => this.setState({newFileName: e.target.value})}\n                                    label={strings.projectName}\n                                    fullWidth\n                                />\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={() => this.onAddNewFileDialogClose()} color=\"primary\">\n                                    {strings.cancel}\n                                </Button>\n                                <Button onClick={() => this.onNewFileSave()} color=\"primary\">\n                                    {strings.create}\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <AddNodeDialog onSaveClick={this.onModalSaveClick.bind(this)}\n                                       onDismissClick={this.onModalDismissClick.bind(this)}\n                                       onClose={this.onModalClose.bind(this)}\n                                       aria-labelledby=\"simple-dialog-title\"\n                                       open={this.state.isModalOpen}\n                                       type={this.state.flowType}/>\n                        <EditorHeader onClickListener={(item: string) => this.onHeaderMenuClickListener(item)}/>\n                        <ReflexContainer orientation=\"vertical\">\n                            <ReflexElement minSize={250}>\n                                <ReflexContainer orientation=\"horizontal\" style={{height: \"100vh\"}}>\n                                    <ReflexElement className=\"left-pane\" flex={0.35} minSize={200}>\n                                        <div style={{width: \"100%\", height: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                                            <ProjectTreePanel\n                                                onDoubleClickListener={(fileModel) => this.onFileDoubleClick(fileModel)}\n                                                onNewClass={(path) => this.onNewClass(path)}\n                                                onNewDataClass={(path) => this.onNewDataClass(path)}\n                                                onNewFunctionality={(path) => this.onNewFunctionality(path)}\n                                                onNewPackage={(path) => this.onNewPackage(path)}/>\n                                        </div>\n                                    </ReflexElement>\n\n                                    <ReflexSplitter/>\n\n                                    <ReflexElement className=\"left-pane\" minSize={200}>\n                                        <ShapePanel>\n                                            {Object.values(FlowType).filter((value) => value !== FlowType.INITIAL)\n                                                .map((value) => (\n                                                    <ShapeItem key={value} model={{type: value}} name={value}/>\n                                                ))}\n                                        </ShapePanel>\n                                    </ReflexElement>\n                                </ReflexContainer>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement className=\"middle-pane\" flex={0.55} minSize={250}>\n                                <div className={styles.paneContent}>\n                                    <CanvasPanel ref={this.canvasPanel}\n                                                 onItemAdded={this.onItemAdded.bind(this)}\n                                                 onDiagramChanged={this.onDiagramChanged.bind(this)}\n                                                 onDrop={this.onCanvasDrop.bind(this)}\n                                                 onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                 onEntityRemoved={this.onEntityRemoved.bind(this)}/>\n                                </div>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement minSize={250}>\n                                <div style={{\n                                    display: \"flex\",\n                                    height: \"100%\",\n                                    width: \"100%\",\n                                    flexDirection: \"column\"\n                                }}>\n                                    <TextField\n                                        id=\"language-selector\"\n                                        select\n                                        value={this.state.selectedLanguage}\n                                        onChange={(event: any) => {\n                                            this.setState({selectedLanguage: event.target.value}, () => {\n                                                this.onDiagramChanged()\n                                            })\n                                        }}\n                                        className={styles.languageSelector}\n                                        margin=\"none\">\n                                        {this.programmingLanguages.map((key: any) => (\n                                            <MenuItem key={key} value={key}>\n                                                {ProgrammingLanguage[key]}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <div style={{\n                                        display: \"flex\",\n                                        flex: 1,\n                                        height: \"100%\",\n                                        width: \"100%\",\n                                        flexDirection: \"column\"\n                                    }}>\n\n                                        <CodePreviewPanel code={this.state.generatedCode}\n                                                          language={this.state.selectedLanguage}/>\n                                    </div>\n                                </div>\n                            </ReflexElement>\n                        </ReflexContainer>\n                    </div>\n                </ProjectProvider>\n            </FlowProvider>\n        )\n    }\n\n    private generateDirectoryItems(fileModel: FileModel, parent: Directory) {\n        if (fileModel.isDir) {\n            const directory = new Directory(fileModel.filename, [])\n            parent.addDirectoryItem(directory)\n            fileModel.children.forEach((item) => {\n                this.generateDirectoryItems(item, directory)\n            })\n        } else {\n            if (fileModel.isMainClass) {\n                if (this.currentFileModel.id === fileModel.id) {\n                    const flowModelList = FlowModelGenerator.generate(this.canvasPanel.current ? this.canvasPanel.current.initialNode : null)\n                    console.log(flowModelList)\n\n                    const clazz = new MainClazz(DirectoryItemType.MAIN_CLASS, fileModel.filename, flowModelList)\n\n                    this.currentClass = clazz\n                    parent.addDirectoryItem(clazz)\n                } else {\n                    parent.addDirectoryItem(new MainClazz(DirectoryItemType.MAIN_CLASS, fileModel.filename, []))\n                }\n            } else {\n                if (this.currentFileModel.id === fileModel.id) {\n                    const flowModelList = FlowModelGenerator.generate(this.canvasPanel.current ? this.canvasPanel.current.initialNode : null)\n                    console.log(flowModelList)\n\n                    const clazz = new Clazz(DirectoryItemType.CLASS, fileModel.filename, flowModelList)\n\n                    this.currentClass = clazz\n                    parent.addDirectoryItem(clazz)\n                } else {\n                    parent.addDirectoryItem(new Clazz(DirectoryItemType.CLASS, fileModel.filename, []))\n                }\n            }\n        }\n    }\n}\n","import React, {Component} from \"react\"\nimport styles from \"./Home.module.css\"\nimport {\n    Button,\n    Card,\n    CardContent,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField,\n    Typography\n} from \"@material-ui/core\"\nimport strings from \"../../lang\"\nimport {FileUtils} from \"../../utils\"\nimport {FileModel} from \"../../models/FileModel\"\nimport {Defaults} from \"../../config\"\n\nexport interface HomeProps {\n    onLoad: (data: { rootFileModel: FileModel, projectName: string, currentFile: FileModel }) => void\n}\n\nexport interface HomeState {\n    isNewProjectDialogOpen: boolean,\n    projectName: string\n}\n\nexport default class Home extends Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props)\n\n        this.state = {\n            isNewProjectDialogOpen: false,\n            projectName: \"\"\n        }\n    }\n\n    onLoadProjectClick = () => {\n        FileUtils.load((data: string) => {\n            try {\n                this.props.onLoad(JSON.parse(data) as { rootFileModel: FileModel, projectName: string, currentFile: FileModel })\n            } catch (e) {\n                console.error(e)\n            }\n        }, (err: string) => {\n            console.error(err)\n        })\n    }\n\n    onCreateNewProjectClick = () => {\n        const mainFileModel = new FileModel(this.state.projectName, \"\", false, true, [])\n        const srcModel = new FileModel(Defaults.ROOT_FOLDER_NAME, \"\", true, false, [mainFileModel])\n\n        const data = {\n            rootFileModel: srcModel,\n            currentFile: mainFileModel,\n            projectName: this.state.projectName\n        }\n        this.props.onLoad(data)\n    }\n\n    onNewProjectClick = () => {\n        this.setState({isNewProjectDialogOpen: true})\n    }\n\n    onNewProjectDialogClose = () => {\n        this.setState({isNewProjectDialogOpen: false})\n    }\n\n    render() {\n        return (\n            <div className={styles.homeApp}>\n                <Dialog\n                    open={this.state.isNewProjectDialogOpen}\n                    onClose={() => this.onNewProjectDialogClose()}\n                    aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">{strings.newProject}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce a auctor dui. Nunc at\n                            pellentesque purus. Aliquam leo massa, pellentesque.\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"projectName\"\n                            onChange={(e) => this.setState({projectName: e.target.value})}\n                            label={strings.projectName}\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => this.onNewProjectDialogClose()} color=\"primary\">\n                            {strings.cancel}\n                        </Button>\n                        <Button onClick={() => this.onCreateNewProjectClick()} color=\"primary\">\n                            {strings.createProject}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n                <Typography className={styles.homeLogoText}>Flowie</Typography>\n\n                <Card className={styles.homeContainer}>\n                    <CardContent style={{display: \"flex\", justifyContent: \"space-evenly\"}}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => this.onNewProjectClick()}>\n                            {strings.newProject}\n                        </Button>\n\n                        <Button variant=\"contained\" color=\"secondary\" onClick={() => this.onLoadProjectClick()}>\n                            {strings.loadProject}\n                        </Button>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n","import React, {Component} from \"react\"\nimport Editor from \"./Editor\"\nimport Home from \"./Home\"\nimport {FileModel} from \"../../models/FileModel\"\n\nexport interface HomePageProps {\n}\n\nexport interface HomePageState {\n    isLoaded: boolean,\n    data: { rootFileModel: FileModel, projectName: string, currentFile: FileModel }\n}\n\nexport default class HomePage extends Component<HomePageProps, HomePageState> {\n\n    constructor(props: HomePageProps) {\n        super(props)\n\n        const dummyFileModel = new FileModel(\"flowie\", \"\", false, false, [])\n\n        this.state = {\n            isLoaded: false,\n            data: {rootFileModel: dummyFileModel, projectName: \"Flowie\", currentFile: dummyFileModel}\n        }\n    }\n\n    render() {\n        return this.state.isLoaded ? (\n            <Editor project={this.state.data}/>\n        ) : (\n            <Home onLoad={(data) => this.setState({data, isLoaded: true})}/>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            )\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {Home} from \"./pages\"\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\nimport \"./index.css\"\nimport \"nberktumer-react-diagrams/dist/style.min.css\"\nimport \"react-reflex/styles.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render((\n    <Router basename=\"/Flowie\">\n        <div>\n            <Route path=\"/\" component={Home} exact/>\n        </div>\n    </Router>\n), document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tray\":\"ShapePanel_tray__V__6H\",\"trayItem\":\"ShapePanel_trayItem__3Ii5i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EditorHeader_container__29lgZ\",\"toolbar\":\"EditorHeader_toolbar__E_FZG\",\"clickable\":\"EditorHeader_clickable__TeGqN\"};"],"sourceRoot":""}