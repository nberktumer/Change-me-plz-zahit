{"version":3,"sources":["components/AddNodeDialog/AddNodeDialog.module.css","components/CanvasPanel/CanvasPanel.module.css","components/CanvasItems/Nodes/BaseFlow/BaseFlow.module.css","components/ShapePanel/ShapePanel.tsx","components/ShapePanel/ShapeItem.tsx","models/ProgrammingLanguage.tsx","models/VariableEnums.tsx","config/Defaults.tsx","config/NodeColors.tsx","config/Rules.tsx","components/CodePreviewPanel/CodePreviewPanel.tsx","components/ProjectTreePanel/ProjectTreePanel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLocation.tsx","lang/index.tsx","lang/en.tsx","lang/tr.tsx","utils/Random.tsx","utils/FileUtils.tsx","utils/SignConverter.ts","utils/Validator.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortLabel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortType.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPortModel.tsx","components/CanvasItems/Ports/DefaultPort/DefaultPort.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowNode.tsx","components/Flows/Base/BaseFlowNodeGenerator.tsx","models/Variable.tsx","components/CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode.tsx","components/Flows/Base/BaseVariableFlowNode.tsx","components/Flows/Input/InputFlowNode.tsx","components/Flows/Input/InputFlowNodeGenerator.tsx","models/Condition.tsx","components/Flows/While/WhileFlowNode.tsx","components/Flows/While/WhileFlowNodeGenerator.tsx","components/Flows/Output/OutputFlowNode.tsx","components/Flows/Output/OutputFlowNodeGenerator.tsx","components/Flows/Arithmetic/ArithmeticFlowNode.tsx","components/Flows/Arithmetic/ArithmeticFlowNodeGenerator.tsx","components/Flows/Assignment/AssignmentFlowNode.tsx","components/Flows/Assignment/AssignmentFlowNodeGenerator.tsx","components/Flows/Initial/InitialFlowNode.tsx","components/Flows/Initial/InitialFlowNodeGenerator.tsx","components/Flows/If/IfFlowNode.tsx","components/Flows/If/IfFlowNodeGenerator.tsx","components/Flows/Random/RandomFlowNode.tsx","components/Flows/Random/RandomFlowNodeGenerator.tsx","components/Flows/FlowNodeFactory.tsx","components/Flows/Base/BaseProperties.tsx","components/InputWithType/InputWithType.tsx","components/Flows/While/WhileProperties.tsx","components/Flows/Arithmetic/ArithmeticProperties.tsx","components/Flows/Assignment/AssignmentProperties.tsx","components/Flows/Input/InputProperties.tsx","components/Flows/Output/OutputProperties.tsx","components/Flows/If/IfProperties.tsx","components/Flows/Random/RandomProperties.tsx","components/Flows/FlowPropertiesFactory.tsx","components/Flows/Base/BaseFlowModelGenerator.tsx","generator/FlowModelJSON.tsx","generator/Func.tsx","generator/code/kotlin/KotlinCodeStrategy.tsx","generator/code/ProgrammingLanguageTypeConverter.tsx","generator/code/java/JavaCodeStrategy.tsx","generator/code/CodeStrategyFactory.tsx","generator/flows/ArithmeticFlow.tsx","generator/flows/AssignmentFlow.tsx","generator/flows/InputFlow.tsx","generator/flows/OutputFlow.tsx","generator/flows/InitialFlow.tsx","generator/code/Class.tsx","generator/flows/RandomFlow.tsx","generator/flows/IfFlow.tsx","generator/code/CodeWriter.tsx","generator/flows/WhileFlow.tsx","components/Flows/While/WhileFlowModelGenerator.tsx","components/Flows/Input/InputFlowModelGenerator.tsx","components/Flows/Output/OutputFlowModelGenerator.tsx","components/Flows/Arithmetic/ArithmeticFlowModelGenerator.tsx","components/Flows/Assignment/AssignmentFlowModelGenerator.tsx","components/Flows/Initial/InitialFlowModelGenerator.ts","components/Flows/If/IfFlowModelGenerator.tsx","components/Flows/Random/RandomFlowModelGenerator.tsx","components/Flows/FlowModelFactory.tsx","components/Flows/FlowModelGenerator.tsx","components/AddNodeDialog/AddNodeDialog.tsx","generator/CodeGenerator.tsx","components/CanvasItems/Ports/PortFactory.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowWidget.tsx","components/CanvasItems/Nodes/BaseFlow/BaseFlowFactory.tsx","components/CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowWidget.tsx","components/CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowFactory.tsx","components/CanvasPanel/CanvasPanel.tsx","components/EditorHeader/EditorHeader.tsx","pages/editor/Editor.tsx","serviceWorker.ts","index.tsx","pages/editor/Editor.module.css","components/ShapePanel/ShapePanel.module.css","components/EditorHeader/EditorHeader.module.css"],"names":["module","exports","addNodeDialogButtonContainer","addNodeDialogBody","diagramLayer","srdDemoCanvas","rectangleNode","rectangleNode--selected","rectangleNodeTitle","rectangleNodeInfo","fa","rectangleNodeName","rectangleNodePorts","rectangleNodeIn","rectangleNodeOut","ShapePanel","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react_default","a","createElement","className","styles","tray","children","Component","defaultProps","ProgrammingLanguage","VariableType","ArithmeticOperationType","FlowType","ConditionOperation","ConditionType","ShapeItem","_React$Component","_this2","style","borderColor","color","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","trayItem","name","React","Defaults","PROGRAMMING_LANGUAGE","KOTLIN","NodeColors","IF","WHILE","VARIABLE","ARITHMETIC","FOR","INITIAL","RANDOM","Rules","CodePreviewPanel","esm","handleWidth","handleHeight","refreshRate","refreshMode","render","_ref","width","height","backgroundColor","lib_default","mode","theme","fontSize","wrapEnabled","code","setOptions","dragEnabled","readOnly","highlightActiveLine","useWorker","language","undefined","ProjectTreePanel","rc_tree_es","selectable","defaultExpandAll","defaultExpandedKeys","title","DefaultPortLocation","strings","LocalizedStrings","en","in","out","loop","scope","true","false","ifStatement","variable","constant","constantValue","assignment","arithmetic","while","switch","dismiss","variableName","dataType","variableType","firstVariable","secondVariable","select","operation","recurse","initialFlow","firstOperator","secondOperator","input","output","file","save","load","new","fileReadError","variableExists","variableFirstCharacterError","variableContainsInvalidCharacters","conditionType","invalid","nextFlow","random","minValue","maxValue","tr","Random","replace","c","r","Math","toString","FileUtils","filename","data","blob","Blob","type","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","href","URL","createObjectURL","download","body","appendChild","click","removeChild","onLoad","onError","accept","onchange","e","target","files","reader","FileReader","onerror","onload","contents","result","readAsText","SignConverter","ADDITION","SUBTRACTION","MULTIPLICATION","DIVISION","ROOT","GREATER_THAN","GREATER_THAN_OR_EQUALS","LESS_THAN","LESS_THAN_OR_EQUALS","EQUALS","NOT_EQUALS","Validator","variableList","length","find","item","charAt","match","DefaultPortType","DefaultPortLabel","_BaseWidget","get","prototype","portType","location","LEFT","bem","port","react","main","node","getParent","label","getProps","BaseWidget","DefaultPortModel","_PortModel","arguments","id","onLinkChangedListener","targetPortChangedListener","link","entity","sourcePort","canLinkToPort","entityRemovedListener","getTargetPort","object","engine","_","createLinkModel","setSourcePort","setTargetPort","maximumLinks","Infinity","keys","getLinks","getMaximumLinks","getNode","OUT","IN","LOOP","SCOPE","TRUE_SCOPE","FALSE_SCOPE","listener","addListener","targetPortChanged","entityRemoved","DefaultLinkModel","PortModel","DefaultPort","BaseFlowNode","_NodeModel","flowType","nodeType","FlowNodeFactory","update","ports","portModel","addOnLinkChangedListener","UID","addPort","RIGHT","_len","Array","_key","_len2","_key2","links","values","getPortListByType","NodeModel","BaseFlowNodeGenerator","Variable","BaseInfoFlowNode","_BaseFlowNode","info","BaseVariableFlowNode","_BaseInfoFlowNode","BOOLEAN","updateNextFlowVariable","getNextFlow","currentFlow","oldVariable","newVariable","flowModelList","scopeId","map","flow","getID","getVariable","setVariable","getOperator1","setOperator1","getOperator2","setOperator2","OUTPUT","updateVariableInConditions","getScopeFlow","getTrueScopeFlow","getFalseScopeFlow","InputFlowNode","_BaseVariableFlowNode","withoutPorts","INPUT","addInPort","setMaximumLinks","addOutPort","updateInfo","InputFlowNodeGenerator","_BaseFlowNodeGenerato","apply","Condition","first","second","WhileFlowNode","conditionList","AND","condition","concat","booleanOperation","join","forEach","cond","addScopePort","push","filter","WhileFlowNodeGenerator","conditions","resultNode","removeAllConditions","setConditionType","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","conditionData","parse","addCondition","err","return","OutputFlowNode","OutputFlowNodeGenerator","ArithmeticFlowNode","operator1","operator2","arithmeticOperation","getOperation","setOperation","ArithmeticFlowNodeGenerator","op1","op2","AssignmentFlowNode","ASSIGNMENT","AssignmentFlowNodeGenerator","InitialFlowNode","addLoopPort","InitialFlowNodeGenerator","IfFlowNode","addTrueScopePort","addFalseScopePort","IfFlowNodeGenerator","RandomFlowNode","setMinValue","setMaxValue","RandomFlowNodeGenerator","console","log","DOUBLE","create","BaseProperties","_getPrototypeOf2","args","handleStringChange","callback","setState","defineProperty","onDataChanged","handleBooleanChange","checked","InputWithType","val","renderStringInput","display","flexDirection","alignItems","justifyContent","alignContent","textAlign","flex","index_es","isNull","onChange","margin","disabled","renderIntegerInput","renderBooleanInput","hide","STRING","INT","WhileProperties","_BaseProperties","renderConditionText","op2initialValue","isOp2Constant","expanded","padding","marginBottom","index","expandIcon","Add_default","onClick","stopPropagation","preventDefault","forceUpdate","DeleteForever_default","splice","indexOf","variables","InputWithType_InputWithType","control","ArithmeticProperties","AssignmentProperties","readonlyType","error","errorField","inputProps","maxLength","validateVariableName","errorMessage","InputProperties","OutputProperties","isConstant","initialValue","IfProperties","RandomProperties","FlowPropertiesFactory","WhileProperties_WhileProperties","bind","IfProperties_IfProperties","ArithmeticProperties_ArithmeticProperties","AssignmentProperties_AssignmentProperties","InputProperties_InputProperties","OutputProperties_OutputProperties","RandomProperties_RandomProperties","BaseFlowModelGenerator","FlowModel","assignmentFlowContent","inputFlowContent","outputFlowContent","arithmeticFlowContent","whileFlowContent","ifFlowContent","randomFlowContent","nextFlowId","Func","functionName","parameters","returnType","codeLines","Parameter","KotlinCodeStrategy","clazz","CodeWriter","getInstance","writeLineToMainFunction","scopeCount","func","returnTypeString","parameterString","writeLine","appendToLastLine","arithmeticFlow","content","functionLines","operationCode","operator1Code","operator2Code","writeFunction","variableSetCode","addVariable","functionInvocation","writeMainCodeFromFlow","assignmentFlow","contentString","inputFlow","scanCode","outputFlow","printString","whileFlow","nextScopeId","conditionCode","i","addToLoopStack","ifFlow","trueScopeId","falseScopeId","randomFlow","addGlobalVariable","addDependency","min","max","dependencies","globalVariables","add","writeLineToIndex","ProgrammingLanguageTypeConverter","programmingLanguage","convertedType","JAVA","JavaCodeStrategy","convert","variableTypeString","CodeStrategyFactory","ArithmeticFlow","functionCallName","flowIncrementalId","functionCode","TERMINATION_ID","ArithmeticFlowContent","AssignmentFlow","AssignmentFlowContent","InputFlow","InputFlowContent","OutputFlow","OutputFlowContent","InitialFlow","Class","RandomFlow","RandomFlowContent","IfFlow","IfFlowContent","flows","Map","codes","mainFunctionLineIndex","spacing","variableSet","Set","globalVariableSet","dependencySet","loopStack","Stack","codeStrategy","instance","clear","createCodeStrategy","generateMain","writeFunctionCodeFromFlow","finishClass","addDependenciesAndGlobalVariables","line","createSpacing","str","lastIndex","last","mainClass","initClass","initMain","INITIAL_ID","finishMain","writeFunctionSignature","removeFromStackIfTopEquals","writeArithmeticMain","writeAssignmentMain","writeInputMain","writeOutputMain","WhileFlow","writeWhileMain","writeIfMain","writeRandomMain","writeArithmeticFunction","writeAssignmentFunction","writeInputFunction","writeOutputFunction","writeWhileFunction","writeIfFunction","writeRandomFunction","has","dependency","globalVariable","top","pop","WhileFlowContent","WhileFlowModelGenerator","_BaseFlowModelGenerat","scopeFlow","scopeFlowId","InputFlowModelGenerator","OutputFlowModelGenerator","ArithmeticFlowModelGenerator","AssignmentFlowModelGenerator","InitialFlowModelGenerator","IfFlowModelGenerator","trueScopeFlow","trueScopeFlowId","falseScopeFlow","falseScopeFlowId","RandomFlowModelGenerator","FlowModelFactory","baseFlow","generate","FlowModelGenerator","generateFlowModel","flowModel","AddNodeDialog","bodyData","onSaveClick","onDismissClick","assign","aria-labelledby","onBodyChanged","Button_default","variant","onDismiss","onSave","CodeGenerator","flowModels","reset","init","convertToFlowObjects","baseFlowMap","set","PortFactory","_AbstractPortFactory","cb","initialConfig","AbstractPortFactory","BaseFlowWidget","DefaultPortLabel_DefaultPortLabel","background","getPortListByLocation","generatePort","BaseFlowFactory","_SRD$AbstractNodeFact","diagramEngine","BaseFlowWidget_BaseFlowWidget","SRD","BaseInfoFlowWidget","BaseInfoFlowFactory","BaseInfoFlowWidget_BaseInfoFlowWidget","CanvasPanel","activeModel","initialNode","newProject","DiagramEngine","installDefaultFactories","registerNodeFactory","registerPortFactory","DiagramModel","setDiagramModel","selectionChanged","onSelectionChanged","assertThisInitialized","onEntityRemoved","x","innerWidth","y","innerHeight","getDiagramModel","addNode","saveProject","diagram","serializeDiagram","canvasPanel","initialNodeId","loadProject","deSerializeDiagram","getNodes","onDiagramChanged","addItem","position","onItemAdded","onDrop","onDragOver","maxNumberPointsPerLink","allowLooseLinks","getData","includes","points","getRelativeMousePoint","EditorHeader","handleClick","onClickListener","anchorEl","handleFileMenu","currentTarget","handleClose","toolbar","container","clickable","aria-owns","Boolean","aria-haspopup","anchorOrigin","vertical","horizontal","transformOrigin","open","onClose","Editor","programmingLanguages","k","createRef","codeGenerator","resetState","isModalOpen","flowPosition","properties","selectedItem","selectedLanguage","onHeaderMenuClickListener","current","base64","generatedCode","onModalClose","newVariableList","selectedItems","diagramModel","getSelectedItems","isSelected","createReadonlyVariableType","updateNode","_this3","App","AddNodeDialog_AddNodeDialog","onModalSaveClick","onModalDismissClick","EditorHeader_EditorHeader","es","orientation","minSize","ProjectTreePanel_ProjectTreePanel","ShapePanel_ShapePanel","ShapeItem_ShapeItem","paneContent","CanvasPanel_CanvasPanel","ref","onCanvasDrop","propertiesPanel","languageSelector","CodePreviewPanel_CodePreviewPanel","hostname","ReactDOM","BrowserRouter","basename","Route","path","component","exact","getElementById","serviceWorker","ready","then","registration","unregister","underline"],"mappings":"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","file":"static/js/main.9f149f08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNodeDialogButtonContainer\":\"AddNodeDialog_addNodeDialogButtonContainer__2f1L-\",\"addNodeDialogBody\":\"AddNodeDialog_addNodeDialogBody__3_BNm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"diagramLayer\":\"CanvasPanel_diagramLayer__2SbYc\",\"srdDemoCanvas\":\"CanvasPanel_srdDemoCanvas__1KVkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rectangleNode\":\"BaseFlow_rectangleNode__36TI3\",\"rectangleNode--selected\":\"BaseFlow_rectangleNode--selected__26fNg\",\"rectangleNodeTitle\":\"BaseFlow_rectangleNodeTitle__2EYI0\",\"rectangleNodeInfo\":\"BaseFlow_rectangleNodeInfo__Kdpfm\",\"fa\":\"BaseFlow_fa__1Hpvy\",\"rectangleNodeName\":\"BaseFlow_rectangleNodeName__XgDmU\",\"rectangleNodePorts\":\"BaseFlow_rectangleNodePorts__6k9wc\",\"rectangleNodeIn\":\"BaseFlow_rectangleNodeIn__1bGbu\",\"rectangleNodeOut\":\"BaseFlow_rectangleNodeOut__3sE4V\"};","import React, {Component} from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface ShapePanelProps {\n}\n\nexport interface ShapePanelState {\n}\n\nexport class ShapePanel extends Component<ShapePanelProps, ShapePanelState> {\n    static defaultProps: ShapePanelProps = {}\n\n    constructor(props: ShapePanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return <div className={styles.tray}>{this.props.children}</div>\n    }\n}\n","import React from \"react\"\nimport styles from \"./ShapePanel.module.css\"\n\nexport interface IShapeItemProps {\n    model: any;\n    color?: string;\n    name: string;\n}\n\nexport interface IShapeItemState {\n}\n\nexport class ShapeItem extends React.Component<IShapeItemProps, IShapeItemState> {\n    constructor(props: IShapeItemProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div\n                style={{borderColor: this.props.color}}\n                draggable={true}\n                onDragStart={(event) => {\n                    event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model))\n                }}\n                className={styles.trayItem}>\n                {this.props.name}\n            </div>\n        )\n    }\n}\n","export enum ProgrammingLanguage {\n    JAVA,\n    KOTLIN/*,\n    TYPESCRIPT,\n    JAVASCRIPT,\n    SWIFT,\n    PHP,\n    C,\n    CPP,\n    CSHARP,\n    PYTHON,\n    LISP*/\n}\n","export enum VariableType {\n    INT = \"Int\",\n    STRING = \"String\",\n    BOOLEAN = \"Boolean\",\n    DOUBLE = \"Double\"\n}\n\nexport enum ArithmeticOperationType {\n    ADDITION = \"Addition\",\n    SUBTRACTION = \"Subtraction\",\n    MULTIPLICATION = \"Multiplication\",\n    DIVISION = \"Division\",\n    ROOT = \"Root\"\n}\n\nexport enum FlowType {\n    INITIAL = \"Initial\",\n    IF = \"If\",\n    WHILE = \"While\",\n    FOR = \"For\",\n    INPUT = \"Input\",\n    OUTPUT = \"Output\",\n    ARITHMETIC = \"Arithmetic\",\n    ASSIGNMENT = \"Assignment\",\n    RANDOM = \"Random\"\n}\n\nexport enum ConditionOperation {\n    EQUALS = \"Equals\",\n    NOT_EQUALS = \"NotEquals\",\n    GREATER_THAN = \"GreaterThan\",\n    GREATER_THAN_OR_EQUALS = \"GreaterThanOrEquals\",\n    LESS_THAN = \"LessThan\",\n    LESS_THAN_OR_EQUALS = \"LessThanOrEquals\",\n}\n\nexport enum ConditionType {\n    AND = \"&&\",\n    OR = \"||\"\n}\n","import {ProgrammingLanguage} from \"../models\"\n\nexport const Defaults = {\n    PROGRAMMING_LANGUAGE: ProgrammingLanguage.KOTLIN\n}\n","export const NodeColors = {\n    IF: \"rgb(0, 192, 255)\",\n    WHILE: \"rgb(192, 0, 255)\",\n    VARIABLE: \"rgb(255, 192, 0)\",\n    ARITHMETIC: \"rgb(192, 255, 0)\",\n    FOR: \"rgb(255, 0, 192)\",\n    INITIAL: \"rgb(0, 255, 192)\",\n    RANDOM: \"rgb(192, 255, 192)\"\n}\n","export const Rules = {\n    MAX_VAR_LENGTH: 30,\n}\n","import React, {Component} from \"react\"\nimport {Defaults} from \"../../config\"\nimport {ProgrammingLanguage} from \"../../models\"\nimport AceEditor from \"react-ace\"\nimport ReactResizeDetector from \"react-resize-detector\"\n\nimport \"brace/mode/java\"\nimport \"brace/mode/javascript\"\nimport \"brace/mode/typescript\"\nimport \"brace/theme/ambiance\"\nimport \"brace/theme/clouds_midnight\"\nimport \"brace/theme/dracula\"\nimport \"brace/theme/gruvbox\"\nimport \"brace/theme/idle_fingers\"\nimport \"brace/theme/kr_theme\"\nimport \"brace/theme/merbivore\"\nimport \"brace/theme/merbivore_soft\"\nimport \"brace/theme/tomorrow_night\"\nimport \"brace/theme/tomorrow_night_bright\"\nimport \"brace/theme/tomorrow_night_eighties\"\nimport \"brace/theme/twilight\"\nimport \"brace/theme/vibrant_ink\"\nimport \"brace/ext/beautify\"\nimport \"brace/ext/themelist\"\n\nexport interface ICodePreviewPanelProps {\n    language: ProgrammingLanguage,\n    code: string | undefined\n}\n\nexport interface ICodePreviewPanelState {\n}\n\nexport class CodePreviewPanel extends Component<ICodePreviewPanelProps, ICodePreviewPanelState> {\n    static defaultProps: ICodePreviewPanelProps = {\n        language: Defaults.PROGRAMMING_LANGUAGE,\n        code: undefined\n    }\n\n    constructor(props: ICodePreviewPanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <ReactResizeDetector\n                handleWidth\n                handleHeight\n                refreshRate={300}\n                refreshMode=\"throttle\"\n                render={({width, height}) =>\n                    <div style={{height: \"100%\", width: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                        <AceEditor\n                            mode=\"javascript\"\n                            theme=\"tomorrow_night\"\n                            name=\"blah2\"\n                            fontSize={14}\n                            height={(height - 40) + \"px\"}\n                            width={width + \"px\"}\n                            wrapEnabled\n                            value={this.props.code}\n                            setOptions={{\n                                dragEnabled: false,\n                                readOnly: true,\n                                highlightActiveLine: false,\n                                useWorker: false\n                            }}/>\n                    </div>\n                }/>\n        )\n\n    }\n}\n","import React, {Component} from \"react\"\nimport Tree, {TreeNode} from \"rc-tree\"\nimport \"rc-tree/assets/index.css\"\n\nexport interface IProjectTreePanelProps {\n}\n\nexport interface IProjectTreePanelState {\n}\n\nexport class ProjectTreePanel extends Component<IProjectTreePanelProps, IProjectTreePanelState> {\n    static defaultProps: IProjectTreePanelProps = {}\n\n    constructor(props: IProjectTreePanelProps) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{color: \"white\"}}>\n            <Tree\n                selectable={false}\n                defaultExpandAll={false}\n                defaultExpandedKeys={[\"p1\"]}>\n                <TreeNode title=\"parent 1\" key=\"p1\">\n                    <TreeNode key=\"p10\" title=\"leaf\"/>\n                    <TreeNode title=\"parent 1-1\" key=\"p11\">\n                        <TreeNode title=\"parent 2-1\" key=\"p21\">\n                            <TreeNode title=\"leaf\"/>\n                            <TreeNode title=\"leaf\"/>\n                        </TreeNode>\n                        <TreeNode key=\"p22\" title=\"leaf\"/>\n                    </TreeNode>\n                </TreeNode>\n            </Tree>\n        </div>\n    }\n}\n","export enum DefaultPortLocation {\n    LEFT,\n    RIGHT\n}\n","import eng from \"./en\"\nimport tur from \"./tr\"\nimport LocalizedStrings from \"react-localization\"\n\nconst strings = new LocalizedStrings({\n    en: eng,\n    tr: tur\n});\n\nexport default strings\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    constant: \"Constant\",\n    constantValue: \"Constant Value\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\",\n    file: \"File\",\n    save: \"Save\",\n    load: \"Load\",\n    new: \"New\",\n    fileReadError: \"Could not read file\",\n    variableExists: \"Variable name already exists!\",\n    variableFirstCharacterError: \"First character of the variable name must be an alphabetic character!\",\n    variableContainsInvalidCharacters: \"Variable name contains invalid characters!\",\n    conditionType: \"Condition Type\",\n    invalid: \"Invalid\",\n    nextFlow: \"Next Flow\",\n    random: \"Random\",\n    minValue: \"Minimum Value\",\n    maxValue: \"Maximum Value\"\n}\n","export default {\n    in: \"In\",\n    out: \"Out\",\n    loop: \"Loop\",\n    scope: \"Scope\",\n    true: \"True\",\n    false: \"False\",\n    ifStatement: \"If Statement\",\n    variable: \"Variable\",\n    constant: \"Constant\",\n    constantValue: \"Constant Value\",\n    assignment: \"Assignment\",\n    arithmetic: \"Arithmetic\",\n    while: \"While\",\n    switch: \"Switch\",\n    dismiss: \"Dismiss\",\n    variableName: \"Variable Name\",\n    dataType: \"Data Type\",\n    variableType: \"Variable Type\",\n    value: \"Value\",\n    firstVariable: \"First Variable\",\n    secondVariable: \"Second Variable\",\n    select: \"Select\",\n    operation: \"Operation\",\n    recurse: \"Recurse\",\n    initialFlow: \"Initial Flow\",\n    firstOperator: \"First Operator\",\n    secondOperator: \"Second Operator\",\n    input: \"Input\",\n    output: \"Output\",\n    file: \"File\",\n    save: \"Save\",\n    load: \"Load\",\n    new: \"New\",\n    fileReadError: \"Could not read file\",\n    variableExists: \"Variable name already exists!\",\n    variableFirstCharacterError: \"First character of the variable name must be an alphabetic character!\",\n    variableContainsInvalidCharacters: \"Variable name contains invalid characters!\",\n    conditionType: \"Condition Type\",\n    invalid: \"Invalid\",\n    nextFlow: \"Next Flow\",\n    random: \"Random\",\n    minValue: \"Minimum Value\",\n    maxValue: \"Maximum Value\"\n\n}\n","export class Random {\n    /**\n     * Generates a unique ID\n     * @returns {String}\n     */\n    static UID(): string {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0\n            const v = c === \"x\" ? r : (r & 0x3) | 0x8\n            return v.toString(16)\n        })\n    }\n}\n","import strings from \"../lang\"\n\nexport class FileUtils {\n\n    static save(filename: string, data: string) {\n        const blob = new Blob([data], {type: \"text/plain\"})\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveBlob(blob, filename)\n        } else {\n            const elem = window.document.createElement(\"a\")\n            elem.href = window.URL.createObjectURL(blob)\n            elem.download = filename\n            document.body.appendChild(elem)\n            elem.click()\n            document.body.removeChild(elem)\n        }\n    }\n\n    static load(onLoad: (data: string) => void, onError: (err: string) => void) {\n        const elem = window.document.createElement(\"input\")\n        elem.type = \"file\"\n        elem.accept = \".flwie\"\n        elem.onchange = (e: any) => {\n            if (!e.target.files) {\n                onError(strings.fileReadError)\n                return\n            }\n\n            const file = e.target.files[0]\n            if (!file) {\n                onError(strings.fileReadError)\n            }\n            const reader = new FileReader()\n            reader.onerror = () => {\n                onError(strings.fileReadError)\n            }\n            reader.onload = (e: any) => {\n                const contents = e.target.result\n                onLoad(contents)\n            }\n            reader.readAsText(file)\n        }\n        elem.click()\n    }\n}\n","import {ArithmeticOperationType} from \"../models\"\nimport {ConditionOperation} from \"../models/VariableEnums\"\n\nexport class SignConverter {\n\n    static arithmeticOperation(type: ArithmeticOperationType): string {\n        switch (type) {\n            case ArithmeticOperationType.ADDITION:\n                return \"+\"\n            case ArithmeticOperationType.SUBTRACTION:\n                return \"-\"\n            case ArithmeticOperationType.MULTIPLICATION:\n                return \"*\"\n            case ArithmeticOperationType.DIVISION:\n                return \"/\"\n            case ArithmeticOperationType.ROOT:\n                return \"root\"\n            default:\n                return \"UNKNOWN\"\n        }\n    }\n\n    static booleanOperation(type: ConditionOperation): string {\n        switch (type) {\n            case ConditionOperation.GREATER_THAN:\n                return \">\"\n            case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                return \">=\"\n            case ConditionOperation.LESS_THAN:\n                return \"<\"\n            case ConditionOperation.LESS_THAN_OR_EQUALS:\n                return \"<=\"\n            case ConditionOperation.EQUALS:\n                return \"==\"\n            case ConditionOperation.NOT_EQUALS:\n                return \"!=\"\n            default:\n                return \"UNKNOWN\"\n        }\n    }\n}\n","import {Variable} from \"../models/Variable\"\nimport strings from \"../lang\"\n\nexport class Validator {\n\n    static validateVariableName(variableName: string, variableList: Variable[]): string {\n        if (variableName.length === 0)\n            return \"\"\n\n        if (variableList.find((item) => item.name === variableName))\n            return strings.variableExists\n        else if (!variableName.charAt(0).match(/[a-z]/i))\n            return strings.variableFirstCharacterError\n        else if (!variableName.match(/^(?!-)(?!.*-)[A-Za-z0-9-_]+$/))\n            return strings.variableContainsInvalidCharacters\n\n        return \"\"\n    }\n}\n","import * as React from \"react\"\nimport {BaseWidget, BaseWidgetProps, PortWidget} from \"nberktumer-react-diagrams\"\nimport {DefaultPortModel} from \"./DefaultPortModel\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n    model: DefaultPortModel;\n}\n\nexport interface DefaultPortLabelState {\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n    constructor(props: DefaultPortLabelProps) {\n        super(\"srd-default-port\", props)\n    }\n\n    getClassName() {\n        return super.getClassName() + (this.props.model.portType.location === DefaultPortLocation.LEFT\n            ? this.bem(\"--in\") : this.bem(\"--out\"))\n    }\n\n    render() {\n        const port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name}/>\n        const label = <div className=\"name\">{this.props.model.label}</div>\n\n        return (\n            <div {...this.getProps()}>\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? port : label}\n                {this.props.model.portType.location === DefaultPortLocation.LEFT ? label : port}\n            </div>\n        )\n    }\n}\n","export enum DefaultPortType {\n    IN,\n    OUT,\n    LOOP,\n    SCOPE,\n    TRUE_SCOPE,\n    FALSE_SCOPE\n}\n","import * as _ from \"lodash\"\nimport {BaseEvent, DefaultLinkModel, DiagramEngine, LinkModel, PortModel} from \"nberktumer-react-diagrams\"\nimport {DefaultPort, DefaultPortType} from \"./index\"\n\nexport class DefaultPortModel extends PortModel {\n    portType: DefaultPort\n    label: string\n    onLinkChangedListener: () => void\n\n    constructor(portType: DefaultPort, name: string, label: string | null = null, id?: string) {\n        super(name, \"default\", id)\n        this.portType = portType\n        this.label = label || name\n        this.onLinkChangedListener = () => {\n        }\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.portType = object.portType\n        this.label = object.label\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            portType: this.portType,\n            label: this.label\n        })\n    }\n\n    link(port: PortModel): LinkModel {\n        const link = this.createLinkModel()\n        link.setSourcePort(this)\n        link.setTargetPort(port)\n        return link\n    }\n\n    getMaximumLinks(): number {\n        return !this.maximumLinks ? Infinity : this.maximumLinks\n    }\n\n    canLinkToPort(port: DefaultPortModel): boolean {\n        if (Object.keys(port.getLinks()).length > port.getMaximumLinks() || Object.keys(this.getLinks()).length > this.getMaximumLinks())\n            return false\n\n        // Do not connect ports that are in the same node\n        if (port.getNode() === this.getNode())\n            return false\n\n        return (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.OUT && port.portType.type === DefaultPortType.LOOP)\n            || (this.portType.type === DefaultPortType.SCOPE && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.TRUE_SCOPE && port.portType.type === DefaultPortType.IN)\n            || (this.portType.type === DefaultPortType.FALSE_SCOPE && port.portType.type === DefaultPortType.IN)\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n\n        _.forEach(this.getLinks(), (link: LinkModel) => {\n            link.addListener({\n                targetPortChanged: this.targetPortChangedListener,\n                entityRemoved: this.entityRemovedListener\n            })\n        })\n    }\n\n    createLinkModel(): LinkModel {\n        const link = new DefaultLinkModel()\n        link.addListener({\n            targetPortChanged: this.targetPortChangedListener,\n            entityRemoved: this.entityRemovedListener\n        })\n        return link\n    }\n\n    private targetPortChangedListener = (event: BaseEvent<LinkModel> & { port: PortModel | null }) => {\n        const link = event.entity as DefaultLinkModel\n        if (!event.port != null && event.port instanceof DefaultPortModel && link.sourcePort != null && link.sourcePort.canLinkToPort(event.port)) {\n            (event.port as DefaultPortModel).onLinkChangedListener()\n        }\n    }\n\n    private entityRemovedListener = (event: BaseEvent<LinkModel> & { port: PortModel | null }) => {\n        const link = event.entity as DefaultLinkModel\n        if (link.getTargetPort() != null)\n            (link.getTargetPort() as DefaultPortModel).onLinkChangedListener()\n    }\n}\n","import {DefaultPortType} from \"./DefaultPortType\"\nimport {DefaultPortLocation} from \"./DefaultPortLocation\"\n\nexport class DefaultPort {\n    type: DefaultPortType\n    location: DefaultPortLocation\n\n    constructor(type: DefaultPortType, location: DefaultPortLocation) {\n        this.type = type\n        this.location = location\n    }\n}\n","import {DiagramEngine, NodeModel, PortModel} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Random} from \"../../../../utils\"\nimport {DefaultPort, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../../Ports/DefaultPort\"\nimport {FlowType} from \"../../../../models\"\nimport {BasePropertiesState} from \"../../../Flows/Base/BaseProperties\"\nimport {FlowNodeFactory} from \"../../../Flows\"\n\nexport class BaseFlowNode extends NodeModel {\n    name: string\n    color: string\n    onLinkChangedListener: () => void\n    flowType: FlowType | undefined\n\n    constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\", nodeType: string = \"base-flow\") {\n        super(nodeType)\n        this.name = name\n        this.color = color\n        this.onLinkChangedListener = () => {\n        }\n        this.flowType = flowType\n    }\n\n    updateNode(data: BasePropertiesState) {\n        FlowNodeFactory.update(this, data)\n    }\n\n    addOnLinkChangedListener(listener: () => void) {\n        this.onLinkChangedListener = listener\n\n        _.map(this.ports, (portModel: DefaultPortModel) => {\n            portModel.addOnLinkChangedListener(listener)\n        })\n    }\n\n    addInPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addOutPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.OUT, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addLoopPort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.LOOP, DefaultPortLocation.LEFT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addTrueScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.TRUE_SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    addFalseScopePort(label: string): DefaultPortModel {\n        const port = new DefaultPortModel(new DefaultPort(DefaultPortType.FALSE_SCOPE, DefaultPortLocation.RIGHT), Random.UID(), label)\n        port.addOnLinkChangedListener(this.onLinkChangedListener)\n        return this.addPort(port)\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.flowType = object.flowType\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            flowType: this.flowType\n        })\n    }\n\n    getPortListByType(...type: DefaultPortType[]): PortModel[] {\n        return _.filter(this.ports, (portModel: any) => {\n            return _.includes(type, portModel.portType.type)\n        })\n    }\n\n    getPortListByLocation(...location: DefaultPortLocation[]): PortModel[] {\n        return _.filter(this.ports, (portModel: any) => {\n            return _.includes(location, portModel.portType.location)\n        })\n    }\n\n    getNextFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.OUT)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"./BaseProperties\"\n\nexport abstract class BaseFlowNodeGenerator {\n    abstract create(data?: BasePropertiesState, node?: BaseFlowNode): BaseFlowNode | null\n}\n","import {VariableType} from \"./VariableEnums\";\n\nexport class Variable {\n\n    name: string | undefined\n    type: VariableType\n    value: any\n\n    constructor(name: string | undefined,\n                type: VariableType,\n                value: any) {\n        this.name = name\n        this.type = type\n        this.value = value\n    }\n\n}\n","import {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {BaseFlowNode} from \"../BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../../models\"\n\nexport abstract class BaseInfoFlowNode extends BaseFlowNode {\n    info: string | undefined\n\n    constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n        super(flowType, name, color, \"base-info-flow\")\n        this.info = \"\"\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.info = object.info\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            info: this.info\n        })\n    }\n\n    abstract updateInfo(): void\n}\n","import {Variable} from \"../../../models/Variable\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport {FlowType, VariableType} from \"../../../models\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {WhileFlowNode} from \"../While/WhileFlowNode\"\nimport {ArithmeticFlowNode} from \"../Arithmetic/ArithmeticFlowNode\"\nimport {InputFlowNode} from \"../Input/InputFlowNode\"\nimport {IfFlowNode} from \"../If/IfFlowNode\"\n\nexport abstract class BaseVariableFlowNode extends BaseInfoFlowNode {\n    private variable: Variable\n\n    protected constructor(flowType?: FlowType, name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n        super(flowType, name, color)\n\n        this.variable = new Variable(\"\", VariableType.BOOLEAN, \"\")\n    }\n\n    getVariable(): Variable {\n        return this.variable\n    }\n\n    setVariable(variable: Variable) {\n        if (this.variable.name && variable.name && variable.name !== this.variable.name) {\n            this.updateNextFlowVariable(this.getNextFlow(), this.variable, variable, [])\n        }\n\n        this.variable = variable\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n\n    updateNextFlowVariable(currentFlow: BaseFlowNode | null, oldVariable: Variable, newVariable: Variable, flowModelList: FlowModel[], scopeId: string | null = null) {\n        if (!currentFlow)\n            return\n\n        // Check if the node has been visited before\n        if (_.includes(flowModelList.map((flow) => flow.id), currentFlow.getID()))\n            return\n\n        switch (currentFlow.flowType) {\n            case FlowType.ARITHMETIC: {\n                const node = currentFlow as ArithmeticFlowNode\n\n                if (node.getVariable().name === oldVariable.name) {\n                    node.setVariable(newVariable)\n                }\n                if (node.getOperator1().name === oldVariable.name) {\n                    node.setOperator1(newVariable)\n                }\n                if (node.getOperator2().name === oldVariable.name) {\n                    node.setOperator2(newVariable)\n                }\n                break\n            }\n            case FlowType.OUTPUT: {\n                const node = currentFlow as InputFlowNode\n\n                if (node.getVariable().name === oldVariable.name) {\n                    node.setVariable(newVariable)\n                }\n                break\n            }\n            case FlowType.WHILE: {\n                const node = currentFlow as WhileFlowNode\n                node.updateVariableInConditions(oldVariable, newVariable)\n                this.updateNextFlowVariable((currentFlow as WhileFlowNode).getScopeFlow(), oldVariable, newVariable, flowModelList, currentFlow.getID())\n                break\n            }\n            case FlowType.IF: {\n                const node = currentFlow as IfFlowNode\n                node.updateVariableInConditions(oldVariable, newVariable)\n                this.updateNextFlowVariable((currentFlow as IfFlowNode).getTrueScopeFlow(), oldVariable, newVariable, flowModelList, currentFlow.getID())\n                this.updateNextFlowVariable((currentFlow as IfFlowNode).getFalseScopeFlow(), oldVariable, newVariable, flowModelList, currentFlow.getID())\n                break\n            }\n        }\n\n        this.updateNextFlowVariable(currentFlow.getNextFlow(), oldVariable, newVariable, flowModelList, scopeId)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class InputFlowNode extends BaseVariableFlowNode {\n    constructor(variable: Variable, withoutPorts: boolean = false) {\n        super(FlowType.INPUT, strings.input, NodeColors.IF)\n\n        this.setVariable(variable)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.updateInfo()\n    }\n\n    updateInfo(): void {\n        this.info = this.getVariable().name\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {InputFlowNode} from \"./InputFlowNode\"\n\nexport class InputFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: InputFlowNode): BaseFlowNode | null {\n        if (!data || data.variableName === \"\" || data.variableType === \"\")\n            return null\n\n        const variable = new Variable(data.variableName, data.variableType, null)\n\n        if (node !== undefined) {\n            node.setVariable(variable)\n            return node\n        } else {\n            return new InputFlowNode(variable)\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new InputFlowNode(node.variable, true)\n    }\n\n}\n","import {ConditionOperation, VariableType} from \"./VariableEnums\"\nimport {Variable} from \"./Variable\"\nimport {Random} from \"../utils\"\n\nexport class Condition {\n    id: string = Random.UID()\n    variableType: VariableType\n    first: Variable\n    second: Variable | undefined\n    operation: ConditionOperation\n\n    constructor(\n        variableType: VariableType,\n        first: Variable,\n        second: Variable | undefined,\n        operation: ConditionOperation\n    ) {\n        this.variableType = variableType\n        this.first = first\n        this.second = second\n        this.operation = operation\n    }\n\n}\n\n","import {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Condition} from \"../../../models/Condition\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {DefaultPortType} from \"../../CanvasItems/Ports/DefaultPort\"\nimport {FlowType} from \"../../../models\"\nimport {Variable} from \"../../../models/Variable\"\nimport {SignConverter} from \"../../../utils\"\nimport {ConditionType} from \"../../../models/VariableEnums\"\n\nexport class WhileFlowNode extends BaseInfoFlowNode {\n    conditionList: Condition[] = []\n    conditionType: ConditionType = ConditionType.AND\n\n    constructor(withoutPorts: boolean = false) {\n        super(FlowType.WHILE, strings.while, NodeColors.WHILE)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n            this.addScopePort(strings.scope).setMaximumLinks(1)\n        }\n    }\n\n    updateInfo = () => {\n        this.info = this.conditionList.map((condition) => {\n            return `${condition.first.name} ${SignConverter.booleanOperation(condition.operation)} ${condition.second ? (condition.second.name ? condition.second.name : condition.second.value) : \"\"}`\n        }).join(` ${this.conditionType} `)\n    }\n\n    setConditionType(conditionType: ConditionType) {\n        this.conditionType = conditionType\n        this.updateInfo()\n    }\n\n    getConditionType(): ConditionType {\n        return this.conditionType\n    }\n\n    addCondition(condition: Condition) {\n        this.conditionList.push(condition)\n        this.updateInfo()\n    }\n\n    removeAllConditions() {\n        this.conditionList = []\n        this.updateInfo()\n    }\n\n    removeCondition(condition: Condition) {\n        this.conditionList = this.conditionList.filter((cond) => cond !== condition)\n        this.updateInfo()\n    }\n\n    updateVariableInConditions = (oldVariable: Variable, newVariable: Variable) => {\n        this.conditionList.forEach((cond) => {\n            if (cond.first.name === oldVariable.name) {\n                cond.first = newVariable\n            }\n            if (cond.second && cond.second.name && cond.second.name === oldVariable.name) {\n                cond.second = newVariable\n            }\n        })\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.conditionList = object.conditionList\n        this.conditionType = object.conditionType\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            conditionList: this.conditionList,\n            conditionType: this.conditionType\n        })\n    }\n\n    getScopeFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Condition} from \"../../../models/Condition\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\n\nexport class WhileFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: WhileFlowNode): BaseFlowNode | null {\n        if (!data || !data.conditions || !data.conditionType)\n            return null\n\n        const resultNode = node ? node : new WhileFlowNode()\n        resultNode.removeAllConditions()\n        resultNode.setConditionType(data.conditionType)\n\n        for (const conditionData of data.conditions) {\n\n            if (!conditionData.variableType || !conditionData.first || !conditionData.second || !conditionData.operation)\n                continue\n\n            const condition = new Condition(conditionData.variableType, JSON.parse(conditionData.first), JSON.parse(conditionData.second), conditionData.operation)\n\n            if (!condition.second || (!condition.second.name && !condition.second.value))\n                return null\n\n            resultNode.addCondition(condition)\n        }\n\n        return resultNode\n    }\n\n    load(node: any): BaseFlowNode {\n        return new WhileFlowNode(true)\n    }\n}\n","import {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {Variable} from \"../../../models/Variable\"\nimport {FlowType} from \"../../../models\"\n\nexport class OutputFlowNode extends BaseInfoFlowNode {\n    private variable: Variable\n\n    constructor(variable: Variable, withoutPorts: boolean = false) {\n        super(FlowType.OUTPUT, strings.output, NodeColors.IF)\n\n        this.variable = variable\n        this.setVariable(variable)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    getVariable() {\n        return this.variable\n    }\n\n    setVariable(variable: Variable) {\n        this.variable = variable\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable\n        })\n    }\n\n    updateInfo(): void {\n        this.info = this.getVariable().name ? this.getVariable().name : this.getVariable().value\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\n\nexport class OutputFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: OutputFlowNode): BaseFlowNode | null {\n        if (!data || data.variable === \"\")\n            return null\n\n        if (node !== undefined) {\n            node.setVariable(JSON.parse(data.variable))\n            return node\n        } else {\n            return new OutputFlowNode(JSON.parse(data.variable))\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new OutputFlowNode(node.variable, true)\n    }\n}\n","import {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ArithmeticOperationType, FlowType} from \"../../../models\"\nimport * as _ from \"lodash\"\nimport {SignConverter} from \"../../../utils\"\n\nexport class ArithmeticFlowNode extends BaseInfoFlowNode {\n    private variable: Variable\n    private operation: ArithmeticOperationType\n    private operator1: Variable\n    private operator2: Variable\n\n    constructor(variable: Variable, operation: ArithmeticOperationType, operator1: Variable, operator2: Variable, withoutPorts: boolean = false) {\n        super(FlowType.ARITHMETIC, strings.arithmetic, NodeColors.ARITHMETIC)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n\n        this.setVariable(variable)\n        this.setOperation(operation)\n        this.setOperator1(operator1)\n        this.setOperator2(operator2)\n    }\n\n    updateInfo = () => {\n        this.info = `${this.getVariable().name} = ${this.getOperator1().name} ${SignConverter.arithmeticOperation(this.getOperation())} \n        ${!this.getOperator2().name ? this.getOperator2().value : this.getOperator2().name}`\n    }\n\n    getVariable(): Variable {\n        return this.variable\n    }\n\n    setVariable(value: Variable) {\n        this.variable = value\n        this.updateInfo()\n    }\n\n    getOperation(): ArithmeticOperationType {\n        return this.operation\n    }\n\n    setOperation(value: ArithmeticOperationType) {\n        this.operation = value\n        this.updateInfo()\n    }\n\n    getOperator1(): Variable {\n        return this.operator1\n    }\n\n    setOperator1(value: Variable) {\n        this.operator1 = value\n        this.updateInfo()\n    }\n\n    getOperator2(): Variable {\n        return this.operator2\n    }\n\n    setOperator2(value: Variable) {\n        this.operator2 = value\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.variable = object.variable\n        this.operation = object.operation\n        this.operator1 = object.operator1\n        this.operator2 = object.operator2\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            variable: this.variable,\n            operation: this.operation,\n            operator1: this.operator1,\n            operator2: this.operator2\n        })\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport {Variable} from \"../../../models/Variable\"\n\nexport class ArithmeticFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: ArithmeticFlowNode): BaseFlowNode | null {\n        if (!data || data.variable === \"\" || data.operation === \"\" || data.operator1 === \"\" || data.operator2 === \"\")\n            return null\n\n        const op1 = JSON.parse(data.operator1) as Variable\n        const op2 = JSON.parse(data.operator2) as Variable\n\n        if (node !== undefined) {\n            node.setVariable(JSON.parse(data.variable))\n            node.setOperation(data.operation)\n            node.setOperator1(op1)\n            node.setOperator2(op2)\n            return node\n        } else {\n            return new ArithmeticFlowNode(\n                JSON.parse(data.variable),\n                data.operation,\n                op1,\n                op2\n            )\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new ArithmeticFlowNode(node.variable, node.operation, node.operator1, node.operator2, true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class AssignmentFlowNode extends BaseVariableFlowNode {\n\n    constructor(variable: Variable, withoutPorts: boolean = false) {\n        super(FlowType.ASSIGNMENT, strings.variable + \" (\" + variable.type + \")\", NodeColors.VARIABLE)\n\n        this.setVariable(variable)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.updateInfo()\n    }\n\n    updateInfo(): void {\n        this.info = `${this.getVariable().name} = ${this.getVariable().value}`\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\n\nexport class AssignmentFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: AssignmentFlowNode): BaseFlowNode | null {\n        if (!data || data.variableName === \"\" || data.variableType === \"\" || data.value === \"\")\n            return null\n\n        const variable = new Variable(data.variableName, data.variableType, data.value)\n\n        if (node) {\n            node.setVariable(variable)\n            return node\n        } else {\n            return new AssignmentFlowNode(variable)\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new AssignmentFlowNode(node.variable, true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\n\nexport class InitialFlowNode extends BaseFlowNode {\n\n    constructor(withoutPorts: boolean = false) {\n        super(FlowType.INITIAL, strings.initialFlow, NodeColors.INITIAL)\n\n        if (!withoutPorts) {\n            this.addLoopPort(strings.recurse).setMaximumLinks(Infinity)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    // Prevent removing this item\n    remove(): void {\n        return\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {InitialFlowNode} from \"./InitialFlowNode\"\n\nexport class InitialFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: InitialFlowNode): BaseFlowNode | null {\n        return new InitialFlowNode()\n    }\n\n    load(node: InitialFlowNode): BaseFlowNode {\n       return new InitialFlowNode(true)\n    }\n}\n","import {BaseInfoFlowNode} from \"../../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\nimport strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {FlowType} from \"../../../models\"\nimport {Condition} from \"../../../models/Condition\"\nimport {ConditionType} from \"../../../models/VariableEnums\"\nimport {SignConverter} from \"../../../utils\"\nimport {Variable} from \"../../../models/Variable\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {DefaultPortType} from \"../../CanvasItems/Ports/DefaultPort\"\n\nexport class IfFlowNode extends BaseInfoFlowNode {\n    conditionList: Condition[] = []\n    conditionType: ConditionType = ConditionType.AND\n\n    constructor(withoutPorts: boolean = false) {\n        super(FlowType.IF, strings.ifStatement, NodeColors.IF)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(Infinity)\n            this.addOutPort(strings.nextFlow).setMaximumLinks(1)\n            this.addTrueScopePort(strings.true).setMaximumLinks(1)\n            this.addFalseScopePort(strings.false).setMaximumLinks(1)\n        }\n    }\n\n    updateInfo = () => {\n        this.info = this.conditionList.map((condition) => {\n            return `${condition.first.name} ${SignConverter.booleanOperation(condition.operation)} ${condition.second ? (condition.second.name ? condition.second.name : condition.second.value) : \"\"}`\n        }).join(` ${this.conditionType} `)\n    }\n\n    setConditionType(conditionType: ConditionType) {\n        this.conditionType = conditionType\n        this.updateInfo()\n    }\n\n    getConditionType(): ConditionType {\n        return this.conditionType\n    }\n\n    addCondition(condition: Condition) {\n        this.conditionList.push(condition)\n        this.updateInfo()\n    }\n\n    removeAllConditions() {\n        this.conditionList = []\n        this.updateInfo()\n    }\n\n    removeCondition(condition: Condition) {\n        this.conditionList = this.conditionList.filter((cond) => cond !== condition)\n        this.updateInfo()\n    }\n\n    updateVariableInConditions = (oldVariable: Variable, newVariable: Variable) => {\n        this.conditionList.forEach((cond) => {\n            if (cond.first.name === oldVariable.name) {\n                cond.first = newVariable\n            }\n            if (cond.second && cond.second.name && cond.second.name === oldVariable.name) {\n                cond.second = newVariable\n            }\n        })\n        this.updateInfo()\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.conditionList = object.conditionList\n        this.conditionType = object.conditionType\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            conditionList: this.conditionList,\n            conditionType: this.conditionType\n        })\n    }\n\n    getTrueScopeFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.TRUE_SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n\n    getFalseScopeFlow(): BaseFlowNode | null {\n        const links = Object.values(this.getPortListByType(DefaultPortType.FALSE_SCOPE)[0].getLinks())\n\n        if (links.length > 0) {\n            return links[0].getTargetPort().getNode() as BaseFlowNode\n        } else {\n            return null\n        }\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Condition} from \"../../../models/Condition\"\nimport {IfFlowNode} from \"./IfFlowNode\"\n\nexport class IfFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: IfFlowNode): BaseFlowNode | null {\n        if (!data || !data.conditions || !data.conditionType)\n            return null\n\n        const resultNode = node ? node : new IfFlowNode()\n        resultNode.removeAllConditions()\n        resultNode.setConditionType(data.conditionType)\n\n        for (const conditionData of data.conditions) {\n\n            if (!conditionData.variableType || !conditionData.first || !conditionData.second || !conditionData.operation)\n                continue\n\n            const condition = new Condition(conditionData.variableType, JSON.parse(conditionData.first), JSON.parse(conditionData.second), conditionData.operation)\n\n            if (!condition.second || (!condition.second.name && !condition.second.value))\n                return null\n\n            resultNode.addCondition(condition)\n        }\n\n        return resultNode\n    }\n\n    load(node: any): BaseFlowNode {\n        return new IfFlowNode(true)\n    }\n}\n","import strings from \"../../../lang\"\nimport {NodeColors} from \"../../../config\"\nimport {Variable} from \"../../../models/Variable\"\nimport {BaseVariableFlowNode} from \"../Base/BaseVariableFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {DiagramEngine} from \"nberktumer-react-diagrams\"\nimport * as _ from \"lodash\"\n\nexport class RandomFlowNode extends BaseVariableFlowNode {\n    minValue: number = 0\n    maxValue: number = 1\n\n    constructor(variable: Variable, minValue: number, maxValue: number, withoutPorts: boolean = false) {\n        super(FlowType.RANDOM, strings.variable + \" (\" + strings.random + \")\", NodeColors.RANDOM)\n\n        this.setVariable(variable)\n        this.setMinValue(minValue)\n        this.setMaxValue(maxValue)\n\n        if (!withoutPorts) {\n            this.addInPort(strings.in).setMaximumLinks(1)\n            this.addOutPort(strings.out).setMaximumLinks(1)\n        }\n    }\n\n    deSerialize(object: any, engine: DiagramEngine) {\n        super.deSerialize(object, engine)\n        this.minValue = object.minValue\n        this.maxValue = object.maxValue\n    }\n\n    serialize() {\n        return _.merge(super.serialize(), {\n            minValue: this.minValue,\n            maxValue: this.maxValue\n        })\n    }\n\n    setVariable(variable: Variable) {\n        super.setVariable(variable)\n        this.updateInfo()\n    }\n\n    setMinValue(value: number) {\n        if (value > this.maxValue)\n            return\n\n        this.minValue = value\n        this.updateInfo()\n    }\n\n    setMaxValue(value: number) {\n        this.maxValue = value\n        this.updateInfo()\n    }\n\n    updateInfo(): void {\n        this.info = `${this.minValue} <= ${this.getVariable().name} <= ${this.maxValue}`\n    }\n}\n","import {BaseFlowNodeGenerator} from \"../Base/BaseFlowNodeGenerator\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BasePropertiesState} from \"../Base/BaseProperties\"\nimport {Variable} from \"../../../models/Variable\"\nimport {RandomFlowNode} from \"./RandomFlowNode\"\nimport {VariableType} from \"../../../models\"\n\nexport class RandomFlowNodeGenerator extends BaseFlowNodeGenerator {\n    create(data?: BasePropertiesState, node?: RandomFlowNode): BaseFlowNode | null {\n        console.log(data)\n        if (!data || data.variableName === \"\" || data.minValue === \"\" || data.maxValue === \"\" || data.minValue > data.maxValue)\n            return null\n        console.log(data)\n\n        const variable = new Variable(data.variableName, VariableType.DOUBLE, undefined)\n\n        if (node) {\n            node.setVariable(variable)\n            node.setMinValue(data.minValue)\n            node.setMaxValue(data.maxValue)\n            return node\n        } else {\n            return new RandomFlowNode(variable, data.minValue, data.maxValue)\n        }\n    }\n\n    load(node: any): BaseFlowNode {\n        return new RandomFlowNode(node.variable, 0, 1, true)\n    }\n}\n","import {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../models\"\nimport {BasePropertiesState} from \"./Base/BaseProperties\"\nimport {InputFlowNodeGenerator} from \"./Input/InputFlowNodeGenerator\"\nimport {WhileFlowNodeGenerator} from \"./While/WhileFlowNodeGenerator\"\nimport {OutputFlowNodeGenerator} from \"./Output/OutputFlowNodeGenerator\"\nimport {ArithmeticFlowNodeGenerator} from \"./Arithmetic/ArithmeticFlowNodeGenerator\"\nimport {AssignmentFlowNodeGenerator} from \"./Assignment/AssignmentFlowNodeGenerator\"\nimport {InitialFlowNodeGenerator} from \"./Initial/InitialFlowNodeGenerator\"\nimport {InputFlowNode} from \"./Input/InputFlowNode\"\nimport {InitialFlowNode} from \"./Initial/InitialFlowNode\"\nimport {WhileFlowNode} from \"./While/WhileFlowNode\"\nimport {AssignmentFlowNode} from \"./Assignment/AssignmentFlowNode\"\nimport {ArithmeticFlowNode} from \"./Arithmetic/ArithmeticFlowNode\"\nimport {OutputFlowNode} from \"./Output/OutputFlowNode\"\nimport {IfFlowNodeGenerator} from \"./If/IfFlowNodeGenerator\"\nimport {IfFlowNode} from \"./If/IfFlowNode\"\nimport {RandomFlowNodeGenerator} from \"./Random/RandomFlowNodeGenerator\"\nimport {RandomFlowNode} from \"./Random/RandomFlowNode\"\n\nexport class FlowNodeFactory {\n    private constructor() {\n    }\n\n    static create(type: FlowType, data?: BasePropertiesState): BaseFlowNode | null {\n        switch (type) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().create(data)\n            case FlowType.IF:\n                return new IfFlowNodeGenerator().create(data)\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().create(data)\n            case FlowType.FOR:\n                return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().create(data)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().create(data)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().create(data)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().create(data)\n            case FlowType.RANDOM:\n                return new RandomFlowNodeGenerator().create(data)\n            default:\n                return null\n        }\n    }\n\n    static load(node: any): BaseFlowNode {\n        switch (node.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().load(node)\n            case FlowType.IF:\n                return new IfFlowNodeGenerator().load(node)\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().load(node)\n            // case FlowType.FOR:\n            //     return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().load(node)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().load(node)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().load(node)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().load(node)\n            case FlowType.RANDOM:\n                return new RandomFlowNodeGenerator().load(node)\n            default:\n                return new BaseFlowNode()\n        }\n    }\n\n    static update(node: BaseFlowNode, data?: BasePropertiesState): BaseFlowNode | null {\n        switch (node.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowNodeGenerator().create(data, node as InitialFlowNode)\n            case FlowType.IF:\n                return new IfFlowNodeGenerator().create(data, node as IfFlowNode)\n            case FlowType.WHILE:\n                return new WhileFlowNodeGenerator().create(data, node as WhileFlowNode)\n            case FlowType.FOR:\n                return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowNodeGenerator().create(data, node as InputFlowNode)\n            case FlowType.OUTPUT:\n                return new OutputFlowNodeGenerator().create(data, node as OutputFlowNode)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowNodeGenerator().create(data, node as ArithmeticFlowNode)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowNodeGenerator().create(data, node as AssignmentFlowNode)\n            case FlowType.RANDOM:\n                return new RandomFlowNodeGenerator().create(data, node as RandomFlowNode)\n            case FlowType.RANDOM:\n                return new RandomFlowNodeGenerator().create(data, node as RandomFlowNode)\n            default:\n                return null\n        }\n    }\n}\n","import React, {Component} from \"react\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {Variable} from \"../../../models/Variable\"\n\nexport interface BasePropertiesProps {\n    onDataChanged: (data: BasePropertiesState) => void,\n    variables: Variable[],\n    errorMessage?: string,\n    errorField?: string,\n    node?: BaseFlowNode\n}\n\nexport interface BasePropertiesState {\n    [index: string]: any\n}\n\nexport abstract class BaseProperties<T extends BasePropertiesProps = BasePropertiesProps, U extends BasePropertiesState = BasePropertiesState> extends Component<T, U> {\n\n    handleStringChange = (key: string, callback?: (value: string) => void) => (event: any) => {\n        const value = event.target.value\n        this.setState({[key]: value}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback) {\n                callback(value)\n            }\n        })\n    }\n\n    handleBooleanChange = (key: string, callback?: (value: boolean) => void) => (event: any) => {\n        const value = event.target.checked\n        this.setState({[key]: value}, () => {\n            this.props.onDataChanged(this.state)\n            if (callback)\n                callback(value)\n        })\n    }\n}\n","import {VariableType} from \"../../models\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../lang\"\nimport React, {Component} from \"react\"\n\nexport interface InputWithTypeProps {\n    variableType: VariableType,\n    onDataChanged: (data: any) => void,\n    value: string,\n    hide: boolean,\n    label: string\n}\n\nexport interface InputWithTypeState {\n    [index: string]: any\n}\n\nexport default class InputWithType extends Component<InputWithTypeProps, InputWithTypeState> {\n    static defaultProps = {\n        value: \"\",\n        hide: false,\n        label: strings.value\n    }\n\n    constructor(props: InputWithTypeProps) {\n        super(props)\n\n        this.state = {\n            value: this.props.value,\n            isNull: this.props.value === \"NULL\"\n        }\n    }\n\n    handleStringChange = (key: string, callback?: (value: string, onComplete: (data: any) => void) => void) => (event: any) => {\n        this.setState({[key]: event.target.value}, () => {\n            if (callback) {\n                callback(event.target.value, this.props.onDataChanged)\n            } else {\n                this.props.onDataChanged(this.state)\n            }\n        })\n    }\n\n    handleBooleanChange = (key: string, callback?: (value: boolean, onComplete: (data: any) => void) => void) => (event: any) => {\n        const val = event.target.checked\n        this.setState({[key]: val}, () => {\n            if (callback) {\n                callback(val, this.props.onDataChanged)\n            } else {\n                this.props.onDataChanged(this.state)\n            }\n        })\n    }\n\n    render() {\n        if (this.props.hide)\n            return (<div/>)\n        switch (this.props.variableType) {\n            case VariableType.STRING:\n                return this.renderStringInput()\n            case VariableType.INT:\n            case VariableType.DOUBLE:\n                return this.renderIntegerInput()\n            case VariableType.BOOLEAN:\n                return this.renderBooleanInput()\n            default:\n                return (<div/>)\n        }\n    }\n\n    private renderStringInput = () => (\n        <div\n            style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                alignContent: \"center\",\n                textAlign: \"center\",\n                flex: 1\n            }}>\n            <TextField\n                style={{flex: 1}}\n                id=\"string-value-input\"\n                label={this.props.label}\n                value={this.state.isNull ? \"NULL\" : this.state.value}\n                type=\"text\"\n                onChange={this.handleStringChange(\"value\")}\n                margin=\"normal\"\n                disabled={this.state.isNull}\n            />\n            {/*<FormControlLabel\n                control={\n                    <Checkbox\n                        checked={this.state.isNull}\n                        onChange={this.handleBooleanChange(\"isNull\", (value: boolean, onComplete: (data: any) => void) => {\n                            this.setState({value: value ? \"NULL\" : \"\"}, () => onComplete(this.state))\n                        })}\n                        value=\"true\"\n                        color=\"primary\"/>\n                }\n                label=\"NULL\"\n            />*/}\n        </div>\n    )\n\n    private renderIntegerInput = () => (\n        <TextField\n            style={{display: \"flex\", flex: 1}}\n            id=\"integer-value-input\"\n            label={this.props.label}\n            value={this.state.value}\n            type=\"number\"\n            onChange={this.handleStringChange(\"value\")}\n            margin=\"normal\"\n        />\n    )\n\n    private renderBooleanInput = () => (\n        <TextField\n            style={{display: \"flex\", flex: 1}}\n            id=\"boolean-value-input\"\n            select\n            label={this.props.label}\n            value={this.state.value}\n            onChange={this.handleStringChange(\"value\")}\n            margin=\"normal\">\n            <MenuItem key={\"true\"} value={\"true\"}>\n                True\n            </MenuItem>\n            <MenuItem key={\"false\"} value={\"false\"}>\n                False\n            </MenuItem>\n        </TextField>\n    )\n}\n","import React from \"react\"\nimport {\n    Checkbox,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    FormControlLabel,\n    MenuItem,\n    Paper,\n    TextField,\n    Typography\n} from \"@material-ui/core\"\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\nimport strings from \"../../../lang\"\nimport {VariableType} from \"../../../models\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ConditionOperation, ConditionType} from \"../../../models/VariableEnums\"\nimport {SignConverter} from \"../../../utils\"\n\nexport class WhileProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as WhileFlowNode\n\n            this.state = {\n                conditions: node.conditionList.map((value) => {\n                    return {\n                        variableType: value.variableType,\n                        first: JSON.stringify(value.first),\n                        second: JSON.stringify(value.second),\n                        operation: value.operation,\n                        op2initialValue: value.second ? value.second.value : \"\",\n                        isOp2Constant: value.second && value.second.name === undefined\n                    }\n                }),\n                conditionType: node.conditionType,\n                expanded: \"\"\n            }\n        } else {\n            this.state = {\n                conditions: [{\n                    variableType: \"\",\n                    first: \"\",\n                    second: \"\",\n                    operation: \"\",\n                    isOp2Constant: false,\n                    op2initialValue: \"\"\n                }],\n                conditionType: ConditionType.AND,\n                expanded: \"\"\n\n            }\n        }\n    }\n\n    renderConditionText = (condition: any) => {\n        if (!condition || !condition.first || !condition.second || !condition.operation)\n            return strings.invalid\n\n        const first = JSON.parse(condition.first)\n        const second = JSON.parse(condition.second)\n\n        if (second) {\n            return `${first.name} ${SignConverter.booleanOperation(condition.operation)} ${second.name ? second.name : second.value}`\n        } else {\n            return first.name\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <Paper id=\"paper\"\n                       style={{\n                           display: \"flex\",\n                           flex: 1,\n                           padding: 24,\n                           marginBottom: 8\n                       }}>\n                    <TextField\n                        style={{\n                            display: \"flex\",\n                            flex: 1,\n                            margin: 0,\n                            color: \"black\"\n                        }}\n                        id=\"condition-type-selector\"\n                        select\n                        label={strings.conditionType}\n                        value={this.state.conditionType}\n                        onChange={this.handleStringChange(\"conditionType\")}\n                        margin=\"normal\">\n                        {Object.keys(ConditionType).map((value: any) => (\n                            <MenuItem key={value} value={ConditionType[value]}>\n                                {ConditionType[value]}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </Paper>\n                {this.state.conditions.map((condition: any, index: number) => (\n                    <ExpansionPanel id=\"paper\"\n                                    key={index}\n                                    expanded={this.state.expanded === index}\n                                    onChange={(e, expanded) => {\n                                        this.setState({\n                                            expanded: expanded ? index : -1\n                                        })\n                                    }}>\n                        <ExpansionPanelSummary expandIcon={index === 0 ? (\n                            <AddIcon onClick={(e) => {\n                                e.stopPropagation()\n                                e.preventDefault()\n\n                                this.state.conditions.push({\n                                    variableType: \"\",\n                                    first: \"\",\n                                    second: \"\",\n                                    operation: \"\",\n                                    isOp2Constant: false,\n                                    op2initialValue: \"\"\n                                })\n                                this.props.onDataChanged(this.state)\n                                this.forceUpdate()\n                            }}/>\n                        ) : (\n                            <DeleteForeverIcon onClick={(e) => {\n                                e.stopPropagation()\n                                e.preventDefault()\n\n                                this.state.conditions.splice(this.state.conditions.indexOf(condition), 1)\n                                this.props.onDataChanged(this.state)\n                                this.forceUpdate()\n                            }}/>\n                        )}>\n                            <Typography>\n                                {this.renderConditionText(condition)}\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            flex: 1\n                        }}>\n                            <TextField\n                                id=\"data-type-selector\"\n                                select\n                                label={strings.variableType}\n                                value={this.state.conditions[index].variableType}\n                                onChange={(e: any) => {\n                                    this.state.conditions[index].variableType = e.target.value\n                                    this.props.onDataChanged(this.state)\n                                    this.forceUpdate()\n                                }}\n                                margin=\"normal\">\n                                {Object.keys(VariableType).map((value: any) => (\n                                    <MenuItem key={value} value={VariableType[value]}>\n                                        {VariableType[value]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <TextField\n                                id=\"data-type-selector\"\n                                select\n                                label={strings.firstVariable}\n                                value={this.state.conditions[index].first}\n                                onChange={(e: any) => {\n                                    this.state.conditions[index].first = e.target.value\n                                    this.props.onDataChanged(this.state)\n                                    this.forceUpdate()\n                                }}\n                                margin=\"normal\">\n                                {this.props.variables.filter((value) => {\n                                    return value.type === condition.variableType\n                                }).map((value) => (\n                                    <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                        {value.name}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <div style={{\n                                display: \"flex\",\n                                flexDirection: \"row\"\n                            }}>\n                                <TextField\n                                    id=\"data-type-selector\"\n                                    select\n                                    style={{flex: 1, display: condition.isOp2Constant ? \"none\" : \"flex\"}}\n                                    label={strings.secondVariable}\n                                    value={this.state.conditions[index].second}\n                                    onChange={(e: any) => {\n                                        this.state.conditions[index].second = e.target.value\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}\n                                    margin=\"normal\">\n                                    {this.props.variables.filter((value) => {\n                                        return value.type === condition.variableType\n                                    }).map((value) => (\n                                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                            {value.name}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                                <InputWithType\n                                    variableType={this.state.conditions[index].variableType}\n                                    onDataChanged={(data: any) => {\n                                        this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, data.value))\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}\n                                    value={condition.op2initialValue}\n                                    hide={!condition.isOp2Constant}/>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            checked={this.state.conditions[index].isOp2Constant}\n                                            onChange={(e: any) => {\n                                                this.state.conditions[index].isOp2Constant = e.target.checked\n                                                this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, condition.op2initialValue))\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            value=\"true\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label={condition.isOp2Constant ? strings.constant : strings.variable}\n                                />\n                            </div>\n                            <TextField\n                                id=\"data-type-selector\"\n                                select\n                                label={strings.operation}\n                                value={this.state.conditions[index].operation}\n                                onChange={(e: any) => {\n                                    this.state.conditions[index].operation = e.target.value\n                                    this.props.onDataChanged(this.state)\n                                    this.forceUpdate()\n                                }}\n                                margin=\"normal\">\n                                {Object.keys(ConditionOperation).map((value: any) => (\n                                    <MenuItem key={value} value={ConditionOperation[value]}>\n                                        {ConditionOperation[value]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                ))}\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {Checkbox, FormControlLabel, MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {ArithmeticOperationType, VariableType} from \"../../../models\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\n\nexport class ArithmeticProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as ArithmeticFlowNode\n\n            this.state = {\n                variable: JSON.stringify(node.getVariable()),\n                operation: node.getOperation(),\n                operator1: JSON.stringify(node.getOperator1()),\n                operator2: JSON.stringify(node.getOperator2()),\n                isOp2Constant: node.getOperator2().name === undefined,\n                op2initialValue: node.getOperator2().value\n            }\n        } else {\n            this.state = {\n                variable: \"\",\n                operation: \"\",\n                operator1: \"\",\n                operator2: \"\",\n                isOp2Constant: false,\n                op2initialValue: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.variable}\n                    value={this.state.variable}\n                    onChange={this.handleStringChange(\"variable\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT || value.type === VariableType.DOUBLE\n                    }).map((value) => (\n                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.operation}\n                    value={this.state.operation}\n                    onChange={this.handleStringChange(\"operation\")}\n                    margin=\"normal\">\n                    {Object.keys(ArithmeticOperationType).map((value: any) => (\n                        <MenuItem key={value} value={ArithmeticOperationType[value]}>\n                            {ArithmeticOperationType[value]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    label={strings.firstOperator}\n                    value={this.state.operator1}\n                    onChange={this.handleStringChange(\"operator1\")}\n                    margin=\"normal\">\n                    {this.props.variables.filter((value) => {\n                        return value.type === VariableType.INT || value.type === VariableType.DOUBLE\n                    }).map((value) => (\n                        <MenuItem key={value.name}\n                                  value={JSON.stringify(new Variable(value.name, value.type, value.value))}>\n                            {value.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"row\"\n                }}>\n                    <TextField\n                        id=\"data-type-selector\"\n                        select\n                        style={{flex: 1, display: this.state.isOp2Constant ? \"none\" : \"flex\"}}\n                        label={strings.secondOperator}\n                        value={this.state.operator2}\n                        onChange={this.handleStringChange(\"operator2\")}\n                        margin=\"normal\">\n                        {this.props.variables.filter((value) => {\n                            return value.type === VariableType.INT || value.type === VariableType.DOUBLE\n                        }).map((value) => (\n                            <MenuItem key={value.name}\n                                      value={JSON.stringify(new Variable(value.name, value.type, value.value))}>\n                                {value.name}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    <InputWithType\n                        variableType={VariableType.INT}\n                        onDataChanged={(data: any) => {\n                            this.setState({operator2: JSON.stringify(new Variable(undefined, VariableType.INT, data.value))}, () => {\n                                this.props.onDataChanged(this.state)\n                            })\n                        }}\n                        value={this.state.op2initialValue}\n                        hide={!this.state.isOp2Constant}/>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={this.state.isOp2Constant}\n                                onChange={this.handleBooleanChange(\"isOp2Constant\")}\n                                value=\"true\"\n                                color=\"primary\"\n                            />\n                        }\n                        label={this.state.isOp2Constant ? strings.constant : strings.variable}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Validator} from \"../../../utils\"\n\nexport interface AssignmentPropertiesProps extends BasePropertiesProps {\n    readonlyType: boolean\n}\n\nexport class AssignmentProperties extends BaseProperties<AssignmentPropertiesProps> {\n    static defaultProps = {\n        readonlyType: false\n    }\n\n    constructor(props: AssignmentPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as AssignmentFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                variableType: node.getVariable().type,\n                value: node.getVariable().value,\n                isNull: node.getVariable().value === \"NULL\",\n                variable: node.getVariable()\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                variableType: \"\",\n                value: \"\",\n                isNull: false,\n                variable: null\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"variable-name-input\"\n                    label={strings.variableName}\n                    disabled={this.props.readonlyType}\n                    error={this.state.errorField === \"variableName\"}\n                    value={this.state.variableName}\n                    inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                    onChange={this.handleStringChange(\"variableName\", (data) => {\n                        const error = Validator.validateVariableName(data, this.props.variables)\n                        this.setState({errorMessage: error, errorField: error ? \"variableName\" : \"\"}, () => {\n                            this.props.onDataChanged(this.state)\n                        })\n                    })}\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    disabled={this.props.readonlyType}\n                    label={strings.dataType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\", () => {\n                        this.setState({value: \"\"})\n                    })}\n                    margin=\"normal\">\n                    {Object.keys(VariableType).map((key: any) => (\n                        <MenuItem key={key} value={VariableType[key]}>\n                            {VariableType[key]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <InputWithType\n                    variableType={this.state.variableType}\n                    onDataChanged={(data: any) => {\n                        this.setState({value: data.value, isNull: data.isNull}, () => {\n                            this.props.onDataChanged(this.state)\n                        })\n                    }}\n                    value={this.state.value}\n                    hide={this.state.variableType === \"\"}/>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {InputFlowNode} from \"./InputFlowNode\"\nimport {Validator} from \"../../../utils\"\n\nexport interface InputPropertiesProps extends BasePropertiesProps {\n    readonlyType: boolean\n}\n\nexport class InputProperties extends BaseProperties<InputPropertiesProps> {\n    static defaultProps = {\n        readonlyType: false\n    }\n\n    constructor(props: InputPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as InputFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                variableType: node.getVariable().type,\n                variable: node.getVariable()\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                variableType: \"\",\n                variable: null\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"variable-name-input\"\n                    label={strings.variableName}\n                    disabled={this.props.readonlyType}\n                    error={this.state.errorField === \"variableName\"}\n                    value={this.state.variableName}\n                    inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                    onChange={this.handleStringChange(\"variableName\", (data) => {\n                        const error = Validator.validateVariableName(data, this.props.variables)\n                        this.setState({errorMessage: error, errorField: error ? \"variableName\" : \"\"}, () => {\n                            this.props.onDataChanged(this.state)\n                        })\n                    })}\n                    margin=\"normal\"\n                />\n                <TextField\n                    id=\"data-type-selector\"\n                    select\n                    disabled={this.props.readonlyType}\n                    label={strings.dataType}\n                    value={this.state.variableType}\n                    onChange={this.handleStringChange(\"variableType\")}\n                    margin=\"normal\">\n                    {Object.keys(VariableType).map((key: any) => (\n                        <MenuItem key={key} value={VariableType[key]}>\n                            {VariableType[key]}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {Checkbox, FormControlLabel, MenuItem, TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\nimport {VariableType} from \"../../../models\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\n\nexport class OutputProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as OutputFlowNode\n\n            this.state = {\n                variable: JSON.stringify(node.getVariable()),\n                isConstant: node.getVariable().name === undefined,\n                variableType: node.getVariable().type,\n                initialValue: node.getVariable().value\n\n            }\n        } else {\n            this.state = {\n                variable: \"\",\n                isConstant: false,\n                variableType: \"\",\n                initialValue: \"\"\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flex: 1\n                }}>\n                    <TextField\n                        id=\"variable-selector\"\n                        select\n                        style={{flex: 1, display: this.state.isConstant ? \"none\" : \"flex\"}}\n                        label={strings.variable}\n                        value={this.state.variable}\n                        onChange={this.handleStringChange(\"variable\")}\n                        margin=\"normal\">\n                        {this.props.variables.map((value) => (\n                            <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                {value.name}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n\n                    <InputWithType\n                        variableType={VariableType.STRING}\n                        onDataChanged={(data: any) => {\n                            this.setState({variable: JSON.stringify(new Variable(undefined, VariableType.STRING, data.value))}, () => {\n                                this.props.onDataChanged(this.state)\n                            })\n                        }}\n                        value={this.state.initialValue}\n                        hide={!this.state.isConstant}/>\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={this.state.isConstant}\n                                onChange={this.handleBooleanChange(\"isConstant\")}\n                                value=\"true\"\n                                color=\"primary\"\n                            />\n                        }\n                        label={this.state.isConstant ? strings.constant : strings.variable}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {\n    Checkbox,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    FormControlLabel,\n    MenuItem,\n    Paper,\n    TextField,\n    Typography\n} from \"@material-ui/core\"\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport strings from \"../../../lang\"\nimport {VariableType} from \"../../../models\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Variable} from \"../../../models/Variable\"\nimport {ConditionOperation, ConditionType} from \"../../../models/VariableEnums\"\nimport {SignConverter} from \"../../../utils\"\nimport {IfFlowNode} from \"./IfFlowNode\"\n\nexport class IfProperties extends BaseProperties<BasePropertiesProps> {\n\n    constructor(props: BasePropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as IfFlowNode\n\n            this.state = {\n                conditions: node.conditionList.map((value) => {\n                    return {\n                        variableType: value.variableType,\n                        first: JSON.stringify(value.first),\n                        second: JSON.stringify(value.second),\n                        operation: value.operation,\n                        op2initialValue: value.second ? value.second.value : \"\",\n                        isOp2Constant: value.second && value.second.name === undefined\n                    }\n                }),\n                conditionType: node.conditionType,\n                expanded: \"\"\n            }\n        } else {\n            this.state = {\n                conditions: [{\n                    variableType: \"\",\n                    first: \"\",\n                    second: \"\",\n                    operation: \"\",\n                    isOp2Constant: false,\n                    op2initialValue: \"\"\n                }],\n                conditionType: ConditionType.AND,\n                expanded: \"\"\n\n            }\n        }\n    }\n\n    renderConditionText = (condition: any) => {\n        if (!condition || !condition.first || !condition.second || !condition.operation)\n            return strings.invalid\n\n        const first = JSON.parse(condition.first)\n        const second = JSON.parse(condition.second)\n\n        if (second) {\n            return `${first.name} ${SignConverter.booleanOperation(condition.operation)} ${second.name ? second.name : second.value}`\n        } else {\n            return first.name\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <Paper id=\"paper\"\n                       style={{\n                           display: \"flex\",\n                           flex: 1,\n                           padding: 24,\n                           marginBottom: 8\n                       }}>\n                    <TextField\n                        style={{\n                            display: \"flex\",\n                            flex: 1,\n                            margin: 0,\n                            color: \"black\"\n                        }}\n                        id=\"condition-type-selector\"\n                        select\n                        label={strings.conditionType}\n                        value={this.state.conditionType}\n                        onChange={this.handleStringChange(\"conditionType\")}\n                        margin=\"normal\">\n                        {Object.keys(ConditionType).map((value: any) => (\n                            <MenuItem key={value} value={ConditionType[value]}>\n                                {ConditionType[value]}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </Paper>\n                {this.state.conditions.map((condition: any, index: number) => (\n                    <ExpansionPanel id=\"paper\"\n                                    key={index}\n                                    expanded={this.state.expanded === index}\n                                    onChange={(e, expanded) => {\n                                        this.setState({\n                                            expanded: expanded ? index : -1\n                                        })\n                                    }}>\n                        <ExpansionPanelSummary expandIcon={index === 0 ? (\n                            <AddIcon onClick={(e) => {\n                                e.stopPropagation()\n                                e.preventDefault()\n\n                                this.state.conditions.push({\n                                    variableType: \"\",\n                                    first: \"\",\n                                    second: \"\",\n                                    operation: \"\",\n                                    isOp2Constant: false,\n                                    op2initialValue: \"\"\n                                })\n                                this.props.onDataChanged(this.state)\n                                this.forceUpdate()\n                            }}/>\n                        ) : (\n                            <DeleteForeverIcon onClick={(e) => {\n                                e.stopPropagation()\n                                e.preventDefault()\n\n                                this.state.conditions.splice(this.state.conditions.indexOf(condition), 1)\n                                this.props.onDataChanged(this.state)\n                                this.forceUpdate()\n                            }}/>\n                        )}>\n                            <Typography>\n                                {this.renderConditionText(condition)}\n                            </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            flex: 1\n                        }}>\n                            <TextField\n                                id=\"data-type-selector\"\n                                select\n                                label={strings.variableType}\n                                value={this.state.conditions[index].variableType}\n                                onChange={(e: any) => {\n                                    this.state.conditions[index].variableType = e.target.value\n                                    this.props.onDataChanged(this.state)\n                                    this.forceUpdate()\n                                }}\n                                margin=\"normal\">\n                                {Object.keys(VariableType).map((value: any) => (\n                                    <MenuItem key={value} value={VariableType[value]}>\n                                        {VariableType[value]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <TextField\n                                id=\"data-type-selector\"\n                                select\n                                label={strings.firstVariable}\n                                value={this.state.conditions[index].first}\n                                onChange={(e: any) => {\n                                    this.state.conditions[index].first = e.target.value\n                                    this.props.onDataChanged(this.state)\n                                    this.forceUpdate()\n                                }}\n                                margin=\"normal\">\n                                {this.props.variables.filter((value) => {\n                                    return value.type === condition.variableType\n                                }).map((value) => (\n                                    <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                        {value.name}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <div style={{\n                                display: \"flex\",\n                                flexDirection: \"row\"\n                            }}>\n                                <TextField\n                                    id=\"data-type-selector\"\n                                    select\n                                    style={{flex: 1, display: condition.isOp2Constant ? \"none\" : \"flex\"}}\n                                    label={strings.secondVariable}\n                                    value={this.state.conditions[index].second}\n                                    onChange={(e: any) => {\n                                        this.state.conditions[index].second = e.target.value\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}\n                                    margin=\"normal\">\n                                    {this.props.variables.filter((value) => {\n                                        return value.type === condition.variableType\n                                    }).map((value) => (\n                                        <MenuItem key={value.name} value={JSON.stringify(value)}>\n                                            {value.name}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                                <InputWithType\n                                    variableType={this.state.conditions[index].variableType}\n                                    onDataChanged={(data: any) => {\n                                        this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, data.value))\n                                        this.props.onDataChanged(this.state)\n                                        this.forceUpdate()\n                                    }}\n                                    value={condition.op2initialValue}\n                                    hide={!condition.isOp2Constant}/>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            checked={this.state.conditions[index].isOp2Constant}\n                                            onChange={(e: any) => {\n                                                this.state.conditions[index].isOp2Constant = e.target.checked\n                                                this.state.conditions[index].second = JSON.stringify(new Variable(undefined, condition.variableType, condition.op2initialValue))\n                                                this.props.onDataChanged(this.state)\n                                                this.forceUpdate()\n                                            }}\n                                            value=\"true\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label={condition.isOp2Constant ? strings.constant : strings.variable}\n                                />\n                            </div>\n                            <TextField\n                                id=\"data-type-selector\"\n                                select\n                                label={strings.operation}\n                                value={this.state.conditions[index].operation}\n                                onChange={(e: any) => {\n                                    this.state.conditions[index].operation = e.target.value\n                                    this.props.onDataChanged(this.state)\n                                    this.forceUpdate()\n                                }}\n                                margin=\"normal\">\n                                {Object.keys(ConditionOperation).map((value: any) => (\n                                    <MenuItem key={value} value={ConditionOperation[value]}>\n                                        {ConditionOperation[value]}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                ))}\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport {TextField} from \"@material-ui/core\"\nimport strings from \"../../../lang\"\nimport {BaseProperties, BasePropertiesProps} from \"../Base/BaseProperties\"\nimport {VariableType} from \"../../../models\"\nimport {Rules} from \"../../../config\"\nimport {RandomFlowNode} from \"./RandomFlowNode\"\nimport InputWithType from \"../../InputWithType/InputWithType\"\nimport {Validator} from \"../../../utils\"\n\nexport interface RandomPropertiesProps extends BasePropertiesProps {\n    readonlyType: boolean\n}\n\nexport class RandomProperties extends BaseProperties<RandomPropertiesProps> {\n    static defaultProps = {\n        readonlyType: false\n    }\n\n    constructor(props: RandomPropertiesProps) {\n        super(props)\n\n        if (props.node !== undefined) {\n            const node = props.node as RandomFlowNode\n\n            this.state = {\n                variableName: node.getVariable().name,\n                minValue: node.minValue,\n                maxValue: node.maxValue\n            }\n        } else {\n            this.state = {\n                variableName: \"\",\n                minValue: 0,\n                maxValue: 1\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bodyContainer\">\n                <TextField\n                    id=\"variable-name-input\"\n                    label={strings.variableName}\n                    disabled={this.props.readonlyType}\n                    error={this.state.errorField === \"variableName\"}\n                    value={this.state.variableName}\n                    inputProps={{maxLength: Rules.MAX_VAR_LENGTH}}\n                    onChange={this.handleStringChange(\"variableName\", (data) => {\n                        const error = Validator.validateVariableName(data, this.props.variables)\n                        this.setState({errorMessage: error, errorField: error ? \"variableName\" : \"\"}, () => {\n                            this.props.onDataChanged(this.state)\n                        })\n                    })}\n                    margin=\"normal\"\n                />\n                <InputWithType\n                    variableType={VariableType.DOUBLE}\n                    label={strings.minValue}\n                    onDataChanged={(data: any) => {\n                        this.setState({minValue: data.value}, () => {\n                            this.props.onDataChanged(this.state)\n                        })\n                    }}\n                    value={this.state.minValue}/>\n                <InputWithType\n                    variableType={VariableType.DOUBLE}\n                    label={strings.maxValue}\n                    onDataChanged={(data: any) => {\n                        this.setState({maxValue: data.value}, () => {\n                            this.props.onDataChanged(this.state)\n                        })\n                    }}\n                    value={this.state.maxValue}/>\n            </div>\n        )\n    }\n}\n","import {FlowType} from \"../../models\"\nimport {BasePropertiesState} from \"./Base/BaseProperties\"\nimport {Variable} from \"../../models/Variable\"\nimport {WhileProperties} from \"./While/WhileProperties\"\nimport {ArithmeticProperties} from \"./Arithmetic/ArithmeticProperties\"\nimport {AssignmentProperties} from \"./Assignment/AssignmentProperties\"\nimport {InputProperties} from \"./Input/InputProperties\"\nimport {OutputProperties} from \"./Output/OutputProperties\"\nimport React from \"react\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {IfProperties} from \"./If/IfProperties\"\nimport {RandomProperties} from \"./Random/RandomProperties\"\n\nexport class FlowPropertiesFactory {\n    private constructor() {\n    }\n\n    static create(type: FlowType | null | undefined, variables: Variable[], onDataChanged: (data: BasePropertiesState) => void, node?: BaseFlowNode): JSX.Element {\n        switch (type) {\n            case FlowType.WHILE:\n                return (<WhileProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.IF:\n                return (<IfProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ARITHMETIC:\n                return (<ArithmeticProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ASSIGNMENT:\n                return (<AssignmentProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.INPUT:\n                return (<InputProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.OUTPUT:\n                return (<OutputProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.RANDOM:\n                return (<RandomProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            default:\n                return (<div/>)\n        }\n    }\n\n    static createReadonlyVariableType(type: FlowType | null | undefined, variables: Variable[], onDataChanged: (data: BasePropertiesState) => void, node?: BaseFlowNode): JSX.Element {\n        switch (type) {\n            case FlowType.WHILE:\n                return (<WhileProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.IF:\n                return (<IfProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ARITHMETIC:\n                return (<ArithmeticProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.ASSIGNMENT:\n                return (<AssignmentProperties readonlyType variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.INPUT:\n                return (<InputProperties readonlyType variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.OUTPUT:\n                return (<OutputProperties variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            case FlowType.RANDOM:\n                return (<RandomProperties readonlyType variables={variables} node={node} onDataChanged={onDataChanged.bind(this)}/>)\n            default:\n                return (<div/>)\n        }\n    }\n}\n","import {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\n\nexport abstract class BaseFlowModelGenerator {\n    abstract generate(flow: BaseFlowNode): FlowModel\n}\n","import {ArithmeticFlowContent} from \"./flows/ArithmeticFlow\"\nimport {OutputFlowContent} from \"./flows/OutputFlow\"\nimport {InputFlowContent} from \"./flows/InputFlow\"\nimport {AssignmentFlowContent} from \"./flows/AssignmentFlow\"\nimport {WhileFlowContent} from \"./flows/WhileFlow\"\nimport {FlowType} from \"../models\"\nimport {IfFlowContent} from \"./flows/IfFlow\";\nimport {RandomFlowContent} from \"./flows/RandomFlow\";\n\nexport class FlowModel {\n    type: FlowType\n    id: string\n    assignmentFlowContent: AssignmentFlowContent | null\n    inputFlowContent: InputFlowContent | null\n    outputFlowContent: OutputFlowContent | null\n    arithmeticFlowContent: ArithmeticFlowContent | null\n    whileFlowContent: WhileFlowContent | null\n    ifFlowContent: IfFlowContent | null\n    randomFlowContent: RandomFlowContent | null\n    // forFlowContent: ForFlowContent,\n    // ifFlowContent: IfFlowContent,\n    nextFlowId: string | null\n\n    constructor(\n        type: FlowType,\n        id: string,\n        assignmentFlowContent: AssignmentFlowContent | null = null,\n        inputFlowContent: InputFlowContent | null = null,\n        outputFlowContent: OutputFlowContent | null = null,\n        arithmeticFlowContent: ArithmeticFlowContent | null = null,\n        whileFlowContent: WhileFlowContent | null = null,\n        ifFlowContent: IfFlowContent | null = null,\n        randomFlowContent: RandomFlowContent | null = null,\n        nextFlowId: string | null\n        // forFlowContent: ForFlowContent,\n\n    ) {\n        this.type = type\n        this.id = id\n        this.assignmentFlowContent = assignmentFlowContent\n        this.inputFlowContent = inputFlowContent\n        this.outputFlowContent = outputFlowContent\n        this.arithmeticFlowContent = arithmeticFlowContent\n        this.ifFlowContent = ifFlowContent\n        this.whileFlowContent = whileFlowContent\n        this.ifFlowContent = ifFlowContent\n        this.randomFlowContent = randomFlowContent\n        this.nextFlowId = nextFlowId\n    }\n}\n","export class Func {\n    functionName: string\n    parameters: Parameter[]\n    returnType: string | undefined\n    codeLines: string[]\n\n    constructor(\n        functionName: string,\n        parameters: Parameter[],\n        returnType: string | undefined,\n        codeLines: string[]\n    ) {\n        this.functionName = functionName\n        this.parameters = parameters\n        this.returnType = returnType\n        this.codeLines = codeLines\n    }\n}\n\nexport class Parameter {\n    name: string\n    type: string\n\n    constructor(\n        name: string,\n        type: string\n    ) {\n        this.name = name;\n        this.type = type\n    }\n}\n","import {CodeStrategy} from \"../CodeStrategy\";\nimport {Func, Parameter} from \"../../Func\";\nimport {CodeWriter} from \"../CodeWriter\";\nimport {ArithmeticFlow} from \"../../flows/ArithmeticFlow\";\nimport {InputFlow} from \"../../flows/InputFlow\";\nimport {OutputFlow} from \"../../flows/OutputFlow\";\nimport {WhileFlow} from \"../../flows/WhileFlow\";\nimport {AssignmentFlow} from \"../../flows/AssignmentFlow\";\nimport {ArithmeticOperationType, VariableType} from \"../../../models\";\nimport {ConditionOperation} from \"../../../models/VariableEnums\";\nimport {Class} from \"../Class\";\nimport {RandomFlow} from \"../../flows/RandomFlow\";\nimport {IfFlow} from \"../../flows/IfFlow\";\n\nexport class KotlinCodeStrategy implements CodeStrategy {\n\n    initClass(clazz: Class): void {\n\n    }\n\n    finishClass(): void {\n\n    }\n\n    initMain(): void {\n        CodeWriter.getInstance().writeLineToMainFunction(`fun main(args: Array<String\\>) {`)\n        CodeWriter.getInstance().scopeCount++\n    }\n\n    finishMain(): void {\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n        CodeWriter.getInstance().writeLineToMainFunction(\"\")\n    }\n\n    writeFunctionSignature(func: Func): void {\n        let returnTypeString = \"\"\n        if (func.returnType === undefined) {\n            returnTypeString += \"\"\n        } else {\n            returnTypeString += \": \" + func.returnType\n        }\n\n        let parameterString = \"\"\n\n        func.parameters.forEach((value, index) => {\n            parameterString += `${value.name}: ${value.type}`\n            if (index !== func.parameters.length - 1) {\n                parameterString += \", \"\n            }\n        })\n\n        CodeWriter.getInstance().writeLine(`fun ${func.functionName}(${parameterString})${returnTypeString}`)\n        CodeWriter.getInstance().appendToLastLine(\" {\")\n        CodeWriter.getInstance().scopeCount++\n\n        func.codeLines.forEach((value) => {\n                CodeWriter.getInstance().writeLine(value)\n            }\n        )\n\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLine(\"}\")\n        CodeWriter.getInstance().writeLine(\"\")\n    }\n\n    writeArithmeticFunction(arithmeticFlow: ArithmeticFlow): void {\n        if (arithmeticFlow.content == null)\n            return\n\n        const functionLines: string[] = []\n\n        const parameters: Parameter[] = []\n\n        if (arithmeticFlow.content.operator1.name !== undefined) {\n            parameters.push(new Parameter(\n                arithmeticFlow.content.operator1.name,\n                arithmeticFlow.content.operator1.type))\n        }\n\n        if (arithmeticFlow.content.operator2.name !== undefined && arithmeticFlow.content.operator1.name !== arithmeticFlow.content.operator2.name) {\n            parameters.push(new Parameter(\n                arithmeticFlow.content.operator2.name,\n                arithmeticFlow.content.operator2.type))\n        }\n\n        let operationCode = \"\"\n        switch (arithmeticFlow.content.operation) {\n            case ArithmeticOperationType.ADDITION:\n                operationCode = \"+\"\n                break\n            case ArithmeticOperationType.SUBTRACTION:\n                operationCode = \"-\"\n                break\n            case ArithmeticOperationType.MULTIPLICATION:\n                operationCode = \"*\"\n                break\n            case ArithmeticOperationType.DIVISION:\n                operationCode = \"/\"\n                break\n        }\n\n        let operator1Code = \"\"\n        let operator2Code = \"\"\n\n        if (arithmeticFlow.content.operator1.name !== undefined) {\n            operator1Code += arithmeticFlow.content.operator1.name\n        } else {\n            operator1Code += arithmeticFlow.content.operator1.value\n        }\n\n        if (arithmeticFlow.content.operator2.name !== undefined) {\n            operator2Code += arithmeticFlow.content.operator2.name\n        } else {\n            operator2Code += arithmeticFlow.content.operator2.value\n        }\n\n        if (arithmeticFlow.content.operation == ArithmeticOperationType.ROOT) {\n            functionLines.push(`return Math.pow(${operator1Code}, 1 / ${operator2Code})`)\n        } else {\n            if (arithmeticFlow.content.variable.type == VariableType.DOUBLE) {\n\n            }\n\n            functionLines.push(`return ${operator1Code} ${operationCode} ${operator2Code}`)\n        }\n\n        const func = new Func(\n            arithmeticFlow.functionName(),\n            parameters,\n            arithmeticFlow.content.variable.type,\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n\n    }\n\n    writeArithmeticMain(arithmeticFlow: ArithmeticFlow): void {\n        if (arithmeticFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n\n        if (CodeWriter.getInstance().addVariable(arithmeticFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${arithmeticFlow.content.variable.name} = ${arithmeticFlow.functionInvocation()}`\n        )\n        CodeWriter.getInstance().writeMainCodeFromFlow(arithmeticFlow.nextFlow())\n\n    }\n\n    writeAssignmentFunction(assignmentFlow: AssignmentFlow): void {\n\n    }\n\n    writeAssignmentMain(assignmentFlow: AssignmentFlow): void {\n        if (assignmentFlow.content == null)\n            return\n\n        let contentString = \"\"\n        switch (assignmentFlow.content.variable.type) {\n            case VariableType.INT:\n            case VariableType.DOUBLE:\n                contentString = assignmentFlow.content.variable.value.toString()\n                break\n            case VariableType.STRING:\n                contentString = `\"${assignmentFlow.content.variable.value}\"`\n                break\n            default:\n                console.log(\"default...\")\n                break\n        }\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(assignmentFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(`${variableSetCode}${assignmentFlow.content.variable.name} = ${contentString}`)\n        CodeWriter.getInstance().writeMainCodeFromFlow(assignmentFlow.nextFlow())\n    }\n\n    writeInputFunction(inputFlow: InputFlow): void {\n        if (inputFlow.content == null)\n            return\n\n        const functionLines: string[] = []\n        functionLines.push(`println(\"Please enter value for ${inputFlow.content.variable.name}\")`)\n\n        let scanCode = \"\"\n        switch (inputFlow.content.variable.type) {\n            case VariableType.INT:\n                scanCode = \"readLine()!!.toInt()\"\n                break\n            case VariableType.STRING:\n                scanCode = \"readLine()!!\"\n                break\n            case VariableType.BOOLEAN:\n                scanCode = \"readLine()!!.toBoolean()\"\n                break\n            case VariableType.DOUBLE:\n                scanCode = \"readLine()!!.toDouble()\"\n            default:\n                break\n        }\n\n        functionLines.push(`return ${scanCode}`)\n\n        const parameters: Parameter[] = []\n\n        const func = new Func(\n            inputFlow.functionName(),\n            parameters,\n            inputFlow.content.variable.type.toString(),\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n    }\n\n    writeInputMain(inputFlow: InputFlow): void {\n        if (inputFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(inputFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${inputFlow.content.variable.name} = ${inputFlow.functionInvocation()}`\n        )\n\n        CodeWriter.getInstance().writeMainCodeFromFlow(inputFlow.nextFlow())\n    }\n\n    writeOutputFunction(outputFlow: OutputFlow): void {\n        if (outputFlow.content == null)\n            return\n\n        const functionLines: string[] = []\n\n        const parameters: Parameter[] = []\n        if (outputFlow.content.variable.name) {\n            parameters.push(new Parameter(\n                outputFlow.content.variable.name,\n                outputFlow.content.variable.type.toString()\n            ))\n        }\n\n        const func = new Func(\n            outputFlow.functionName(),\n            parameters,\n            undefined,\n            functionLines\n        )\n\n        let printString = \"\"\n\n        if (!outputFlow.content.variable.name) {\n            printString = `println(\"${outputFlow.content.variable.value}\")`\n        } else {\n            printString = `println(\"Value of ${outputFlow.content.variable.name} is \\${${outputFlow.content.variable.name}}\")`\n        }\n\n        functionLines.push(printString)\n        CodeWriter.getInstance().writeFunction(func)\n    }\n\n    writeOutputMain(outputFlow: OutputFlow): void {\n        CodeWriter.getInstance().writeLineToMainFunction(outputFlow.functionInvocation())\n        CodeWriter.getInstance().writeMainCodeFromFlow(outputFlow.nextFlow())\n    }\n\n    writeWhileFunction(whileFlow: WhileFlow): void {\n\n    }\n\n    writeWhileMain(whileFlow: WhileFlow): void {\n        if (whileFlow.content == null)\n            return\n\n        const nextScopeId = whileFlow.content.scopeId\n\n        let conditionCode = \"\"\n\n        for (let i = 0; i < whileFlow.content.conditions.length; i++) {\n            const condition = whileFlow.content.conditions[i]\n\n            conditionCode += condition.first.name\n\n            if (condition.second !== undefined) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n\n            if (i !== whileFlow.content.conditions.length - 1) {\n                conditionCode += ` ${whileFlow.content.conditionType} `\n            }\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\"while(\" + conditionCode + \") {\")\n        CodeWriter.getInstance().scopeCount++\n\n        if (nextScopeId != null) {\n            CodeWriter.getInstance().addToLoopStack(whileFlow.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(nextScopeId)\n        }\n\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n        CodeWriter.getInstance().writeMainCodeFromFlow(whileFlow.nextFlow())\n    }\n\n    writeIfFunction(ifFlow: IfFlow): void {\n\n    }\n\n    writeIfMain(ifFlow: IfFlow): void {\n        if (ifFlow.content == null)\n            return\n\n        let conditionCode = \"\"\n\n        for (let i = 0; i < ifFlow.content.conditions.length; i++) {\n            const condition = ifFlow.content.conditions[i]\n\n            conditionCode += condition.first.name\n\n            if (condition.second !== undefined) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n\n            if (i !== ifFlow.content.conditions.length - 1) {\n                conditionCode += ` ${ifFlow.content.conditionType} `\n            }\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\"if(\" + conditionCode + \") {\")\n        CodeWriter.getInstance().scopeCount++\n\n        if (ifFlow.content.trueScopeId != null) {\n            CodeWriter.getInstance().addToLoopStack(ifFlow.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(ifFlow.content.trueScopeId)\n        }\n\n        CodeWriter.getInstance().scopeCount--\n\n        if (ifFlow.content.falseScopeId != null) {\n            CodeWriter.getInstance().writeLineToMainFunction(\"} else {\")\n\n            CodeWriter.getInstance().scopeCount++\n\n            CodeWriter.getInstance().addToLoopStack(ifFlow.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(ifFlow.content.falseScopeId)\n\n            CodeWriter.getInstance().scopeCount--\n        }\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n\n        CodeWriter.getInstance().writeMainCodeFromFlow(ifFlow.nextFlow())\n    }\n\n    writeRandomFunction(randomFlow: RandomFlow): void {\n    }\n\n    writeRandomMain(randomFlow: RandomFlow): void {\n        CodeWriter.getInstance().addGlobalVariable(\"val random = Random()\")\n        CodeWriter.getInstance().addDependency(\"import java.util.Random\")\n\n        if (randomFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(randomFlow.content.variable.name)) {\n            variableSetCode = \"var \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${randomFlow.content.variable.name} = ${randomFlow.content.min} + (${randomFlow.content.max} - ${randomFlow.content.min}) * random.nextDouble()`\n        )\n\n        CodeWriter.getInstance().writeMainCodeFromFlow(randomFlow.nextFlow())\n\n    }\n\n    addDependenciesAndGlobalVariables(dependencies: Set<string>, globalVariables: Set<string>): void {\n        dependencies.add(\"\")\n        let index = 0\n\n        dependencies.forEach((value => {\n                CodeWriter.getInstance().writeLineToIndex(value, index)\n                index++\n            }\n        ))\n\n        CodeWriter.getInstance().writeLineToIndex(\"\", index)\n        index++\n\n        globalVariables.forEach((value => {\n            CodeWriter.getInstance().writeLineToIndex(value, index)\n            index++\n        }))\n\n    }\n\n}\n","import {ProgrammingLanguage, VariableType} from \"../../models\";\n\nexport class ProgrammingLanguageTypeConverter {\n    static convert(programmingLanguage: ProgrammingLanguage, variableType: VariableType): string {\n        let convertedType = \"\"\n\n        switch (+programmingLanguage) {\n            case ProgrammingLanguage.JAVA:\n                switch (variableType) {\n                    case VariableType.INT:\n                        convertedType = \"int\"\n                        break\n                    case VariableType.BOOLEAN:\n                        convertedType = \"boolean\"\n                        break\n                    case VariableType.STRING:\n                        convertedType = \"String\"\n                        break\n                    case VariableType.DOUBLE:\n                        convertedType = \"double\"\n                }\n                break\n            case ProgrammingLanguage.KOTLIN:\n                switch (variableType) {\n                    case VariableType.INT:\n                        convertedType = \"Int\"\n                        break\n                    case VariableType.BOOLEAN:\n                        convertedType = \"Boolean\"\n                        break\n                    case VariableType.STRING:\n                        convertedType = \"String\"\n                        break\n                    case VariableType.DOUBLE:\n                        convertedType = \"Double\"\n                }\n                break\n        }\n\n        return convertedType\n    }\n}\n","import {CodeStrategy} from \"../CodeStrategy\";\nimport {Func, Parameter} from \"../../Func\";\nimport {CodeWriter} from \"../CodeWriter\";\nimport {ArithmeticFlow} from \"../../flows/ArithmeticFlow\";\nimport {InputFlow} from \"../../flows/InputFlow\";\nimport {OutputFlow} from \"../../flows/OutputFlow\";\nimport {WhileFlow} from \"../../flows/WhileFlow\";\nimport {AssignmentFlow} from \"../../flows/AssignmentFlow\";\nimport {ArithmeticOperationType, ProgrammingLanguage, VariableType} from \"../../../models\";\nimport {Class} from \"../Class\";\nimport {ConditionOperation} from \"../../../models/VariableEnums\";\nimport {ProgrammingLanguageTypeConverter} from \"../ProgrammingLanguageTypeConverter\";\nimport {RandomFlow} from \"../../flows/RandomFlow\";\nimport {IfFlow} from \"../../flows/IfFlow\";\n\nexport class JavaCodeStrategy implements CodeStrategy {\n\n    initClass(clazz: Class): void {\n        CodeWriter.getInstance().writeLineToMainFunction(`public class ${clazz.className} {`)\n        CodeWriter.getInstance().scopeCount++\n    }\n\n    finishClass(): void {\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLine(\"}\")\n        CodeWriter.getInstance().writeLine(\"\")\n    }\n\n    initMain(): void {\n        CodeWriter.getInstance().writeLineToMainFunction(`public static void main(String args[]) {`)\n        CodeWriter.getInstance().scopeCount++\n\n    }\n\n    finishMain(): void {\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n        CodeWriter.getInstance().writeLineToMainFunction(\"\")\n    }\n\n    writeFunctionSignature(func: Func): void {\n        let returnTypeString = \"\"\n        if (func.returnType === undefined) {\n            returnTypeString += \"void\"\n        } else {\n            returnTypeString += `${func.returnType}`\n        }\n\n        let parameterString = \"\"\n\n        func.parameters.forEach((value, index) => {\n            parameterString += `${value.type} ${value.name}`\n            if (index !== func.parameters.length - 1) {\n                parameterString += \", \"\n            }\n        })\n\n        CodeWriter.getInstance().writeLine(`private static ${returnTypeString} ${func.functionName}(${parameterString}) `)\n        CodeWriter.getInstance().appendToLastLine(\" {\")\n        CodeWriter.getInstance().scopeCount++\n\n        func.codeLines.forEach((value) => {\n                CodeWriter.getInstance().writeLine(value)\n            }\n        )\n\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLine(\"}\")\n        CodeWriter.getInstance().writeLine(\"\")\n    }\n\n    writeArithmeticFunction(arithmeticFlow: ArithmeticFlow): void {\n        if (arithmeticFlow.content == null)\n            return\n\n        const functionLines: string[] = []\n\n        const parameters: Parameter[] = []\n\n        if (arithmeticFlow.content.operator1.name !== undefined) {\n            parameters.push(new Parameter(\n                arithmeticFlow.content.operator1.name,\n                ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, arithmeticFlow.content.operator1.type)))\n        }\n\n        if (arithmeticFlow.content.operator2.name !== undefined && arithmeticFlow.content.operator1.name !== arithmeticFlow.content.operator2.name) {\n            parameters.push(new Parameter(\n                arithmeticFlow.content.operator2.name,\n                ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, arithmeticFlow.content.operator2.type)))\n        }\n\n        let operationCode = \"\"\n        switch (arithmeticFlow.content.operation) {\n            case ArithmeticOperationType.ADDITION:\n                operationCode = \"+\"\n                break\n            case ArithmeticOperationType.SUBTRACTION:\n                operationCode = \"-\"\n                break\n            case ArithmeticOperationType.MULTIPLICATION:\n                operationCode = \"*\"\n                break\n            case ArithmeticOperationType.DIVISION:\n                operationCode = \"/\"\n                break\n        }\n\n        let operator1Code = \"\"\n        let operator2Code = \"\"\n\n        if (arithmeticFlow.content.operator1.name !== undefined) {\n            operator1Code += arithmeticFlow.content.operator1.name\n        } else {\n            operator1Code += arithmeticFlow.content.operator1.value\n        }\n\n        if (arithmeticFlow.content.operator2.name !== undefined) {\n            operator2Code += arithmeticFlow.content.operator2.name\n        } else {\n            operator2Code += arithmeticFlow.content.operator2.value\n        }\n\n        if (arithmeticFlow.content.operation == ArithmeticOperationType.ROOT) {\n            functionLines.push(`return Math.pow(${operator1Code}, 1 / ${operator2Code});`)\n        } else {\n            functionLines.push(`return ${operator1Code} ${operationCode} ${operator2Code};`)\n        }\n\n        const func = new Func(\n            arithmeticFlow.functionName(),\n            parameters,\n            ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, arithmeticFlow.content.variable.type),\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n    }\n\n    writeArithmeticMain(arithmeticFlow: ArithmeticFlow): void {\n        if (arithmeticFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n\n        if (CodeWriter.getInstance().addVariable(arithmeticFlow.content.variable.name)) {\n            variableSetCode = `${ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, arithmeticFlow.content.variable.type)} `\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${arithmeticFlow.content.variable.name} = ${arithmeticFlow.functionInvocation()};`\n        )\n        CodeWriter.getInstance().writeMainCodeFromFlow(arithmeticFlow.nextFlow())\n    }\n\n    writeAssignmentFunction(assignmentFlow: AssignmentFlow): void {\n    }\n\n    writeAssignmentMain(assignmentFlow: AssignmentFlow): void {\n        if (assignmentFlow.content == null)\n            return\n\n        let contentString = \"\"\n        switch (assignmentFlow.content.variable.type) {\n            case VariableType.DOUBLE:\n            case VariableType.INT:\n                contentString = assignmentFlow.content.variable.value.toString()\n                break\n            case VariableType.STRING:\n                contentString = `\"${assignmentFlow.content.variable.value}\"`\n                break\n            default:\n                break\n        }\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(assignmentFlow.content.variable.name)) {\n            variableSetCode = `${ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, assignmentFlow.content.variable.type)} `\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(`${variableSetCode}${assignmentFlow.content.variable.name} = ${contentString};`)\n        CodeWriter.getInstance().writeMainCodeFromFlow(assignmentFlow.nextFlow())\n    }\n\n    writeInputFunction(inputFlow: InputFlow): void {\n        if (inputFlow.content == null)\n            return\n\n        CodeWriter.getInstance().addDependency(\"import java.util.Scanner;\")\n\n        const functionLines: string[] = []\n        functionLines.push(`System.out.println(\"Please enter value for ${inputFlow.content.variable.name}\");`)\n        functionLines.push(`Scanner scanner = new Scanner(System.in);`)\n\n        const variableTypeString = ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, inputFlow.content.variable.type)\n        switch (inputFlow.content.variable.type) {\n            case VariableType.INT:\n                functionLines.push(`${variableTypeString} input = scanner.nextInt();`)\n                break\n            case VariableType.DOUBLE:\n                functionLines.push(`${variableTypeString} input = scanner.nextDouble();`)\n                break\n            case VariableType.STRING:\n                functionLines.push(`${variableTypeString} input = scanner.nextLine();`)\n                break\n            default:\n                break\n        }\n\n        functionLines.push(`scanner.close();`)\n        functionLines.push(`return input;`)\n\n        const parameters: Parameter[] = []\n\n        const func = new Func(\n            inputFlow.functionName(),\n            parameters,\n            ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, inputFlow.content.variable.type),\n            functionLines\n        )\n\n        CodeWriter.getInstance().writeFunction(func)\n    }\n\n    writeInputMain(inputFlow: InputFlow): void {\n        if (inputFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(inputFlow.content.variable.name)) {\n            variableSetCode = `${ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, inputFlow.content.variable.type)} `\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${inputFlow.content.variable.name} = ${inputFlow.functionInvocation()};`\n        )\n\n        CodeWriter.getInstance().writeMainCodeFromFlow(inputFlow.nextFlow())\n    }\n\n    writeOutputFunction(outputFlow: OutputFlow): void {\n        if (outputFlow.content == null)\n            return\n\n        const functionLines: string[] = []\n\n        const parameters: Parameter[] = []\n        if (outputFlow.content.variable.name) {\n            parameters.push(new Parameter(\n                outputFlow.content.variable.name,\n                ProgrammingLanguageTypeConverter.convert(ProgrammingLanguage.JAVA, outputFlow.content.variable.type)\n            ))\n        }\n\n        const func = new Func(\n            outputFlow.functionName(),\n            parameters,\n            undefined,\n            functionLines\n        )\n\n        let printString = \"\"\n\n        if (!outputFlow.content.variable.name) {\n            printString = `System.out.println(\"${outputFlow.content.variable.value}\");`\n        } else {\n            printString = `System.out.println(\"Value of ${outputFlow.content.variable.name} is \" + ${outputFlow.content.variable.name});`\n        }\n\n        functionLines.push(printString)\n        CodeWriter.getInstance().writeFunction(func)\n    }\n\n    writeOutputMain(outputFlow: OutputFlow): void {\n        CodeWriter.getInstance().writeLineToMainFunction(`${outputFlow.functionInvocation()};`)\n        CodeWriter.getInstance().writeMainCodeFromFlow(outputFlow.nextFlow())\n    }\n\n    writeWhileFunction(whileFlow: WhileFlow): void {\n\n    }\n\n    writeWhileMain(whileFlow: WhileFlow): void {\n        if (!whileFlow.content)\n            return\n\n        const nextScopeId = whileFlow.content.scopeId\n\n        let conditionCode = \"\"\n        whileFlow.content.conditions.forEach((condition) => {\n            conditionCode += condition.first.name\n\n            if (condition.second) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n        })\n\n        CodeWriter.getInstance().writeLineToMainFunction(\"while(\" + conditionCode + \") {\")\n        CodeWriter.getInstance().scopeCount++\n\n        if (nextScopeId != null) {\n            CodeWriter.getInstance().addToLoopStack(whileFlow.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(nextScopeId)\n        }\n\n        CodeWriter.getInstance().scopeCount--\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n        CodeWriter.getInstance().writeMainCodeFromFlow(whileFlow.nextFlow())\n    }\n\n    writeIfFunction(ifFlow: IfFlow): void {\n    }\n\n    writeIfMain(ifFlow: IfFlow): void {\n        if (ifFlow.content == null)\n            return\n\n        let conditionCode = \"\"\n        ifFlow.content.conditions.forEach((condition) => {\n            conditionCode += condition.first.name\n\n            if (condition.second !== undefined) {\n                conditionCode += \" \"\n\n                switch (condition.operation) {\n                    case ConditionOperation.EQUALS:\n                        conditionCode += \"==\"\n                        break\n                    case ConditionOperation.NOT_EQUALS:\n                        conditionCode += \"!=\"\n                        break\n                    case ConditionOperation.GREATER_THAN:\n                        conditionCode += \">\"\n                        break;\n                    case ConditionOperation.GREATER_THAN_OR_EQUALS:\n                        conditionCode += \">=\"\n                        break;\n                    case ConditionOperation.LESS_THAN:\n                        conditionCode += \"<\"\n                        break;\n                    case ConditionOperation.LESS_THAN_OR_EQUALS:\n                        conditionCode += \"<=\"\n                        break;\n                }\n\n                if (!condition.second.name) {\n                    conditionCode += \" \" + condition.second.value\n                } else {\n                    conditionCode += \" \" + condition.second.name\n                }\n            }\n        })\n\n        CodeWriter.getInstance().writeLineToMainFunction(\"if(\" + conditionCode + \") {\")\n        CodeWriter.getInstance().scopeCount++\n\n        if (ifFlow.content.trueScopeId != null) {\n            CodeWriter.getInstance().addToLoopStack(ifFlow.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(ifFlow.content.trueScopeId)\n        }\n\n        CodeWriter.getInstance().scopeCount--\n\n        if (ifFlow.content.falseScopeId != null) {\n            CodeWriter.getInstance().writeLineToMainFunction(\"} else {\")\n            CodeWriter.getInstance().scopeCount++\n\n            CodeWriter.getInstance().addToLoopStack(ifFlow.id)\n            CodeWriter.getInstance().writeMainCodeFromFlow(ifFlow.content.falseScopeId)\n\n            CodeWriter.getInstance().scopeCount--\n\n        }\n        CodeWriter.getInstance().writeLineToMainFunction(\"}\")\n\n        CodeWriter.getInstance().writeMainCodeFromFlow(ifFlow.nextFlow())\n    }\n\n    writeRandomFunction(randomFlow: RandomFlow): void {\n    }\n\n    writeRandomMain(randomFlow: RandomFlow): void {\n        CodeWriter.getInstance().addGlobalVariable(\"static Random random = new Random();\")\n        CodeWriter.getInstance().addDependency(\"import java.util.Random;\")\n\n        if (randomFlow.content == null)\n            return\n\n        let variableSetCode = \"\"\n        if (CodeWriter.getInstance().addVariable(randomFlow.content.variable.name)) {\n            variableSetCode = \"double \"\n        }\n\n        CodeWriter.getInstance().writeLineToMainFunction(\n            `${variableSetCode}${randomFlow.content.variable.name} = ${randomFlow.content.min} + (${randomFlow.content.max} - ${randomFlow.content.min}) * random.nextDouble();`\n        )\n\n        CodeWriter.getInstance().writeMainCodeFromFlow(randomFlow.nextFlow())\n    }\n\n    addDependenciesAndGlobalVariables(dependencies: Set<string>, globalVariables: Set<string>): void {\n        dependencies.add(\"\")\n        let index = 0\n\n        dependencies.forEach((value => {\n                CodeWriter.getInstance().writeLineToIndex(value, index)\n                index++\n            }\n        ))\n\n        CodeWriter.getInstance().writeLineToIndex(\"\", index)\n        index++\n\n        globalVariables.forEach((value => {\n            CodeWriter.getInstance().writeLineToIndex(value, index + 1)\n            index++\n        }))\n    }\n\n}\n","import {ProgrammingLanguage} from \"../../models\";\nimport {CodeStrategy} from \"./CodeStrategy\";\nimport {KotlinCodeStrategy} from \"./kotlin/KotlinCodeStrategy\";\nimport {JavaCodeStrategy} from \"./java/JavaCodeStrategy\";\n\nexport class CodeStrategyFactory {\n    static createCodeStrategy(programmingLanguage: ProgrammingLanguage): CodeStrategy {\n        switch (+programmingLanguage) {\n            case ProgrammingLanguage.JAVA:\n                return new JavaCodeStrategy()\n            case ProgrammingLanguage.KOTLIN:\n                return new KotlinCodeStrategy()\n            default:\n                return new KotlinCodeStrategy()\n        }\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {ArithmeticOperationType, FlowType} from \"../../models\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class ArithmeticFlow implements BaseFlow {\n\n    id: string\n    type: FlowType;\n    nextFlowId: string | null\n    content: ArithmeticFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: ArithmeticFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n\n    }\n\n    functionInvocation(): string {\n        if (this.content == null)\n            return \"\"\n\n        let functionCode = `${this.functionName()}(`\n\n        if (this.content.operator1.name !== undefined) {\n            functionCode += this.content.operator1.name\n        }\n\n        if (this.content.operator2.name !== undefined && this.content.operator1.name !== this.content.operator2.name) {\n            functionCode += `, ${this.content.operator2.name}`\n        }\n\n        functionCode += \")\"\n        return functionCode\n    }\n\n    functionName(): string {\n        return `arithmeticFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class ArithmeticFlowContent {\n    variable: Variable\n    operation: ArithmeticOperationType\n    operator1: Variable\n    operator2: Variable\n\n    constructor(\n        variable: Variable,\n        operation: ArithmeticOperationType,\n        operator1: Variable,\n        operator2: Variable,\n    ) {\n        this.variable = variable\n        this.operation = operation\n        this.operator1 = operator1\n        this.operator2 = operator2\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType} from \"../../models\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class AssignmentFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: AssignmentFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: AssignmentFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `assignmentFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class AssignmentFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {FlowType} from \"../../models/VariableEnums\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\n\nexport class InputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: InputFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: InputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `inputFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class InputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Variable} from \"../../models/Variable\"\nimport {FlowType} from \"../../models\"\n\nexport class OutputFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: OutputFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: OutputFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        if (this.content != null) {\n            if (this.content.variable.name) {\n                return `${this.functionName()}(${this.content.variable.name})`\n            } else {\n                return `${this.functionName()}()`\n            }\n        } else {\n            return \"\"\n        }\n    }\n\n    functionName(): string {\n        return `outputFlow${this.functionCallName}`\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n}\n\nexport class OutputFlowContent {\n    variable: Variable\n\n    constructor(\n        variable: Variable,\n    ) {\n        this.variable = variable\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\";\nimport {FlowType} from \"../../models\";\nimport {CodeWriter} from \"../code/CodeWriter\";\n\nexport class InitialFlow implements BaseFlow {\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.functionCallName = \"\"\n    }\n\n    functionInvocation(): string {\n        return \"\";\n    }\n\n    functionName(): string {\n        return \"\";\n    }\n\n    hasExternalDependencies(): boolean {\n        return false;\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n}\n","export class Class {\n    className: string;\n\n    constructor(className: string) {\n        this.className = className\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\";\nimport {FlowType} from \"../../models\";\nimport {CodeWriter} from \"../code/CodeWriter\";\nimport {Variable} from \"../../models/Variable\";\n\nexport class RandomFlow implements BaseFlow {\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: RandomFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: RandomFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return `${this.functionName()}()`\n    }\n\n    functionName(): string {\n        return `randomFlow${this.functionCallName}`\n    }\n\n    hasExternalDependencies(): boolean {\n        return false;\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n}\n\nexport class RandomFlowContent {\n    variable: Variable\n    min: number\n    max: number\n\n    constructor(\n        variable: Variable,\n        min: number,\n        max: number\n    ) {\n        this.variable = variable\n        this.min = min\n        this.max = max\n    }\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Condition} from \"../../models/Condition\"\nimport {FlowType} from \"../../models\"\nimport {ConditionType} from \"../../models/VariableEnums\";\n\nexport class IfFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: IfFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: IfFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return \"\"\n    }\n\n    functionName(): string {\n        return \"\"\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n}\n\nexport class IfFlowContent {\n    conditions: Condition[]\n    conditionType: ConditionType\n    trueScopeId: string | null\n    falseScopeId: string | null\n\n    constructor(\n        conditions: Condition[],\n        conditionType: ConditionType,\n        trueScopeId: string | null,\n        falseScopeId: string | null,\n    ) {\n        this.conditions = conditions\n        this.conditionType = conditionType\n        this.trueScopeId = trueScopeId\n        this.falseScopeId = falseScopeId\n    }\n\n}\n","import {BaseFlow} from \"../flows/BaseFlow\"\nimport {Func} from \"../Func\"\nimport {Stack} from \"stack-typescript\"\nimport {ProgrammingLanguage} from \"../../models\";\nimport {CodeStrategy} from \"./CodeStrategy\";\nimport {KotlinCodeStrategy} from \"./kotlin/KotlinCodeStrategy\";\nimport {CodeStrategyFactory} from \"./CodeStrategyFactory\";\nimport {ArithmeticFlow} from \"../flows/ArithmeticFlow\";\nimport {AssignmentFlow} from \"../flows/AssignmentFlow\";\nimport {InputFlow} from \"../flows/InputFlow\";\nimport {OutputFlow} from \"../flows/OutputFlow\";\nimport {WhileFlow} from \"../flows/WhileFlow\";\nimport {InitialFlow} from \"../flows/InitialFlow\";\nimport {Class} from \"./Class\";\nimport {RandomFlow} from \"../flows/RandomFlow\";\nimport {IfFlow} from \"../flows/IfFlow\";\n\nexport class CodeWriter {\n    static INITIAL_ID = \"INITIAL_ID\"\n    static TERMINATION_ID = \"TERMINATION_ID\"\n\n    static getInstance(): CodeWriter {\n        return this.instance || (this.instance = new this())\n    }\n\n    private static instance: CodeWriter\n\n    flowIncrementalId = 0\n    flows: Map<string, BaseFlow> = new Map()\n    codes: string[] = []\n    scopeCount = 0\n    private mainFunctionLineIndex = 0\n    private spacing = \"\\t\"\n    private variableSet: Set<string> = new Set()\n    private globalVariableSet: Set<string> = new Set()\n    private dependencySet: Set<string> = new Set()\n    private loopStack: Stack<string> = new Stack()\n\n    private codeStrategy: CodeStrategy = new KotlinCodeStrategy()\n\n    private constructor() {\n        this.loopStack.push(CodeWriter.TERMINATION_ID)\n    }\n\n    reset() {\n        this.flowIncrementalId = 0\n        this.flows.clear()\n        this.variableSet.clear()\n        this.globalVariableSet.clear()\n        this.dependencySet.clear()\n        this.codes = []\n        this.scopeCount = 0\n        this.mainFunctionLineIndex = 0\n        this.loopStack = new Stack()\n        this.loopStack.push(CodeWriter.TERMINATION_ID)\n    }\n\n    init(programmingLanguage: ProgrammingLanguage, flows: Map<string, BaseFlow>) {\n        console.log(flows)\n        this.flows = flows\n        this.codeStrategy = CodeStrategyFactory.createCodeStrategy(programmingLanguage)\n\n        this.generateMain()\n\n        flows.forEach((value) => {\n            this.writeFunctionCodeFromFlow(value)\n        })\n\n        this.codeStrategy.finishClass()\n        this.addDependenciesAndGlobalVariables()\n    }\n\n    writeLineToIndex(line: string, index: number) {\n        this.codes.splice(index, 0, line)\n    }\n\n    writeLineToMainFunction(line: string) {\n        this.codes.splice(this.mainFunctionLineIndex, 0, this.createSpacing() + line)\n        this.mainFunctionLineIndex++\n    }\n\n    writeLine(line: string) {\n        this.codes.push(this.createSpacing() + line)\n    }\n\n    appendToLastLine(str: string) {\n        const lastIndex = this.codes.length - 1\n        let last = this.codes[lastIndex]\n        last += str\n        this.codes[lastIndex] = last\n    }\n\n    generateMain() {\n        const mainClass = new Class(\"GeneratedCode\")\n\n        this.codeStrategy.initClass(mainClass)\n        this.codeStrategy.initMain()\n\n        const initialFlow = this.flows.get(CodeWriter.INITIAL_ID)\n        if (initialFlow !== undefined) {\n            this.writeMainCodeFromFlow(CodeWriter.INITIAL_ID)\n        } else {\n            console.log(\"No initial defined please define it with \" + CodeWriter.INITIAL_ID + \"!\")\n        }\n\n        this.codeStrategy.finishMain()\n    }\n\n    writeFunction(func: Func) {\n        this.codeStrategy.writeFunctionSignature(func)\n    }\n\n    writeMainCodeFromFlow(id: string) {\n        if (!this.removeFromStackIfTopEquals(id)) {\n            const flow = this.flows.get(id)\n            if (flow !== undefined) {\n                if (flow instanceof ArithmeticFlow) {\n                    this.codeStrategy.writeArithmeticMain(flow)\n                } else if (flow instanceof AssignmentFlow) {\n                    this.codeStrategy.writeAssignmentMain(flow)\n                } else if (flow instanceof InputFlow) {\n                    this.codeStrategy.writeInputMain(flow)\n                } else if (flow instanceof OutputFlow) {\n                    this.codeStrategy.writeOutputMain(flow)\n                } else if (flow instanceof WhileFlow) {\n                    this.codeStrategy.writeWhileMain(flow)\n                } else if (flow instanceof IfFlow) {\n                    this.codeStrategy.writeIfMain(flow)\n                } else if (flow instanceof RandomFlow) {\n                    this.codeStrategy.writeRandomMain(flow)\n                } else if (flow instanceof InitialFlow) {\n                    this.writeMainCodeFromFlow(flow.nextFlow())\n                }\n            }\n        }\n    }\n\n    writeFunctionCodeFromFlow(flow: BaseFlow) {\n\n        if (flow instanceof ArithmeticFlow) {\n            this.codeStrategy.writeArithmeticFunction(flow)\n        } else if (flow instanceof AssignmentFlow) {\n            this.codeStrategy.writeAssignmentFunction(flow)\n        } else if (flow instanceof InputFlow) {\n            this.codeStrategy.writeInputFunction(flow)\n        } else if (flow instanceof OutputFlow) {\n            this.codeStrategy.writeOutputFunction(flow)\n        } else if (flow instanceof WhileFlow) {\n            this.codeStrategy.writeWhileFunction(flow)\n        } else if (flow instanceof IfFlow) {\n            this.codeStrategy.writeIfFunction(flow)\n        } else if (flow instanceof RandomFlow) {\n            this.codeStrategy.writeRandomFunction(flow)\n        }\n\n    }\n\n    /**\n     * Returns false if the set already contains variable true otherwise\n     */\n\n    addVariable(name: string | undefined): boolean {\n        name = name === undefined ? \"\" : name\n\n        if (this.variableSet.has(name)) {\n            return false\n        }\n\n        this.variableSet.add(name)\n        return true\n    }\n\n    addDependency(dependency: string) {\n        this.dependencySet.add(dependency)\n    }\n\n    addGlobalVariable(globalVariable: string) {\n        this.globalVariableSet.add(globalVariable)\n    }\n\n    addToLoopStack(id: string) {\n        this.loopStack.push(id)\n    }\n\n    /**\n     * Returns true if top equals index and pops it returns false otherwise.\n     */\n    removeFromStackIfTopEquals(id: string): boolean {\n        if (this.loopStack.top === id) {\n            this.loopStack.pop()\n            return true\n        }\n\n        return false\n    }\n\n    private createSpacing(): string {\n        let spacing = \"\"\n        for (let i = 0; i < this.scopeCount; i++) {\n            spacing += this.spacing\n        }\n\n        return spacing\n    }\n\n    private addDependenciesAndGlobalVariables(): void {\n        this.codeStrategy.addDependenciesAndGlobalVariables(this.dependencySet, this.globalVariableSet)\n    }\n\n}\n","import {BaseFlow} from \"./BaseFlow\"\nimport {CodeWriter} from \"../code/CodeWriter\"\nimport {Condition} from \"../../models/Condition\"\nimport {FlowType} from \"../../models\"\nimport {ConditionType} from \"../../models/VariableEnums\";\n\nexport class WhileFlow implements BaseFlow {\n\n    id: string\n    nextFlowId: string | null\n    type: FlowType\n    content: WhileFlowContent | null\n    functionCallName: string\n\n    constructor(\n        id: string,\n        nextFlowId: string | null,\n        type: FlowType,\n        content: WhileFlowContent | null) {\n        this.id = id\n        this.nextFlowId = nextFlowId\n        this.type = type\n        this.content = content\n        this.functionCallName = (CodeWriter.getInstance().flowIncrementalId++).toString()\n    }\n\n    functionInvocation(): string {\n        return \"\"\n    }\n\n    functionName(): string {\n        return \"\"\n    }\n\n    hasExternalDependencies(): boolean {\n        return false\n    }\n\n    nextFlow(): string {\n        return this.nextFlowId != null ? this.nextFlowId : CodeWriter.TERMINATION_ID\n    }\n\n}\n\nexport class WhileFlowContent {\n    conditions: Condition[]\n    conditionType: ConditionType\n    scopeId: string | null\n\n    constructor(\n        conditions: Condition[],\n        conditionType: ConditionType,\n        scopeId: string | null,\n    ) {\n        this.conditions = conditions\n        this.conditionType = conditionType\n        this.scopeId = scopeId\n    }\n\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {WhileFlowNode} from \"./WhileFlowNode\"\nimport {WhileFlowContent} from \"../../../generator/flows/WhileFlow\"\n\nexport class WhileFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const whileFlow = flow as WhileFlowNode\n\n        const nextFlow = whileFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n        const scopeFlow = whileFlow.getScopeFlow()\n        const scopeFlowId = scopeFlow ? scopeFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.WHILE,\n            whileFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            new WhileFlowContent(\n                whileFlow.conditionList,\n                whileFlow.conditionType,\n                scopeFlowId\n            ),\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {InputFlowNode} from \"./InputFlowNode\"\nimport {InputFlowContent} from \"../../../generator/flows/InputFlow\"\n\nexport class InputFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const inputFlow = flow as InputFlowNode\n\n        const nextFlow = inputFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.INPUT,\n            inputFlow.getID(),\n            null,\n            new InputFlowContent(inputFlow.getVariable()),\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {OutputFlowNode} from \"./OutputFlowNode\"\nimport {OutputFlowContent} from \"../../../generator/flows/OutputFlow\"\n\nexport class OutputFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const outputFlow = flow as OutputFlowNode\n\n        const nextFlow = outputFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.OUTPUT,\n            outputFlow.getID(),\n            null,\n            null,\n            new OutputFlowContent(outputFlow.getVariable()),\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {ArithmeticFlowNode} from \"./ArithmeticFlowNode\"\nimport {ArithmeticFlowContent} from \"../../../generator/flows/ArithmeticFlow\"\n\nexport class ArithmeticFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const arithmeticFlow = flow as ArithmeticFlowNode\n\n        const nextFlow = arithmeticFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.ARITHMETIC,\n            arithmeticFlow.getID(),\n            null,\n            null,\n            null,\n            new ArithmeticFlowContent(\n                arithmeticFlow.getVariable(),\n                arithmeticFlow.getOperation(),\n                arithmeticFlow.getOperator1(),\n                arithmeticFlow.getOperator2()\n            ),\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {AssignmentFlowNode} from \"./AssignmentFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {AssignmentFlowContent} from \"../../../generator/flows/AssignmentFlow\"\n\nexport class AssignmentFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const assignmentFlow = flow as AssignmentFlowNode\n\n        const nextFlow = assignmentFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.ASSIGNMENT,\n            assignmentFlow.getID(),\n            new AssignmentFlowContent(assignmentFlow.getVariable()),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {InitialFlowNode} from \"./InitialFlowNode\"\n\nexport class InitialFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const initialFlow = flow as InitialFlowNode\n\n        const nextFlow = initialFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.INITIAL,\n            flow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {IfFlowNode} from \"./IfFlowNode\"\nimport {IfFlowContent} from \"../../../generator/flows/IfFlow\"\n\nexport class IfFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const ifFlow = flow as IfFlowNode\n\n        const nextFlow = ifFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n        const trueScopeFlow = ifFlow.getTrueScopeFlow()\n        const trueScopeFlowId = trueScopeFlow ? trueScopeFlow.getID() : null\n        const falseScopeFlow = ifFlow.getFalseScopeFlow()\n        const falseScopeFlowId = falseScopeFlow ? falseScopeFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.IF,\n            ifFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            new IfFlowContent(\n                ifFlow.conditionList,\n                ifFlow.conditionType,\n                trueScopeFlowId,\n                falseScopeFlowId\n            ),\n            null,\n            nextFlowId\n        )\n    }\n}\n","import {BaseFlowModelGenerator} from \"../Base/BaseFlowModelGenerator\"\nimport {FlowModel} from \"../../../generator/FlowModelJSON\"\nimport {BaseFlowNode} from \"../../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {RandomFlowNode} from \"./RandomFlowNode\"\nimport {FlowType} from \"../../../models\"\nimport {RandomFlowContent} from \"../../../generator/flows/RandomFlow\"\n\nexport class RandomFlowModelGenerator extends BaseFlowModelGenerator {\n    generate(flow: BaseFlowNode): FlowModel {\n        const randomFlow = flow as RandomFlowNode\n\n        const nextFlow = randomFlow.getNextFlow()\n        const nextFlowId = nextFlow ? nextFlow.getID() : null\n\n        return new FlowModel(\n            FlowType.RANDOM,\n            randomFlow.getID(),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            new RandomFlowContent(randomFlow.getVariable(), randomFlow.minValue, randomFlow.maxValue),\n            nextFlowId\n        )\n    }\n}\n","import {FlowType} from \"../../models\"\nimport {FlowModel} from \"../../generator/FlowModelJSON\"\nimport {WhileFlowModelGenerator} from \"./While/WhileFlowModelGenerator\"\nimport {InputFlowModelGenerator} from \"./Input/InputFlowModelGenerator\"\nimport {OutputFlowModelGenerator} from \"./Output/OutputFlowModelGenerator\"\nimport {ArithmeticFlowModelGenerator} from \"./Arithmetic/ArithmeticFlowModelGenerator\"\nimport {AssignmentFlowModelGenerator} from \"./Assignment/AssignmentFlowModelGenerator\"\nimport {InitialFlowModelGenerator} from \"./Initial/InitialFlowModelGenerator\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {IfFlowModelGenerator} from \"./If/IfFlowModelGenerator\"\nimport {RandomFlowModelGenerator} from \"./Random/RandomFlowModelGenerator\"\n\nexport class FlowModelFactory {\n    private constructor() {\n    }\n\n    static create(baseFlow: BaseFlowNode): FlowModel | null {\n        switch (baseFlow.flowType) {\n            case FlowType.INITIAL:\n                return new InitialFlowModelGenerator().generate(baseFlow)\n            case FlowType.IF:\n                return new IfFlowModelGenerator().generate(baseFlow)\n            case FlowType.WHILE:\n                return new WhileFlowModelGenerator().generate(baseFlow)\n            case FlowType.FOR:\n                return null // TODO\n            case FlowType.INPUT:\n                return new InputFlowModelGenerator().generate(baseFlow)\n            case FlowType.OUTPUT:\n                return new OutputFlowModelGenerator().generate(baseFlow)\n            case FlowType.ARITHMETIC:\n                return new ArithmeticFlowModelGenerator().generate(baseFlow)\n            case FlowType.ASSIGNMENT:\n                return new AssignmentFlowModelGenerator().generate(baseFlow)\n            case FlowType.RANDOM:\n                return new RandomFlowModelGenerator().generate(baseFlow)\n            default:\n                return null\n        }\n    }\n}\n","import {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {FlowModel} from \"../../generator/FlowModelJSON\"\nimport {FlowModelFactory} from \"./FlowModelFactory\"\nimport {FlowType} from \"../../models\"\nimport {WhileFlowNode} from \"./While/WhileFlowNode\"\nimport * as _ from \"lodash\"\nimport {IfFlowNode} from \"./If/IfFlowNode\"\n\nexport class FlowModelGenerator {\n\n    private constructor() {\n    }\n\n    static generate(initialFlow: BaseFlowNode | null): FlowModel[] {\n        const flowModelList: FlowModel[] = []\n\n        this.generateFlowModel(initialFlow, flowModelList)\n\n        return flowModelList\n    }\n\n    private static generateFlowModel(currentFlow: BaseFlowNode | null, flowModelList: FlowModel[], scopeId: string | null = null) {\n        if (!currentFlow)\n            return\n\n        // Check if the node has been visited before\n        if (_.includes(flowModelList.map((flow) => flow.id), currentFlow.getID()))\n            return\n\n        switch (currentFlow.flowType) {\n            case FlowType.WHILE:\n                this.generateFlowModel((currentFlow as WhileFlowNode).getScopeFlow(), flowModelList, currentFlow.getID())\n                break\n            case FlowType.IF:\n                this.generateFlowModel((currentFlow as IfFlowNode).getTrueScopeFlow(), flowModelList, currentFlow.getID())\n                this.generateFlowModel((currentFlow as IfFlowNode).getFalseScopeFlow(), flowModelList, currentFlow.getID())\n                break\n        }\n\n        const flowModel = FlowModelFactory.create(currentFlow)\n        if (flowModel)\n            flowModelList.push(flowModel)\n\n        this.generateFlowModel(currentFlow.getNextFlow(), flowModelList, scopeId)\n    }\n}\n","import React, {Component} from \"react\"\nimport {Dialog, DialogTitle, Typography} from \"@material-ui/core\"\nimport {DialogProps} from \"@material-ui/core/Dialog\"\nimport Button from \"@material-ui/core/Button\"\nimport strings from \"../../lang\"\nimport styles from \"./AddNodeDialog.module.css\"\nimport {BasePropertiesState} from \"../Flows/Base/BaseProperties\"\nimport {Variable} from \"../../models/Variable\"\nimport {FlowType} from \"../../models\"\nimport {FlowPropertiesFactory} from \"../Flows\"\n\nexport interface AddNodeDialogProps extends DialogProps {\n    onSaveClick: (data: BasePropertiesState | null) => void,\n    onDismissClick: () => void,\n    type: FlowType | null,\n    variables: Variable[]\n}\n\nexport interface AddNodeDialogState {\n    bodyData: BasePropertiesState | null\n}\n\nexport class AddNodeDialog extends Component<AddNodeDialogProps, AddNodeDialogState> {\n    static defaultProps = {\n        variables: []\n    }\n\n    constructor(props: AddNodeDialogProps) {\n        super(props)\n\n        this.state = {\n            bodyData: null\n        }\n    }\n\n    onBodyChanged(data: BasePropertiesState) {\n        this.setState({bodyData: data})\n    }\n\n    onSave() {\n        if (this.props.onSaveClick != null)\n            this.props.onSaveClick(this.state.bodyData)\n    }\n\n    onDismiss() {\n        if (this.props.onDismissClick != null)\n            this.props.onDismissClick()\n    }\n\n    render() {\n        return (\n            <Dialog aria-labelledby=\"simple-dialog-title\" {...this.props}>\n                <DialogTitle id=\"simple-dialog-title\">Set Properties</DialogTitle>\n                <div className={styles.addNodeDialogBody}>\n                    <Typography color=\"error\">\n                        {(this.state.bodyData && this.state.bodyData.errorMessage) ? this.state.bodyData.errorMessage : \"\"}\n                    </Typography>\n                    {FlowPropertiesFactory.create(this.props.type, this.props.variables, this.onBodyChanged.bind(this))}\n                </div>\n                <div className={styles.addNodeDialogButtonContainer}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.onDismiss.bind(this)}>\n                        {strings.dismiss}\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.onSave.bind(this)}>\n                        {strings.save}\n                    </Button>\n                </div>\n            </Dialog>\n        )\n    }\n}\n","import {CodeWriter} from \"./code/CodeWriter\";\nimport {BaseFlow} from \"./flows/BaseFlow\";\nimport {FlowModel} from \"./FlowModelJSON\";\nimport {AssignmentFlow} from \"./flows/AssignmentFlow\";\nimport {InputFlow} from \"./flows/InputFlow\";\nimport {OutputFlow} from \"./flows/OutputFlow\";\nimport {ArithmeticFlow} from \"./flows/ArithmeticFlow\";\nimport {WhileFlow} from \"./flows/WhileFlow\";\nimport {FlowType, ProgrammingLanguage} from \"../models\";\nimport {InitialFlow} from \"./flows/InitialFlow\";\nimport {IfFlow} from \"./flows/IfFlow\";\nimport {RandomFlow, RandomFlowContent} from \"./flows/RandomFlow\";\n\nexport class CodeGenerator {\n\n    generate(programmingLanguage: ProgrammingLanguage, flowModels: FlowModel[]): string {\n        CodeWriter.getInstance().reset()\n        CodeWriter.getInstance().init(programmingLanguage, this.convertToFlowObjects(flowModels))\n\n        return CodeWriter.getInstance().codes.join(\"\\n\")\n    }\n\n    private convertToFlowObjects(flowModels: FlowModel[]): Map<string, BaseFlow> {\n        const baseFlowMap = new Map<string, BaseFlow>()\n\n        flowModels.forEach((value) => {\n\n                switch (value.type) {\n                    case FlowType.INITIAL:\n                        baseFlowMap.set(CodeWriter.INITIAL_ID, new InitialFlow(\n                            CodeWriter.INITIAL_ID,\n                            value.nextFlowId,\n                            value.type\n                        ))\n                        break\n                    case FlowType.ASSIGNMENT:\n                        baseFlowMap.set(value.id, new AssignmentFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.assignmentFlowContent\n                        ))\n                        break\n                    case FlowType.INPUT:\n                        baseFlowMap.set(value.id, new InputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.inputFlowContent\n                        ))\n                        break\n                    case FlowType.OUTPUT:\n                        baseFlowMap.set(value.id, new OutputFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.outputFlowContent\n                        ))\n                        break\n                    case FlowType.ARITHMETIC:\n                        baseFlowMap.set(value.id, new ArithmeticFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.arithmeticFlowContent\n                        ))\n                        break\n                    case FlowType.WHILE:\n                        baseFlowMap.set(value.id, new WhileFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.whileFlowContent\n                        ))\n                        break\n                    case FlowType.IF:\n                        baseFlowMap.set(value.id, new IfFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.ifFlowContent\n                        ))\n                        break\n                    case FlowType.RANDOM:\n                        baseFlowMap.set(value.id, new RandomFlow(\n                            value.id,\n                            value.nextFlowId,\n                            value.type,\n                            value.randomFlowContent\n                        ))\n                        break\n\n                    /*\n                    case \"if\":\n                        baseFlowList.push(new IfFlow(\n                            value.id,\n                            value.type,\n                            value.ifFlowContent\n                        ))\n                        break\n                    case \"for\":\n                        baseFlowList.push(new ForFlow(\n                            value.id,\n                            value.type,\n                            value.forFlowContent\n                        ))\n                        break\n                     */\n\n                    default :\n                        break\n\n                }\n            }\n        )\n\n        return baseFlowMap\n    }\n}\n","import {AbstractPortFactory, PortModel} from \"nberktumer-react-diagrams\"\nimport {DefaultPortModel} from \"./DefaultPort\"\n\nexport class PortFactory extends AbstractPortFactory {\n    cb: (initialConfig?: any) => DefaultPortModel\n\n    constructor(type: string, cb: (initialConfig?: any) => DefaultPortModel) {\n        super(type)\n        this.cb = cb\n    }\n\n    getNewInstance(initialConfig?: any): DefaultPortModel {\n        return this.cb(initialConfig)\n    }\n}\n","import * as React from \"react\"\nimport * as _ from \"lodash\"\nimport {BaseWidget, BaseWidgetProps} from \"nberktumer-react-diagrams\"\nimport {BaseFlowNode} from \"./BaseFlowNode\"\nimport styles from \"./BaseFlow.module.css\"\nimport {DefaultPortLabel, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../../Ports/DefaultPort\"\n\nexport interface RectangleNodeWidgetProps extends BaseWidgetProps {\n    node: BaseFlowNode;\n}\n\nexport interface RectangleNodeWidgetState {\n}\n\nexport class BaseFlowWidget extends BaseWidget<RectangleNodeWidgetProps, RectangleNodeWidgetState> {\n    constructor(props: RectangleNodeWidgetProps) {\n        super(\"srd-default-node\", props)\n        this.state = {}\n    }\n\n    generatePort(port: DefaultPortModel) {\n        return <DefaultPortLabel model={port} key={port.id}/>\n    }\n\n    render() {\n        return (\n            <div {...this.getProps()} style={{background: this.props.node.color}}>\n                <div className={styles.rectangleNodeTitle}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.name}</div>\n                </div>\n                <div className={styles.rectangleNodePorts}>\n                    <div className={styles.rectangleNodeIn}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.LEFT), this.generatePort.bind(this))}\n                    </div>\n                    <div className={styles.rectangleNodeOut}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.RIGHT), this.generatePort.bind(this))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as SRD from \"nberktumer-react-diagrams\"\nimport * as React from \"react\"\nimport {BaseFlowNode} from \"./BaseFlowNode\"\nimport {BaseFlowWidget} from \"./BaseFlowWidget\"\nimport {FlowNodeFactory} from \"../../../Flows\"\n\nexport class BaseFlowFactory extends SRD.AbstractNodeFactory {\n    constructor() {\n        super(\"base-flow\")\n    }\n\n    generateReactWidget(diagramEngine: SRD.DiagramEngine, node: BaseFlowNode): JSX.Element {\n        return <BaseFlowWidget node={node}/>\n    }\n\n    getNewInstance(node: any) {\n        return FlowNodeFactory.load(node)\n    }\n}\n","import * as React from \"react\"\nimport * as _ from \"lodash\"\nimport {BaseWidget, BaseWidgetProps} from \"nberktumer-react-diagrams\"\nimport styles from \"../BaseFlow/BaseFlow.module.css\"\nimport {BaseInfoFlowNode} from \"./BaseInfoFlowNode\"\nimport {DefaultPortLabel, DefaultPortLocation, DefaultPortModel} from \"../../Ports/DefaultPort\"\n\nexport interface RectangleNodeWithInfoWidgetProps extends BaseWidgetProps {\n    node: BaseInfoFlowNode;\n}\n\nexport interface RectangleNodeWithInfoWidgetState {\n}\n\nexport class BaseInfoFlowWidget extends BaseWidget<RectangleNodeWithInfoWidgetProps, RectangleNodeWithInfoWidgetState> {\n    constructor(props: RectangleNodeWithInfoWidgetProps) {\n        super(\"srd-default-node\", props)\n        this.state = {}\n    }\n\n    generatePort(port: DefaultPortModel) {\n        return <DefaultPortLabel model={port} key={port.id}/>\n    }\n\n    render() {\n        return (\n            <div {...this.getProps()} style={{background: this.props.node.color}}>\n                <div className={styles.rectangleNodeTitle}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.name}</div>\n                </div>\n                <div className={styles.rectangleNodeInfo}>\n                    <div className={styles.rectangleNodeName}>{this.props.node.info}</div>\n                </div>\n                <div className={styles.rectangleNodePorts}>\n                    <div className={styles.rectangleNodeIn}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.LEFT), this.generatePort.bind(this))}\n                    </div>\n                    <div className={styles.rectangleNodeOut}>\n                        {_.map(this.props.node.getPortListByLocation(DefaultPortLocation.RIGHT), this.generatePort.bind(this))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as SRD from \"nberktumer-react-diagrams\"\nimport * as React from \"react\"\nimport {BaseInfoFlowNode} from \"./BaseInfoFlowNode\"\nimport {BaseInfoFlowWidget} from \"./BaseInfoFlowWidget\"\nimport {FlowNodeFactory} from \"../../../Flows\"\n\nexport class BaseInfoFlowFactory extends SRD.AbstractNodeFactory {\n    constructor() {\n        super(\"base-info-flow\")\n    }\n\n    generateReactWidget(diagramEngine: SRD.DiagramEngine, node: BaseInfoFlowNode): JSX.Element {\n        return <BaseInfoFlowWidget node={node}/>\n    }\n\n    getNewInstance(node: any) {\n        return FlowNodeFactory.load(node)\n    }\n}\n","import React, {Component} from \"react\"\nimport styles from \"./CanvasPanel.module.css\"\nimport * as _ from \"lodash\"\nimport {BaseEvent, BaseModel, DiagramEngine, DiagramModel, DiagramWidget, NodeModel} from \"nberktumer-react-diagrams\"\nimport {FlowType} from \"../../models\"\nimport {PortFactory} from \"../CanvasItems/Ports/PortFactory\"\nimport {BaseFlowFactory} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowFactory\"\nimport {BaseInfoFlowFactory} from \"../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowFactory\"\nimport {BasePropertiesState} from \"../Flows/Base/BaseProperties\"\nimport {DefaultPort, DefaultPortLocation, DefaultPortModel, DefaultPortType} from \"../CanvasItems/Ports/DefaultPort\"\nimport {Variable} from \"../../models/Variable\"\nimport {InitialFlowNode} from \"../Flows/Initial/InitialFlowNode\"\nimport {FlowNodeFactory} from \"../Flows\"\nimport {BaseFlowNode} from \"../CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BaseInfoFlowNode} from \"../CanvasItems/Nodes/BaseInfoFlow/BaseInfoFlowNode\"\n\nexport interface CanvasPanelProps {\n    variableList: Variable[]\n    onDrop: (type: FlowType, position: { x: number, y: number }) => void,\n    onDiagramChanged: () => void,\n    onSelectionChanged: (event: BaseEvent<BaseModel> & { isSelected: boolean }) => void,\n    onEntityRemoved: (event: BaseEvent<BaseModel>) => void,\n    onItemAdded: (flow: BaseFlowNode) => void\n}\n\nexport interface CanvasPanelState {\n}\n\nexport default class CanvasPanel extends Component<CanvasPanelProps, CanvasPanelState> {\n    activeModel: DiagramModel\n    diagramEngine: DiagramEngine\n    initialNode: InitialFlowNode\n\n    constructor(props: CanvasPanelProps) {\n        super(props)\n        this.diagramEngine = new DiagramEngine()\n        this.activeModel = new DiagramModel()\n        this.initialNode = FlowNodeFactory.create(FlowType.INITIAL, undefined) as InitialFlowNode\n\n        this.newProject()\n    }\n\n    newProject = () => {\n        this.diagramEngine = new DiagramEngine()\n        this.diagramEngine.installDefaultFactories()\n\n        this.diagramEngine.registerNodeFactory(new BaseFlowFactory())\n        this.diagramEngine.registerNodeFactory(new BaseInfoFlowFactory())\n        this.diagramEngine.registerPortFactory(new PortFactory(\"default\", () => new DefaultPortModel(\n            new DefaultPort(DefaultPortType.IN, DefaultPortLocation.LEFT), \"unknown\")))\n\n        this.activeModel = new DiagramModel()\n        this.diagramEngine.setDiagramModel(this.activeModel)\n\n        this.initialNode = FlowNodeFactory.create(FlowType.INITIAL, undefined) as InitialFlowNode\n        this.initialNode.addListener({\n            selectionChanged: this.props.onSelectionChanged.bind(this),\n            entityRemoved: this.props.onEntityRemoved.bind(this)\n        })\n\n        this.initialNode.x = window.innerWidth * 0.1\n        this.initialNode.y = window.innerHeight * 0.4\n\n        this.diagramEngine.getDiagramModel().addNode(this.initialNode)\n    }\n\n    saveProject = () => {\n        const diagram = this.activeModel.serializeDiagram() as { [k: string]: any }\n        diagram.canvasPanel = {\n            variableList: this.props.variableList,\n            initialNodeId: this.initialNode.getID()\n        }\n        return diagram\n    }\n\n    loadProject = (data: string, onLoad: (props: any) => void) => {\n        const diagram = JSON.parse(data)\n\n        const model = new DiagramModel()\n        model.deSerializeDiagram(diagram, this.diagramEngine)\n\n        _.forEach(model.getNodes(), (node: NodeModel) => {\n            node.addListener({\n                selectionChanged: (e: BaseEvent<BaseModel> & { isSelected: boolean }) => this.props.onSelectionChanged(e),\n                entityRemoved: (e: BaseEvent<BaseModel>) => this.props.onEntityRemoved(e)\n            });\n            (node as BaseFlowNode).addOnLinkChangedListener(this.props.onDiagramChanged)\n\n            if (node instanceof BaseInfoFlowNode) {\n                (node as BaseInfoFlowNode).updateInfo()\n            }\n        })\n\n        this.diagramEngine.setDiagramModel(model)\n        this.activeModel = model\n        this.initialNode = model.getNode(diagram.canvasPanel.initialNodeId) as InitialFlowNode\n\n        onLoad(diagram.canvasPanel.variableList)\n        this.forceUpdate()\n    }\n\n    addItem = (type: FlowType, data: BasePropertiesState, position: { x: number, y: number }): void => {\n        const node = FlowNodeFactory.create(type, data)\n        if (!node)\n            return\n\n        node.x = position.x\n        node.y = position.y\n\n        node.addOnLinkChangedListener(this.props.onDiagramChanged)\n        node.addListener({\n            selectionChanged: (e: BaseEvent<BaseModel> & { isSelected: boolean }) => this.props.onSelectionChanged(e),\n            entityRemoved: (e: BaseEvent<BaseModel>) => this.props.onEntityRemoved(e)\n        })\n\n        this.diagramEngine.getDiagramModel().addNode(node)\n\n        this.props.onItemAdded(node)\n        this.forceUpdate()\n    }\n\n    render() {\n        return (\n            <div\n                className={styles.diagramLayer}\n                onDrop={(event) => this.onDrop(event)}\n                onDragOver={(event) => event.preventDefault()}>\n\n                <DiagramWidget\n                    maxNumberPointsPerLink={0}\n                    allowLooseLinks={false}\n                    className={styles.srdDemoCanvas}\n                    diagramEngine={this.diagramEngine}/>\n            </div>\n        )\n    }\n\n    private onDrop(event: any): void {\n        const data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"))\n\n        if (!Object.values(FlowType).includes(data.type))\n            return\n\n        const points = this.diagramEngine.getRelativeMousePoint(event)\n\n        this.props.onDrop(data.type, points)\n    }\n}\n","import React, {Component} from \"react\"\nimport {AppBar, Menu, MenuItem, Toolbar, Typography} from \"@material-ui/core\"\nimport styles from \"./EditorHeader.module.css\"\nimport strings from \"../../lang\"\n\nexport interface EditorHeaderProps {\n    onClickListener: (item: string) => void\n}\n\nexport interface EditorHeaderState {\n    anchorEl: ((element: HTMLElement) => HTMLElement) | HTMLElement | undefined | null,\n}\n\nexport class EditorHeader extends Component<EditorHeaderProps, EditorHeaderState> {\n    static defaultProps = {\n        onClickListener: () => {\n        }\n    }\n\n    constructor(props: EditorHeaderProps) {\n        super(props)\n\n        this.state = {\n            anchorEl: null\n        }\n    }\n\n    render() {\n        return (\n            <AppBar position=\"static\">\n                <Toolbar className={styles.toolbar}>\n                    <div className={styles.container}>\n                        <Typography\n                            className={styles.clickable}\n                            variant=\"overline\"\n                            aria-owns={Boolean(this.state.anchorEl) ? \"menu-appbar\" : undefined}\n                            aria-haspopup=\"true\"\n                            onClick={this.handleFileMenu}\n                            color=\"inherit\">\n                            {strings.file}\n                        </Typography>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={this.state.anchorEl}\n                            anchorOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\"\n                            }}\n                            transformOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\"\n                            }}\n                            open={Boolean(this.state.anchorEl)}\n                            onClose={this.handleClose}\n                        >\n                            <MenuItem onClick={() => this.handleClick(\"new\")}>{strings.new}</MenuItem>\n                            <MenuItem onClick={() => this.handleClick(\"save\")}>{strings.save}</MenuItem>\n                            <MenuItem onClick={() => this.handleClick(\"load\")}>{strings.load}</MenuItem>\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        )\n    }\n\n    private handleClick = (item: string) => {\n        this.props.onClickListener(item)\n        this.setState({anchorEl: null})\n    }\n\n    private handleFileMenu = (event: any) => {\n        this.setState({anchorEl: event.currentTarget})\n    }\n\n    private handleClose = () => {\n        this.setState({anchorEl: null})\n    }\n}\n","import React, {Component, createRef} from \"react\"\nimport styles from \"./Editor.module.css\"\nimport {ReflexContainer, ReflexElement, ReflexSplitter} from \"react-reflex\"\nimport {ShapePanel} from \"../../components/ShapePanel/ShapePanel\"\nimport {ShapeItem} from \"../../components/ShapePanel/ShapeItem\"\nimport {CodePreviewPanel} from \"../../components/CodePreviewPanel/CodePreviewPanel\"\nimport {FlowType, ProgrammingLanguage} from \"../../models\"\nimport {ProjectTreePanel} from \"../../components/ProjectTreePanel/ProjectTreePanel\"\nimport {AddNodeDialog} from \"../../components/AddNodeDialog/AddNodeDialog\"\nimport {BasePropertiesState} from \"../../components/Flows/Base/BaseProperties\"\nimport {CodeGenerator} from \"../../generator/CodeGenerator\"\nimport {Variable} from \"../../models/Variable\"\nimport CanvasPanel from \"../../components/CanvasPanel/CanvasPanel\"\nimport {FlowModelGenerator, FlowPropertiesFactory} from \"../../components/Flows\"\nimport {BaseEvent, BaseModel} from \"nberktumer-react-diagrams\"\nimport {BaseFlowNode} from \"../../components/CanvasItems/Nodes/BaseFlow/BaseFlowNode\"\nimport {BaseVariableFlowNode} from \"../../components/Flows/Base/BaseVariableFlowNode\"\nimport {EditorHeader} from \"../../components/EditorHeader/EditorHeader\"\nimport {FileUtils} from \"../../utils\"\nimport {MenuItem, TextField} from \"@material-ui/core\"\n\nexport interface EditorProps {\n}\n\nexport interface EditorState {\n    height: string | undefined,\n    width: string | undefined,\n    isModalOpen: boolean,\n    flowType: FlowType | null,\n    flowPosition: { x: number, y: number },\n    generatedCode: string,\n    variableList: Variable[],\n    properties: JSX.Element,\n    selectedItem: string,\n    selectedLanguage: ProgrammingLanguage\n}\n\nexport default class Editor extends Component<EditorProps, EditorState> {\n    readonly programmingLanguages = Object.keys(ProgrammingLanguage)\n        .filter((k) => typeof ProgrammingLanguage[k as any] !== \"number\")\n    canvasPanel = createRef<CanvasPanel>()\n    codeGenerator = new CodeGenerator()\n\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            height: \"1px\",\n            width: \"1px\",\n            isModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0},\n            generatedCode: this.codeGenerator.generate(ProgrammingLanguage.KOTLIN, []),\n            variableList: [],\n            properties: <div/>,\n            selectedItem: \"\",\n            selectedLanguage: ProgrammingLanguage.KOTLIN\n        }\n    }\n\n    resetState = () => {\n        this.setState({\n            isModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0},\n            variableList: [],\n            properties: <div/>,\n            selectedItem: \"\",\n            selectedLanguage: ProgrammingLanguage.KOTLIN\n        })\n    }\n\n    onModalSaveClick(data: BasePropertiesState | null) {\n        this.onModalClose()\n        if (data && this.canvasPanel.current && this.state.flowType && !data.errorMessage && !data.errorField)\n            this.canvasPanel.current.addItem(this.state.flowType, data, this.state.flowPosition)\n    }\n\n    onModalDismissClick() {\n        this.onModalClose()\n    }\n\n    onModalClose() {\n        this.setState({\n            isModalOpen: false,\n            flowType: null,\n            flowPosition: {x: 0, y: 0}\n        })\n    }\n\n    onDiagramChanged() {\n        if (!this.canvasPanel.current)\n            return\n\n        const flowModelList = FlowModelGenerator.generate(this.canvasPanel.current.initialNode)\n        console.log(flowModelList)\n        this.setState({generatedCode: this.codeGenerator.generate(this.state.selectedLanguage, flowModelList)})\n    }\n\n    onCanvasDrop(type: FlowType, position: { x: number, y: number }) {\n        this.setState({\n            isModalOpen: true,\n            flowType: type,\n            flowPosition: position\n        })\n    }\n\n    onItemAdded(flow: BaseFlowNode) {\n        if (flow instanceof BaseVariableFlowNode) {\n            this.state.variableList.push((flow as BaseVariableFlowNode).getVariable())\n        }\n    }\n\n    onEntityRemoved(event: BaseEvent<BaseModel>) {\n        if (event.entity instanceof BaseVariableFlowNode) {\n            const newVariableList = this.state.variableList.filter((value) => {\n                return value.name !== (event.entity as BaseVariableFlowNode).getVariable().name\n            })\n\n            this.setState({variableList: newVariableList})\n        }\n\n        if (event.entity.getID() === this.state.selectedItem) {\n            this.setState({properties: (<div/>), selectedItem: \"\"})\n        }\n    }\n\n    onSelectionChanged(event: BaseEvent<BaseModel> & { isSelected: boolean }) {\n        if (!this.canvasPanel.current || !(event.entity instanceof BaseFlowNode))\n            return\n\n        const selectedItems = this.canvasPanel.current.diagramEngine.diagramModel.getSelectedItems().filter((item) => {\n            return item instanceof BaseFlowNode\n        })\n\n        if (selectedItems.length > 1 && this.state.selectedItem !== \"\") {\n            this.setState({properties: (<div/>), selectedItem: \"\"})\n        } else if (selectedItems.length === 1 && event.isSelected) {\n            // Workaround for updating the properties panel\n            this.setState({properties: <div/>}, () => {\n                const properties = FlowPropertiesFactory.createReadonlyVariableType((event.entity as BaseFlowNode).flowType,\n                    this.state.variableList, (data: BasePropertiesState) => {\n                        if (!data.errorMessage) {\n                            if (event.entity instanceof BaseVariableFlowNode) {\n                                // tslint:disable-next-line:prefer-for-of\n                                for (let i = 0; i < this.state.variableList.length; i++) {\n                                    if (this.state.variableList[i].name === (event.entity as BaseVariableFlowNode).getVariable().name) {\n                                        this.state.variableList[i].name = data.variableName\n                                        break\n                                    }\n                                }\n                            }\n                            (event.entity as BaseFlowNode).updateNode(data)\n                            this.onDiagramChanged()\n                        }\n                    }, event.entity as BaseFlowNode)\n\n                this.setState({properties, selectedItem: event.entity.getID()})\n            })\n        } else {\n            this.setState({properties: (<div/>), selectedItem: \"\"})\n        }\n    }\n\n    onHeaderMenuClickListener = (item: string) => {\n        switch (item) {\n            case \"new\": {\n                if (!this.canvasPanel.current)\n                    return\n\n                this.canvasPanel.current.newProject()\n                this.resetState()\n                this.onDiagramChanged()\n                break\n            }\n            case \"save\": {\n                if (!this.canvasPanel.current)\n                    return\n\n                const base64 = JSON.stringify(this.canvasPanel.current.saveProject())\n                FileUtils.save(\"FlowieSave.flwie\", base64)\n                break\n            }\n            case \"load\": {\n                FileUtils.load((data: string) => {\n                    if (!this.canvasPanel.current)\n                        return\n\n                    this.canvasPanel.current.loadProject(data, (variableList: any) => {\n                        this.resetState()\n                        this.setState({variableList})\n                        this.onDiagramChanged()\n                    })\n                }, (err: string) => {\n                    console.error(err)\n                })\n\n                break\n            }\n            default:\n                return\n        }\n    }\n\n    render() {\n        return (\n            <div className={styles.App}>\n                <AddNodeDialog onSaveClick={this.onModalSaveClick.bind(this)}\n                               onDismissClick={this.onModalDismissClick.bind(this)}\n                               onClose={this.onModalClose.bind(this)}\n                               aria-labelledby=\"simple-dialog-title\"\n                               variables={this.state.variableList}\n                               open={this.state.isModalOpen}\n                               type={this.state.flowType}/>\n                <EditorHeader onClickListener={(item: string) => this.onHeaderMenuClickListener(item)}/>\n                <ReflexContainer orientation=\"vertical\">\n                    <ReflexElement minSize={250}>\n                        <ReflexContainer orientation=\"horizontal\" style={{height: \"100vh\"}}>\n                            <ReflexElement className=\"left-pane\" flex={0.35} minSize={200}>\n                                <div style={{width: \"100%\", height: \"100%\", backgroundColor: \"#1d1f21\"}}>\n                                    <ProjectTreePanel/>\n                                </div>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement className=\"left-pane\" minSize={200}>\n                                <ShapePanel>\n                                    {Object.values(FlowType).filter((value) => value !== FlowType.INITIAL)\n                                        .map((value) => (\n                                            <ShapeItem key={value} model={{type: value}} name={value}/>\n                                        ))}\n                                </ShapePanel>\n                            </ReflexElement>\n                        </ReflexContainer>\n                    </ReflexElement>\n\n                    <ReflexSplitter/>\n\n                    <ReflexElement className=\"middle-pane\" flex={0.55} minSize={250}>\n                        <div className={styles.paneContent}>\n                            <CanvasPanel ref={this.canvasPanel}\n                                         variableList={this.state.variableList}\n                                         onItemAdded={this.onItemAdded.bind(this)}\n                                         onDiagramChanged={this.onDiagramChanged.bind(this)}\n                                         onDrop={this.onCanvasDrop.bind(this)}\n                                         onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                         onEntityRemoved={this.onEntityRemoved.bind(this)}/>\n                        </div>\n                    </ReflexElement>\n\n                    <ReflexSplitter/>\n\n                    <ReflexElement minSize={250}>\n                        <ReflexContainer orientation=\"horizontal\" style={{height: \"100vh\"}}>\n                            <ReflexElement className=\"right-pane\" flex={0.5} minSize={200}>\n                                <div className={styles.propertiesPanel}>\n                                    {this.state.properties}\n                                </div>\n                            </ReflexElement>\n\n                            <ReflexSplitter/>\n\n                            <ReflexElement className=\"right-pane\" minSize={100}>\n                                <div style={{display: \"flex\", height: \"100%\", width: \"100%\", flexDirection: \"column\"}}>\n                                    <TextField\n                                        id=\"language-selector\"\n                                        select\n                                        value={this.state.selectedLanguage}\n                                        onChange={(event: any) => {\n                                            this.setState({selectedLanguage: event.target.value}, () => {\n                                                this.onDiagramChanged()\n                                            })\n                                        }}\n                                        className={styles.languageSelector}\n                                        margin=\"none\">\n                                        {this.programmingLanguages.map((key: any) => (\n                                            <MenuItem key={key} value={key}>\n                                                {ProgrammingLanguage[key]}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <div style={{\n                                        display: \"flex\",\n                                        flex: 1,\n                                        height: \"100%\",\n                                        width: \"100%\",\n                                        flexDirection: \"column\"\n                                    }}>\n\n                                        <CodePreviewPanel code={this.state.generatedCode}\n                                                          language={this.state.selectedLanguage}/>\n                                    </div>\n                                </div>\n                            </ReflexElement>\n                        </ReflexContainer>\n                    </ReflexElement>\n                </ReflexContainer>\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            )\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {Editor} from \"./pages\"\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\nimport \"./index.css\"\nimport \"nberktumer-react-diagrams/dist/style.min.css\"\nimport \"react-reflex/styles.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render((\n    <Router basename=\"/Flowie\">\n        <div>\n            <Route path=\"/\" component={Editor} exact/>\n        </div>\n    </Router>\n), document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Editor_App__3tFom\",\"paneContent\":\"Editor_paneContent__eMkRK\",\"diagramLayer\":\"Editor_diagramLayer__3EbQu\",\"srdDemoCanvas\":\"Editor_srdDemoCanvas__1q77O\",\"propertiesPanel\":\"Editor_propertiesPanel__1GtXt\",\"languageSelector\":\"Editor_languageSelector__3FCne\",\"underline\":\"Editor_underline__2VhQO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tray\":\"ShapePanel_tray__HYIa9\",\"trayItem\":\"ShapePanel_trayItem__24yED\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EditorHeader_container__31XiZ\",\"toolbar\":\"EditorHeader_toolbar__3TX6K\",\"clickable\":\"EditorHeader_clickable__3TmOl\"};"],"sourceRoot":""}